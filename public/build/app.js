(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app"],{

/***/ "./assets/css/FactureAdmin.css":
/*!*************************************!*\
  !*** ./assets/css/FactureAdmin.css ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/accueilInsti.css":
/*!*************************************!*\
  !*** ./assets/css/accueilInsti.css ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/appelOffre.css":
/*!***********************************!*\
  !*** ./assets/css/appelOffre.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/carousel.css":
/*!*********************************!*\
  !*** ./assets/css/carousel.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/cguOtd.css":
/*!*******************************!*\
  !*** ./assets/css/cguOtd.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/cgv.css":
/*!****************************!*\
  !*** ./assets/css/cgv.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/chat.css":
/*!*****************************!*\
  !*** ./assets/css/chat.css ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/crm.css":
/*!****************************!*\
  !*** ./assets/css/crm.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/cssAdmin.css":
/*!*********************************!*\
  !*** ./assets/css/cssAdmin.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/defilement.css":
/*!***********************************!*\
  !*** ./assets/css/defilement.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/dossier.css":
/*!********************************!*\
  !*** ./assets/css/dossier.css ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/enSavoirPlus.css":
/*!*************************************!*\
  !*** ./assets/css/enSavoirPlus.css ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/forum.css":
/*!******************************!*\
  !*** ./assets/css/forum.css ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/insti.css":
/*!******************************!*\
  !*** ./assets/css/insti.css ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/interHidden.css":
/*!************************************!*\
  !*** ./assets/css/interHidden.css ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/interInstiModale.css":
/*!*****************************************!*\
  !*** ./assets/css/interInstiModale.css ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/map.css":
/*!****************************!*\
  !*** ./assets/css/map.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/militaire.css":
/*!**********************************!*\
  !*** ./assets/css/militaire.css ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/modalCalendrier.css":
/*!****************************************!*\
  !*** ./assets/css/modalCalendrier.css ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/modalDossier.css":
/*!*************************************!*\
  !*** ./assets/css/modalDossier.css ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/paiement.css":
/*!*********************************!*\
  !*** ./assets/css/paiement.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/planning.css":
/*!*********************************!*\
  !*** ./assets/css/planning.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/sepa.css":
/*!*****************************!*\
  !*** ./assets/css/sepa.css ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/signature.css":
/*!**********************************!*\
  !*** ./assets/css/signature.css ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/style.css":
/*!******************************!*\
  !*** ./assets/css/style.css ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/supprimerDossier.css":
/*!*****************************************!*\
  !*** ./assets/css/supprimerDossier.css ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/js/abonnement.js":
/*!*********************************!*\
  !*** ./assets/js/abonnement.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Choix de l'abonnement") {
  (function () {
    var noBack = function noBack() {
      window.history.forward();
    };

    var abonne = function abonne(idAbonnement) {
      var button = document.createElement('button');
      /* document.querySelectorAll('.blockSelect').forEach((aboDiv) => {
           if(idAbonnement == aboDiv.getAttribute('data-aboid')) {
               aboDiv.classList.add('cs');
               aboDiv.classList.remove('ls');
           } else {
               aboDiv.classList.remove('cs');
               aboDiv.classList.add('ls');
           }
       });*/

      while (zoneBouton.firstChild) {
        zoneBouton.removeChild(zoneBouton.lastChild);
      }

      button.classList.add('btn');
      button.classList.add('btn-maincolor');
      button.setAttribute('id', 'validerAboBtn');
      button.innerText = 'Valider';
      zoneBouton.appendChild(document.createElement('br'));
      zoneBouton.appendChild(button);
      var dureeAbonnement;
      var bouton = document.querySelector('#validerAboBtn');
      bouton.addEventListener('click', function () {
        if (!mois) {
          dureeAbonnement = "";
        } else {
          dureeAbonnement = mois.value;
        }

        var corps = JSON.stringify({
          duree: dureeAbonnement,
          abonnement: idAbonnement,
          code: codePromo.value
        });
        fetch('/souscrire', {
          method: 'POST',
          body: corps
        }).then(function (reponse) {
          return reponse.json();
        }).then(function (reponse) {
          console.log(reponse);

          if (reponse['etat'] == null) {
            document.querySelector('.message').innerHTML = "<p class='h3'>" + reponse['message'] + "</p>";
          } else {
            document.location.href = '/conditions générales';
          }
        });
      });
    };

    noBack();
    window.onload = noBack;

    window.onpageshow = function (evt) {
      if (evt.persisted) noBack();
    };

    window.onunload = function () {
      void 0;
    };

    var mois = document.querySelector('.form-control-range');
    var a = document.createElement('a');
    var input = document.createElement('input');
    var abonnement = document.querySelectorAll('.form-check-input');
    var zoneBouton = document.querySelector('.CGU');
    var idAbonnement;
    var codePromo = document.querySelector('#codePromo');
    var verfiier = document.querySelector('.btn-sm');
    var btnModal = document.querySelector('.btnAbo');
    var btnAmbassadeur = document.querySelector('#btnAmbassadeur');
    var reponseAbo = document.querySelector('.reponseAbo');
    var selectAboBtns = document.querySelectorAll('.selectAbo');

    var _loop = function _loop(i) {
      selectAboBtns[i].addEventListener('click', function (event) {
        abonnement[i].checked = true;
        abonne(abonnement[i].value);
      });
    };

    for (var i = 0; i < selectAboBtns.length; i++) {
      _loop(i);
    }

    verfiier.addEventListener('click', function () {
      if (codePromo !== "") {
        fetch("/verfication/promoOtd", {
          method: 'POST',
          body: codePromo.value
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          if (response.existe === 'promo') {
            btnModal.click();
            var p1 = document.createElement('p');
            p1.classList.add('h6');
            p1.innerHTML = "Votre code de réduction vous permet de bénéficier de " + response.remise + "%" + "sur l'abonement suivant : " + response.nom;
            reponseAbo.appendChild(p1);
            document.querySelector('.validerAboCodePromo').addEventListener('click', function () {
              document.querySelector('#prixAbo' + response.id).innerText = response.prix;
              document.querySelector('#htABo' + response.id).innerHTML = "(" + response.ht + " € TTC / mois";
              document.querySelector('#inlineRadio' + response.id).checked = true;
              abonne(response.id);
            });
            document.querySelector('.refuserAboCodePromo').addEventListener('click', function () {
              codePromo.value = "";
            });
          } else if (response.existe === "ambassadeur") {
            btnAmbassadeur.click();

            if (response.possible) {
              console.log(response);
              document.querySelector('.zoneReponse').innerHTML = "<p class='h5'>Votre code vous permet d'accéder au statut d'ambassadeur de DIAG-DRONE</p>" + "<p class='h5'>Avec l'abonnement : " + response.abonnement + " vous pouvez accéder aux fonctionnalités de l'application pour une durée de " + response.duree + " mois pour un prix de " + response.prix + " € HT par mois</p>";
              document.querySelector(".validerAmbassadeur").style.display = 'block';
              document.querySelector('.validerAmbassadeur').addEventListener('click', function () {
                fetch("/valider/amabassadeur", {
                  method: 'POST',
                  body: response.code
                }).then(function (response) {
                  return response.json();
                }).then(function (response) {
                  if (response['reponse'] === 'ok') {
                    document.location.href = "/conditions générales";
                  } else {
                    alert("Un problème est survenu lors de la validation de votre abonnement");
                  }
                });
              });
            } else {
              document.querySelector('.zoneReponse').innerHTML = "<p class='h5'>Malheureusement ce code ne vous permet pas d'acceder au statut d'ambassadeur</p>";
              document.querySelector(".validerAmbassadeur").style.display = 'none';
              document.querySelector('.refusAmbassadeur').addEventListener('click', function () {
                codePromo.value = "";
              });
            }
          } else {
            var _p = document.createElement('p');

            _p.classList.add('h6');

            btnModal.click();
            _p.innerHTML = "Votre code de réduction  n'existe pas.";
            reponseAbo.appendChild(_p);
            document.querySelector('.refuserAboCodePromo').addEventListener('click', function () {
              codePromo.value = "";
            });
          }
        });
      }
    });

    var _loop2 = function _loop2(_i) {
      abonnement[_i].addEventListener('change', function () {
        abonne(abonnement[_i].value);
      });
    };

    for (var _i = 0; _i < abonnement.length; _i++) {
      _loop2(_i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/abonnementGc.js":
/*!***********************************!*\
  !*** ./assets/js/abonnementGc.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Abonnements grand compte") {
  var changeInfoAbonnement = function changeInfoAbonnement(nomChange) {
    var _loop = function _loop(i) {
      nomChange[i].addEventListener('keyup', function () {
        switch (nomChange) {
          case nomAbonnement:
            {
              type = 'nom';
              break;
            }

          case prixAbonnement:
            {
              type = 'prixAbo';
              break;
            }
        }

        var content = JSON.stringify({
          typeChange: type,
          id: idAbo[i].dataset.id,
          valeur: nomChange[i].value
        });
        fetch("/administrateur/modifAbonneGc", {
          method: 'POST',
          body: content
        });
      });
    };

    for (var i = 0; i < nomChange.length; i++) {
      _loop(i);
    }
  };

  var nomAbonnement = document.querySelectorAll('.nomAbo');
  var prixAbonnement = document.querySelectorAll('.prixAbo');
  var idAbo = document.querySelectorAll('.aboGc');
  var type;
  changeInfoAbonnement(nomAbonnement);
  changeInfoAbonnement(prixAbonnement); //Création nouvel abonnement Grand compte

  var prix = document.querySelector('.newPrix');
  var nom = document.querySelector('.newAbo');
  var utilisateur = document.querySelector('#utilisateur');
  var profil = document.querySelector('.newProfil');
  var valider = document.querySelector('.btn-success');
  valider.addEventListener('click', function () {
    var contenu = JSON.stringify({
      prixAbo: prix.value,
      nom: nom.value,
      user: utilisateur.value,
      profil: profil.value
    });
    fetch("/administrateur/creerNouvelAbonnement", {
      method: "POST",
      body: contenu
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      if (response === 'ok') {
        alert("Nouvel abonnement grand compte crée. Previens un dévellopeur pour la création du profil");
        document.location.reload();
      } else {
        alert(response);
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/abonnementInsti.js":
/*!**************************************!*\
  !*** ./assets/js/abonnementInsti.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Administrateur abonnement institution") {
  var changeInfoAbonnement = function changeInfoAbonnement(nomChange) {
    var _loop = function _loop(i) {
      nomChange[i].addEventListener('keyup', function () {
        switch (nomChange) {
          case nomAbo:
            {
              type = 'nom';
              break;
            }

          case prixAbo:
            {
              type = 'prixAbo';
              break;
            }

          case profilAbo:
            {
              type = 'profilAbo';
              break;
            }

          case limiteB:
            {
              type = 'limiteB';
              break;
            }

          case limiteH:
            {
              type = 'limiteH';
              break;
            }

          case userAbo:
            {
              type = 'userAbo';
              break;
            }

          case dureeAbo:
            {
              type = 'dureeAbo';
              break;
            }
        }

        var content = JSON.stringify({
          typeChange: type,
          id: idAbo[i].dataset.id,
          valeur: nomChange[i].value
        });
        fetch("/administrateur/modifAbonneGc", {
          method: 'POST',
          body: content
        });
      });
    };

    for (var i = 0; i < nomChange.length; i++) {
      _loop(i);
    }
  };

  var nomAbo = document.querySelectorAll('.nomAbo');
  var prixAbo = document.querySelectorAll('.prixAbo');
  var profilAbo = document.querySelectorAll('.profilAbo');
  var limiteB = document.querySelectorAll('.limiteB');
  var limiteH = document.querySelectorAll('.limiteH');
  var userAbo = document.querySelectorAll('.userAbo');
  var idAbo = document.querySelectorAll('.idAbo');
  var dureeAbo = document.querySelectorAll(".dureeAbo");
  var type;
  changeInfoAbonnement(nomAbo);
  changeInfoAbonnement(prixAbo);
  changeInfoAbonnement(profilAbo);
  changeInfoAbonnement(limiteB);
  changeInfoAbonnement(limiteH);
  changeInfoAbonnement(userAbo);
  changeInfoAbonnement(dureeAbo); //Nouvel abonnement institutionnel

  var valider = document.querySelector('.btn-success');
  var newPrix = document.querySelector('.newPrice');
  var newProfil = document.querySelector('.newProfil');
  var newlimiteH = document.querySelector('.newLimiteH');
  var newLimiteB = document.querySelector('.newLimiteB');
  var newUser = document.querySelector('.newUser');
  valider.addEventListener('click', function () {
    var alarm = confirm("Avez vous verifié tout les éléments du nouvel abonnement ?");

    if (alarm) {
      var contenu = JSON.stringify({
        prix: newPrix.value,
        profil: newProfil.value,
        limiteHaute: newlimiteH.value,
        limiteBasse: newLimiteB.value,
        user: newUser.value,
        nom: document.querySelector('.newNom').value
      });
      fetch("/administrateur/newAbonnementInsti", {
        method: 'POST',
        body: contenu
      }).then(function () {
        alert("Le nouvel abonnement est enregistré . Si un nouveau profil est crée , il faut prévenir un développeur pour créer ce profil lors de l'inscription");
        document.location.reload();
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/abonnementOtdAdmin.js":
/*!*****************************************!*\
  !*** ./assets/js/abonnementOtdAdmin.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Abonnement admin OTD") {
  var changeInfoAbonnement = function changeInfoAbonnement(nomChange) {
    var _loop = function _loop(i) {
      nomChange[i].addEventListener('keyup', function () {
        switch (nomChange) {
          case nom:
            {
              type = 'nom';
              break;
            }

          case prixAbo:
            {
              type = 'prixAbo';
              break;
            }

          case prixOtdSup:
            {
              type = 'prixOtdSup';
              break;
            }

          case otdMax:
            {
              type = 'otdMax';
              break;
            }
        }

        var content = JSON.stringify({
          typeChange: type,
          id: idAbo[i].dataset.id,
          valeur: nomChange[i].value
        });
        fetch("/administrateur/changeElementAbonnement", {
          method: 'POST',
          body: content
        });
      });
    };

    for (var i = 0; i < nomChange.length; i++) {
      _loop(i);
    }
  };

  var nom = document.querySelectorAll('.nomAboOtd');
  var prixAbo = document.querySelectorAll('.prixAboOtd');
  var prixOtdSup = document.querySelectorAll('.prixOtdSup');
  var otdMax = document.querySelectorAll('.otdMax');
  var idAbo = document.querySelectorAll('.idAbo');
  var type = null;
  changeInfoAbonnement(nom);
  changeInfoAbonnement(prixAbo);
  changeInfoAbonnement(prixOtdSup);
  changeInfoAbonnement(otdMax);
}

/***/ }),

/***/ "./assets/js/accordTarif.js":
/*!**********************************!*\
  !*** ./assets/js/accordTarif.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Tarifs disponibles' || document.title === 'Phase 4 choix des tarifs') {
  document.addEventListener('DOMContentLoaded', function () {
    var tarifs = document.querySelectorAll('.tauxHoraire');
    var indemnite = document.querySelector('.indemnite');
    var prixMin = document.querySelectorAll('.prixMinimum');
    var zoneBouton = document.querySelector('.button');
    var a = document.createElement('a');
    a.classList.add('btn');
    a.classList.add('btn-maincolor2');
    a.setAttribute('href', '/banqueAssurance');
    indemnite.addEventListener('keyup', function () {
      fetch('/indemnite', {
        method: 'POST',
        body: indemnite.value
      });
    });

    var _loop = function _loop(i) {
      tarifs[i].addEventListener('keyup', function () {
        var corps = JSON.stringify({
          id: tarifs[i].dataset.id,
          tarif: tarifs[i].value
        });
        fetch('/envoieTarif', {
          method: 'POST',
          body: corps
        });

        for (var j = 0; j < tarifs.length; j++) {
          if (tarifs[j].value != 0 && document.title == 'Phase 4 choix des tarifs') {
            zoneBouton.appendChild(a);
            a.innerHTML = 'Valider';
          }
        }
      });
      prixMin[i].addEventListener('keyup', function () {
        var corps = JSON.stringify({
          id: tarifs[i].dataset.id,
          prixMinimum: prixMin[i].value
        });
        fetch('/envoiePrixMin', {
          method: 'POST',
          body: corps
        });

        for (var j = 0; j < prixMin.length; j++) {
          if (prixMin[j].value != 0 && document.title == 'Phase 4 choix des tarifs') {
            zoneBouton.appendChild(a);
            a.innerHTML = 'Valider';
          }
        }
      });
    };

    for (var i = 0; i < tarifs.length; i++) {
      _loop(i);
    }
  });
}

/***/ }),

/***/ "./assets/js/adminAmbassadeur.js":
/*!***************************************!*\
  !*** ./assets/js/adminAmbassadeur.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Liste ambassadeur") {
  (function () {
    var profil = document.getElementsByName('type');
    var zoneOtd = document.querySelector('.abonnementOtd');
    var zoneInsti = document.querySelector('.profilInsti');
    var zoneGc = document.querySelector('.profilGc');
    var valider = document.querySelector('.btn-primary');
    var type;
    var profilBdd;
    var debut = document.querySelector('#debut');
    var fin = document.querySelector('#fin');
    var codePromo = document.querySelector('#codePromo');
    var departement = document.querySelector('#departement');
    var prix = document.querySelector('#prix');
    var duree = document.querySelector('#duree');
    var commentaire = document.querySelector('textarea');
    var route;

    var _loop = function _loop(i) {
      profil[i].addEventListener('change', function () {
        if (profil[i].value === 'otd') {
          zoneOtd.style.display = 'block';
          zoneInsti.style.display = 'none';
          zoneGc.style.display = 'none';
          type = document.querySelector('#abpoOtd');
        } else if (profil[i].value === 'gc') {
          zoneOtd.style.display = 'none';
          zoneInsti.style.display = 'none';
          zoneGc.style.display = 'block';
          type = document.querySelector('#profilGc');
        } else {
          zoneOtd.style.display = 'none';
          zoneInsti.style.display = 'block';
          zoneGc.style.display = 'none';
          type = document.querySelector('#profilInsti');
        }
      });
      profilBdd = profil[i].value;
    };

    for (var i = 0; i < profil.length; i++) {
      _loop(i);
    }

    valider.addEventListener('click', function () {
      var alert = confirm("Tout les champs sont-ils correctement remplis ?");

      if (alert) {
        if (debut.value != "" && fin.value != "" && prix.value != "" && type.value != "" && codePromo.value != "" && duree.value != "") {
          if (type.classList.contains('abonnement')) {
            route = "/administrateur/ambassadeurOtd";
          } else if (type.classList.contains('institution')) {
            route = "/administrateur/ambassadeurInsti";
          } else {
            route = "/administrateur/ambassadeurGc";
          }
        } else {
          alert('Il manque des informations pour créer le code promotionnel');
        }

        var content = JSON.stringify({
          dateDebut: debut.value,
          dateFin: fin.value,
          code: codePromo.value,
          nbreMax: departement.value,
          prix: prix.value,
          com: commentaire.value,
          profil: type.value,
          duree: duree.value
        });
        fetch(route, {
          method: 'POST',
          body: content
        });
      }
    });
  })();
}

/***/ }),

/***/ "./assets/js/adminCommision.js":
/*!*************************************!*\
  !*** ./assets/js/adminCommision.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Espace entreprise Admin") {
  var commision = document.querySelectorAll('.commission');

  var _loop = function _loop(i) {
    var com = commision[i];
    com.addEventListener('keyup', function () {
      fetch("/administrateur/modiferCom/" + com.dataset.id, {
        method: 'POST',
        body: com.value
      });
    });
  };

  for (var i = 0; i < commision.length; i++) {
    _loop(i);
  }
}

/***/ }),

/***/ "./assets/js/adminCompta.js":
/*!**********************************!*\
  !*** ./assets/js/adminCompta.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Liste Mandat de prélèvement") {
  var litseMandat = function litseMandat(input, typeUser) {
    input.addEventListener('keyup', function () {
      if (input.value.length >= 5) {
        var contenu = JSON.stringify({
          email: input.value,
          type: typeUser
        });
        fetch("/administrateur/rechercheMandat", {
          method: 'POST',
          body: contenu
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          var tbody = document.querySelector('.' + typeUser);

          while (tbody.lastChild) {
            tbody.removeChild(tbody.firstChild);
          }

          for (var i = 0; i < response.length; i++) {
            var tr = document.createElement('tr');
            var tdNom = document.createElement('td');
            tdNom.innerHTML = response[i].preleve;
            tr.appendChild(tdNom);
            var tdBanque = document.createElement("td");

            for (var j = 0; j < response[i].banque.length; j++) {
              tdBanque.innerHTML += "<div class='col-12'>" + response[i].banque[j].nom + "</div><hr class='banqueAdmin'>";
            }

            tr.appendChild(tdBanque);
            var tdMandat = document.createElement('td');

            for (var _j = 0; _j < response[i].mandat.length; _j++) {
              if (response[i].mandat[_j].mandat) {
                tdMandat.innerHTML += "<div class='col-12'><a target='_blank' href='/uploads/sepa/" + response[i].mandat[_j].mandat + "'><figure><img src='/css/css_site/images/pdfPetit.png'><figcaption>" + response[i].mandat[_j].mandat + "</figcaption></figure></a></div>";
              }
            }

            tr.appendChild(tdMandat);
            tbody.appendChild(tr);
          }
        });
      }
    });
  };

  var emailGc = document.querySelector('#emailAdminGc');
  var emailOtd = document.querySelector('#emailAdminOtd');
  litseMandat(emailOtd, 'otd');
  litseMandat(emailGc, 'gc');
}

if (document.title === "Facture prestation DD") {
  (function () {
    var searchFact = function searchFact(mois, type, indice) {
      var premier = new Date(mois.getFullYear(), mois.getMonth(), 1);
      var lastDay = new Date(mois.getFullYear(), mois.getMonth() + 1, 0);
      var contenu = JSON.stringify({
        type: type,
        premier: premier.toLocaleString('fr-Fr', {
          day: "numeric",
          month: 'numeric',
          year: 'numeric'
        }),
        dernier: lastDay.toLocaleString('fr-Fr', {
          day: "numeric",
          month: 'numeric',
          year: 'numeric'
        })
      });
      fetch("/administrateur/retrouverFacturePresta", {
        method: 'POST',
        body: contenu,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        while (zoneFacture[indice].lastChild) {
          zoneFacture[indice].removeChild(zoneFacture[indice].firstChild);
        }

        for (var _i = 0; _i < response.length; _i++) {
          var div = document.createElement('div');
          div.classList.add('col-3');
          div.classList.add('text-center');
          var a = document.createElement('a');
          a.target = "_blank";
          a.href = response[_i].lien + response[_i].nom;
          var figure = document.createElement('figure');
          var img = document.createElement('img');
          img.src = "/css/css_site/images/pdfmoyen.png";
          var figcaption = document.createElement('figcaption');
          figcaption.innerText = response[_i].nom;
          figure.appendChild(img);
          figure.appendChild(figcaption);
          a.appendChild(figure);
          div.appendChild(a);
          zoneFacture[indice].appendChild(div);
        }
      });
    };

    var date = new Date();
    var zoneFacture = document.querySelectorAll('.zoneFactureAdminPresta');
    var suivant = document.querySelectorAll('.suivantAdmin');
    var precedent = document.querySelectorAll('.precedentAdmin');
    var mois = document.querySelectorAll('.mois');

    var _loop = function _loop(i) {
      var moisActuel = date.toLocaleString('fr-Fr', {
        month: 'long',
        year: 'numeric'
      });
      mois[i].innerHTML = moisActuel;
      suivant[i].addEventListener('click', function () {
        var nextMonth = new Date(date.setMonth(date.getMonth() + 1));
        var moisSuivant = nextMonth.toLocaleString('fr-Fr', {
          month: 'long',
          year: 'numeric'
        });
        mois[i].innerHTML = moisSuivant;
        searchFact(nextMonth, suivant[i].dataset.type, i);
      });
      precedent[i].addEventListener('click', function () {
        var previousMonth = new Date(date.setMonth(date.getMonth() - 1));
        var moisPrcedent = previousMonth.toLocaleString('fr-Fr', {
          month: 'long',
          year: 'numeric'
        });
        mois[i].innerHTML = moisPrcedent;
        searchFact(previousMonth, precedent[i].dataset.type, i);
      });
    };

    for (var i = 0; i < suivant.length; i++) {
      _loop(i);
    }
  })();
}

if (document.title === "Retrouver doc") {
  var numero = document.querySelector('#kyc');
  var identifiant = document.querySelector('#identifiant');
  var valider = document.querySelector('.btn-primary');
  valider.addEventListener('click', function () {
    fetch("/administrateur/findKyc", {
      method: 'post',
      body: JSON.stringify({
        idKyc: numero.value,
        idUser: identifiant.value
      })
    });
  });
}

/***/ }),

/***/ "./assets/js/adminInter.js":
/*!*********************************!*\
  !*** ./assets/js/adminInter.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Admin intervention") {
  (function () {
    var valider = document.querySelector('.btn-lg');
    var type = document.querySelector('#type');
    var mission = document.querySelector("#mission");
    var description = document.querySelector("#description");
    valider.addEventListener('click', function () {
      if (type.value != "" && mission.value != "" && description.value != "") {
        var contenu = JSON.stringify({
          type: type.value,
          mission: mission.value,
          description: description.value
        });
        fetch("/administrateur/ajoutMission", {
          body: contenu,
          method: "POST"
        }).then(function () {
          alert("La nouvelle mission est bien enregistrée. Avant de la mettre en ligne un developpeur dois intervenir pour la mise en forme. ");
          document.location.reload();
        });
      } else {
        alert("Un champs n'est pas remplis !!");
      }
    });
    var online = 0;
    var oldMission = document.querySelectorAll('.missionActif');
    var avertissement;

    var _loop = function _loop(i) {
      oldMission[i].addEventListener('change', function () {
        if (oldMission[i].checked === false) {
          online = 0;
          avertissement = confirm("La mission ne sera plus disponible auprès des demandeurs ainsi que des OTD.");
        } else {
          online = 1;
          avertissement = confirm("La mission va être disponible auprès des utilisateurs du site");
        }

        if (avertissement) {
          fetch("/administrateur/suspendreMission/" + oldMission[i].value, {
            body: online,
            method: 'POST'
          });
        }
      });
    };

    for (var i = 0; i < oldMission.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/adminRechercheDirigeant.js":
/*!**********************************************!*\
  !*** ./assets/js/adminRechercheDirigeant.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Info MangoPay") {
  var mail = document.querySelector('#mail');
  var tbody = document.querySelector('tbody');
  mail.addEventListener('keydown', function () {
    if (mail.value.length >= 5) {
      fetch("/administrateur/rechercheDirigeant", {
        method: 'POST',
        body: mail.value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        while (tbody.firstChild) {
          tbody.removeChild(tbody.lastChild);
        }

        for (var i = 0; i < response.length; i++) {
          var tr = document.createElement('tr');
          var tdEntreprise = document.createElement('td');
          tdEntreprise.innerHTML = response[i].nom + ' ' + response[i].prenom + '<br>' + response[i].entreprise + '<br>' + response[i].email;
          tr.appendChild(tdEntreprise);
          var tdMango = document.createElement('td');
          tdMango.innerHTML = response[i].mangoUser;
          tr.appendChild(tdMango);
          var tdWallet = document.createElement('td');
          tdWallet.innerHTML = response[i].wallet;
          tr.appendChild(tdWallet);
          var tdBank = document.createElement('td');
          tdBank.innerHTML = response[i].bank;
          tr.appendChild(tdBank);
          var tdUbo = document.createElement('td');
          tdUbo.innerHTML = response[i].ubo;
          tr.appendChild(tdUbo);
          var tdResultat = document.createElement('td');
          tdResultat.innerHTML = response[i].resultat;
          tr.appendChild(tdResultat);
          tbody.appendChild(tr);
        }
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/adresseInter.js":
/*!***********************************!*\
  !*** ./assets/js/adresseInter.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Demande d'intervention (phase 2)" || "Etape 2 du diagnostic") {
  (function () {
    var radioAdresse = document.getElementsByName('adresse_inter[sameFact]');
    var code = document.querySelector('.codeSyndic');
    var numero = document.querySelector('#adresse_inter_numero');
    var voie = document.querySelector('#adresse_inter_nomVoie');
    var cp = document.querySelector('#adresse_inter_codePostal');
    var ville = document.querySelector('#adresse_inter_ville');
    var lien = null;

    if (code) {
      lien = "/recupereAdresseInter/" + code.value;
    } else {
      lien = "/recupereAdresseInter";
    }

    var _loop = function _loop(i) {
      radioAdresse[i].addEventListener('change', function () {
        if (radioAdresse[i].value === 'Oui') {
          fetch(lien, {
            method: 'GET'
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            numero.value = response.numero;
            voie.value = response.nomVoie;
            cp.value = response.codePostal;
            ville.removeAttribute("readonly");
            ville.value = response.ville;
          });
        } else {
          numero.value = "";
          voie.value = "";
          cp.value = "";
          ville.setAttribute('readonly', 'readonly');
          ville.value = "";
        }
      });
    };

    for (var i = 0; i < radioAdresse.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/agendaInsti.js":
/*!**********************************!*\
  !*** ./assets/js/agendaInsti.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/core/locales/fr */ "./node_modules/@fullcalendar/core/locales/fr.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/daygrid */ "./node_modules/@fullcalendar/daygrid/main.js");
/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/timegrid */ "./node_modules/@fullcalendar/timegrid/main.js");
/* harmony import */ var _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fullcalendar/list */ "./node_modules/@fullcalendar/list/main.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.js");







if (document.title === "Agenda") {
  var calendrier = document.querySelector('.agenda');
  var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"](calendrier, {
    plugins: [_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__["default"], _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_3__["default"], _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__["default"], _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_5__["default"]],
    initialView: 'listWeek',
    locale: _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1___default.a,
    height: 600,
    aspectRatio: 3.5,
    events: '/recuperePlanningAllAgent',
    views: {
      listDay: {
        buttonText: "Aujourd'hui"
      },
      listWeek: {
        buttonText: 'Semaine'
      },
      listMonth: {
        buttonText: 'Mois'
      }
    },
    headerToolbar: {
      start: 'prev,next',
      center: 'title',
      right: 'listDay,listWeek,listMonth'
    },
    timeZone: 'locale'
  });
  calendar.render();
}

/***/ }),

/***/ "./assets/js/agentPlanning.js":
/*!************************************!*\
  !*** ./assets/js/agentPlanning.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/core/locales/fr */ "./node_modules/@fullcalendar/core/locales/fr.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/daygrid */ "./node_modules/@fullcalendar/daygrid/main.js");
/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/timegrid */ "./node_modules/@fullcalendar/timegrid/main.js");
/* harmony import */ var _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fullcalendar/list */ "./node_modules/@fullcalendar/list/main.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.js");







if (document.title === 'Votre planning') {
  var calendrier = document.querySelector('#calendrier');
  var idAgent = document.querySelector("#idAgent");
  var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"](calendrier, {
    plugins: [_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__["default"], _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_3__["default"], _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__["default"], _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_5__["default"]],
    initialView: 'listWeek',
    locale: _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1___default.a,
    height: 600,
    aspectRatio: 3.5,
    events: '/recupererPlanning/' + idAgent.value,
    views: {
      listDay: {
        buttonText: "Aujourd'hui"
      },
      listWeek: {
        buttonText: 'Semaine'
      },
      listMonth: {
        buttonText: 'Mois'
      }
    },
    headerToolbar: {
      start: 'prev,next',
      center: 'title',
      right: 'listDay,listWeek,listMonth'
    },
    timeZone: 'locale'
  });
  calendar.render();
}

/***/ }),

/***/ "./assets/js/ajoutAbonnement.js":
/*!**************************************!*\
  !*** ./assets/js/ajoutAbonnement.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Ajouter un abonnement Entreprise BTP et autres") {
  var valider = document.querySelector('.btn-maincolor');
  var abonnements = document.getElementsByName('abonnement');
  var abo;
  valider.addEventListener('click', function () {
    for (var i = 0; i < abonnements.length; i++) {
      if (abonnements[i].checked) {
        abo = abonnements[i].value;
      }
    }

    document.location.href = "/alerteAjoutAbonnement/" + abo;
  });
}

if (document.title === "Ajouter un abonnement Pro-Btp") {
  (function () {
    var localise = function localise(lieu, listeTravaux) {
      var carte;
      var distanceInterPremium = document.querySelector('#formControlRange');
      var distance = document.querySelectorAll('.distance');
      var cercle;
      fetch("/localisationInscriptionProBtp", {
        method: 'POST',
        body: lieu
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        fetch('/localisationPremiumProBtp', {
          method: 'POST',
          body: JSON.stringify(listeTravaux)
        }).then(function (reponse) {
          return reponse.json();
        }).then(function (reponse) {
          if (carte !== undefined) {
            carte.remove();
          }

          var myIcon = L.icon({
            iconUrl: "\\css\\css_site\\img\\iconePerso.png",
            iconSize: [45, 45],
            popupAnchor: [-3, -76],
            shadowSize: [68, 95],
            shadowAnchor: [22, 94]
          });
          carte = L.map(cartePremium, {
            center: response,
            zoom: 8,
            attributionControl: false,
            zoomControl: false,
            scrollWheelZoom: false,
            keyboard: false,
            doubleClickZoom: false,
            dragging: true
          });
          L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
            maxZoom: 20,
            id: 'mapbox/streets-v11',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: 'pk.eyJ1IjoieG1hdGhpZXUxMyIsImEiOiJja2N1aHU2eTAyOGZ2MnJsZjk1bjR0ZHE0In0.-N1CSInz77-O6xViA43KQw'
          }).addTo(carte);

          for (var i = 0; i < reponse.length; i++) {
            L.circle([reponse[i].coordonee[0], reponse[i].coordonee[1]], reponse[i].rayon * 1000, {
              color: "#FF4200",
              opacity: 0.5
            }).addTo(carte);
            L.marker([reponse[i].coordonee[0], reponse[i].coordonee[1]]).addTo(carte);
          }

          L.marker(response, {
            icon: myIcon,
            title: "Votre position"
          }).addTo(carte);
          distanceInterPremium.addEventListener('change', function () {
            distance[0].innerText = distanceInterPremium.value;
            distance[1].innerText = distanceInterPremium.value;

            if (cercle !== undefined) {
              carte.removeLayer(cercle);
            }

            cercle = L.circle(response, distanceInterPremium.value * 1000, {
              color: "#0067FF",
              opacity: 0.5
            });
            cercle.removeFrom(carte);

            if (distanceInterPremium.value !== "") {
              cercle.addTo(carte);
            }
          });
        });
      });
    };

    var distanceInterPremium = document.querySelector('#formControlRange');
    var ville = document.getElementsByName("pro_btp[departZoneInter]");
    var abonnementProBtp = document.querySelector('#pro_btp_abonnement');
    var btnCarte = document.querySelector('.btnCarte');

    var _loop = function _loop(i) {
      ville[i].addEventListener('change', function () {
        if (ville[i].value === "non") {
          document.querySelector('.villeDepart').style.display = 'block';
          document.querySelector('#pro_btp_villeDepart').setAttribute('required', 'required');
        } else {
          document.querySelector('.villeDepart').style.display = 'none';
          document.querySelector('#pro_btp_villeDepart').value = "";
          document.querySelector('#pro_btp_villeDepart').removeAttribute('required');
        }
      });
    };

    for (var i = 0; i < ville.length; i++) {
      _loop(i);
    }

    abonnementProBtp.addEventListener('change', function () {
      var liste = [];

      if (document.querySelector('#pro_btp_departZoneInter_1').checked === true && document.querySelector('#proBtp_villeDepart').value === "") {
        alert('Veuillez choisir une ville de départ');
        abonnementProBtp.options.selectedIndex = 0;
      } else {
        var travaux = document.getElementsByName("pro_btp[travaux][]");

        for (var _i = 0; _i < travaux.length; _i++) {
          if (travaux[_i].checked === true) {
            liste.push(travaux[_i].value);
          }
        }

        var possible = abonnementProBtp.options[abonnementProBtp.selectedIndex].dataset.possible;
        var adresse;
        var cercle;
        var distance = document.querySelectorAll('.distance');

        if (possible === "premium") {
          (function () {
            btnCarte.click();
            var newVille = document.querySelector('#pro_btp_villeDepart').value;

            if (newVille !== "") {
              localise(newVille, liste);
            } else {
              fetch("/recupereAdresse", {
                method: 'GET'
              }).then(function (response) {
                return response.json();
              }).then(function (response) {
                localise(response, liste);
              });
            }

            var demandeAbo = document.getElementsByName('demandeAbo');

            var _loop2 = function _loop2(_i2) {
              demandeAbo[_i2].addEventListener('change', function () {
                if (demandeAbo[_i2].value === 'non') {
                  document.querySelector('.basculerAbo').style.display = 'block';
                  document.querySelector('.distanceSouscrit').innerText = 0;
                } else {
                  document.querySelector('.basculerAbo').style.display = 'none';
                  document.querySelector('#pro_btp_distanceInter').value = distanceInterPremium.value;
                  document.querySelector('.distanceSouscrit').innerText = distanceInterPremium.value;
                  document.querySelector('#distanceFinaleInter').innerText = 30;
                  document.querySelector('#pro_btp_distanceInter').max = 30;
                }
              });
            };

            for (var _i2 = 0; _i2 < demandeAbo.length; _i2++) {
              _loop2(_i2);
            }

            var basculer = document.getElementsByName('basculer');

            var _loop3 = function _loop3(_i3) {
              basculer[_i3].addEventListener('change', function () {
                if (basculer[_i3].value === 'non') {
                  document.querySelector('.refus').style.display = 'block';
                  abonnementProBtp.options.selectedIndex = 0;
                } else {
                  document.querySelector('.refus').style.display = 'none';
                  document.querySelector('#pro_btp_distanceInter').value = distanceInterPremium.value;
                  document.querySelector('.distanceSouscrit').innerText = distanceInterPremium.value;
                  document.querySelector('#distanceFinaleInter').innerText = 100;
                  document.querySelector('#pro_btp_distanceInter').max = 100;
                  abonnementProBtp.options.selectedIndex = 1;
                }
              });
            };

            for (var _i3 = 0; _i3 < basculer.length; _i3++) {
              _loop3(_i3);
            }
          })();
        }

        if (possible === "classique") {
          document.querySelector('#pro_btp_distanceInter').max = 100;
          document.querySelector('#distanceFinaleInter').innerText = 100;
        }
      }
    });
    document.querySelector("#pro_btp_distanceInter").addEventListener('change', function () {
      document.querySelector('.distanceSouscrit').innerText = document.querySelector("#pro_btp_distanceInter").value;
    });
    document.querySelector('.btnAlerte').addEventListener('click', function () {
      document.querySelector('.abonnement').innerText = abonnementProBtp.options[abonnementProBtp.selectedIndex].innerText;
    });
  })();
}

/***/ }),

/***/ "./assets/js/ajoutAgent.js":
/*!*********************************!*\
  !*** ./assets/js/ajoutAgent.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Ajouter un agent' || document.title == 'Ajouter un collaborateur') {
  var save = document.querySelector('.btn-primary');
  var fonctionnalite = document.querySelector('#role');
  var prenom = document.querySelector('.prenom');
  var nom = document.querySelector('.nom');
  var pass = document.querySelector('.passe');
  var civ = document.querySelector('#civilite');
  var mail = document.querySelector('.mailAgent');
  var superieur = document.querySelector('.superieur');
  fonctionnalite.addEventListener('change', function () {
    if (fonctionnalite.value !== 'RESPONSABLE') {
      fetch("/listSuperieur", {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        while (superieur.firstChild) {
          superieur.removeChild(superieur.lastChild);
        }

        var label = document.createElement('label');
        label.innerHTML = 'Choisissez le superieur hiérachique';
        label.setAttribute('for', 'sup');
        superieur.appendChild(label);
        var select = document.createElement('select');
        select.setAttribute('id', 'sup');

        for (var i = 0; i < response.length; i++) {
          var option = document.createElement('option');
          option.value = response[i].id;
          option.innerText = response[i].nom;
          select.appendChild(option);
        }

        superieur.appendChild(select);
      });
    } else {
      while (superieur.firstChild) {
        superieur.removeChild(superieur.lastChild);
      }
    }
  });
  save.addEventListener('click', function () {
    var sup;

    if (superieur.firstChild) {
      sup = document.querySelector('#sup').value;
    } else {
      sup = null;
    }

    var contenu = JSON.stringify({
      roleG: save.dataset.role,
      role: fonctionnalite.value,
      agentPrenom: prenom.value,
      agentNom: nom.value,
      password: pass.value,
      email: mail.value,
      civilite: civ.value,
      supHiera: sup
    });

    if (prenom.value && nom.value && pass.value && mail.value) {
      fetch('ajout personnel', {
        method: 'POST',
        body: contenu
      }).then(function () {
        document.location.reload();
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/ajoutNote.js":
/*!********************************!*\
  !*** ./assets/js/ajoutNote.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);





if (document.title == 'Dossier Général') {
  (function () {
    var valider = document.querySelector('.valider');
    var fakeFile = document.querySelector('.btn-fichier');
    var realFile = document.querySelector('#fichier');
    var envoyer = document.querySelector('.envoyer');
    var validerDonnee = document.querySelector('.validerDonnee');

    if (valider) {
      valider.addEventListener('click', function () {
        var texteNote = document.querySelector('#texte').value;
        var titreNote = document.querySelector('#titre').value;
        fetch("/ajoutNoteGenerale/" + valider.dataset.id, {
          method: 'POST',
          body: JSON.stringify({
            texte: texteNote,
            titre: titreNote
          })
        }).then(function () {
          document.location.reload();
        });
      });
    }

    fakeFile.addEventListener('click', function () {
      realFile.click();
      realFile.addEventListener('change', function () {
        fakeFile.innerHTML = realFile.files[0]['name'];
      });
    });
    envoyer.addEventListener('click', function () {
      var form = new FormData();
      form.append('docGeneral', realFile.files[0]);
      form.append('nomFichier', document.querySelector('#nom').value);
      axios__WEBPACK_IMPORTED_MODULE_3___default.a.post("/ajoutDocGeneral/" + valider.dataset.id, form, {
        onUploadProgress: function onUploadProgress(progressEvent) {
          document.querySelector('#modalUpload').style.display = 'block';
          document.querySelector('.upload').style.width = Math.round(progressEvent.loaded / progressEvent.total) * 100 + '%';

          if (progressEvent.loaded === progressEvent.total) {
            document.querySelector('#modalUpload').style.display = 'none';
          }
        }
      }).then(function () {
        document.location.reload();
      });
    });

    if (validerDonnee) {
      validerDonnee.addEventListener('click', function () {
        var content = JSON.stringify({
          information: document.querySelector('#information').value,
          presentation: document.querySelector('#presentation').value,
          intervenant: document.querySelector("#intervenant").value,
          finance: document.querySelector('#finance').value,
          juridique: document.querySelector('#juridique').value,
          complement: document.querySelector('#complement').value
        });
        fetch("/ajoutDonneeGenerale/" + validerDonnee.dataset.id, {
          method: 'POST',
          body: content
        }).then(function () {
          document.location.reload();
        });
      });
    }

    var modifier = document.querySelectorAll('.btn-primary');
    var contentDonneGen = document.querySelectorAll('.contentDonneeGen');
    var zoneValider = document.querySelectorAll('.zoneValider');
    var zoneAnnuler = document.querySelectorAll('.annuler');

    var _loop = function _loop(i) {
      modifier[i].addEventListener('click', function () {
        var button = document.createElement('button');
        var oldText = document.querySelectorAll('.donneeGen');
        button.classList.add('btn');
        button.classList.add('btn-danger');
        button.innerText = 'Annuler';
        button.dataset.number = i;
        zoneAnnuler[i].appendChild(button);
        var buttonValider = document.createElement('button');
        buttonValider.classList.add('btn');
        buttonValider.classList.add('btn-success');
        buttonValider.innerText = 'Valider les modifications';
        buttonValider.dataset.type = modifier[i].dataset.type;
        buttonValider.dataset.number = i;
        zoneValider[i].removeChild(modifier[i]);
        zoneValider[i].appendChild(buttonValider);
        var textArea = document.createElement('textarea');
        textArea.value = oldText[i].innerText;
        textArea.dataset.type = modifier[i].dataset.type;
        textArea.classList.add('texteChange');
        textArea.rows = 7;
        textArea.style.resize = 'none';
        contentDonneGen[i].removeChild(oldText[i]);
        contentDonneGen[i].appendChild(textArea);
        var annuler = document.querySelectorAll('.btn-danger');

        var _loop4 = function _loop4(j) {
          annuler[j].addEventListener('click', function () {
            var numero = annuler[j].dataset.number;
            modifier[numero].classList.remove('btn-success');
            modifier[numero].classList.add('btn-primary');
            modifier[numero].innerText = "Modifier";
            var p = document.createElement('p');
            p.classList.add('donneeGen');
            p.innerText = oldText[numero].innerText;
            contentDonneGen[numero].removeChild(textArea);
            contentDonneGen[numero].appendChild(p);
            zoneAnnuler[numero].removeChild(button);
          });
        };

        for (var j = 0; j < annuler.length; j++) {
          _loop4(j);
        }

        var validerChangement = document.querySelectorAll('.btn-success');
        var textModif = document.querySelectorAll('.texteChange');

        var _loop5 = function _loop5(_j) {
          validerChangement[_j].addEventListener('click', function () {
            var number = validerChangement[_j].dataset.number;
            var content = JSON.stringify({
              id: document.querySelector('#tab03_pane').dataset.id,
              texte: textModif[_j].value,
              typeChange: validerChangement[_j].dataset.type
            });
            fetch("/modifDonneeGenerale", {
              method: 'POST',
              body: content
            }).then(function () {
              zoneValider[number].removeChild(validerChangement[_j]);
              var btnModifier = document.createElement('button');
              btnModifier.classList.add('btn');
              btnModifier.classList.add('btn-primary');
              btnModifier.innerText = 'Modifier';
              zoneValider[number].appendChild(btnModifier);
              var p = document.createElement('p');
              p.classList.add('donneeGen');
              p.innerText = document.querySelector('.texteChange').value;
              contentDonneGen[number].removeChild(textModif[_j]);
              contentDonneGen[number].appendChild(p);
              zoneAnnuler[number].removeChild(annuler[_j]);
            });
          });
        };

        for (var _j = 0; _j < validerChangement.length; _j++) {
          _loop5(_j);
        }
      });
    };

    for (var i = 0; i < modifier.length; i++) {
      _loop(i);
    }

    var effacer = document.querySelectorAll('.delete');
    var zoneEffacer = document.querySelector('.zoneDelete');
    var ligneEfface = document.querySelectorAll('.lineDelete');

    var _loop2 = function _loop2(_i) {
      effacer[_i].addEventListener('click', function () {
        var alerte = confirm("Souhaitez vous supprimer cette note définitivement ?");

        if (alerte) {
          fetch("/effacerNote", {
            method: 'POST',
            body: ligneEfface[_i].dataset.id
          }).then(function () {
            zoneEffacer.removeChild(ligneEfface[_i]);
          });

          if (zoneEffacer.childNodes.length <= 3) {
            zoneEffacer.innerHTML = " <div class=\"col-sm-12\">\n" + "                                                    <p class=\"h6\">Vous n'avez pas  de notes</p>\n" + "                                                </div>";
          }
        }
      });
    };

    for (var _i = 0; _i < effacer.length; _i++) {
      _loop2(_i);
    } // Suppression piéces générales


    var supprimer = document.querySelectorAll('.btnSupprimer');
    var zoneSuppression = document.querySelector('.zoneSuppression');
    var element = document.querySelectorAll('.elementDelete');

    var _loop3 = function _loop3(_i2) {
      supprimer[_i2].addEventListener('click', function () {
        var alerte = confirm("Souhaitez vous supprimer cette pièce définitivement ?");

        if (alerte) {
          fetch("/supprimerPieceGen", {
            method: 'POST',
            body: supprimer[_i2].dataset.id
          }).then(function () {
            zoneSuppression.removeChild(element[_i2]);
          });
        }
      });
    };

    for (var _i2 = 0; _i2 < supprimer.length; _i2++) {
      _loop3(_i2);
    }
  })();
}

/***/ }),

/***/ "./assets/js/ajoutPack.js":
/*!********************************!*\
  !*** ./assets/js/ajoutPack.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (document.title === 'Mon abonnement') {
  (function () {
    var ajouter = document.querySelectorAll('.ajoutPack');
    var packEnvoie = [];
    var packCommande = [];
    var nombrePack = document.querySelectorAll('.nbrePack');
    var commander = document.querySelector('.commander');
    var fermer = document.querySelector('.fermer');
    var totalHt = document.querySelector('.ht');
    var totalTtc = document.querySelector('.ttc');

    var Pack = function Pack(id, nombre, nom, prix) {
      "use strict";

      _classCallCheck(this, Pack);

      this.id = id;
      this.nombre = nombre;
      this.nom = nom;
      this.prix = prix;
    };

    var ttc = 0;

    var _loop = function _loop(i) {
      ajouter[i].addEventListener('click', function () {
        if (nombrePack[i].value !== '0' && nombrePack[i].value !== "") {
          var prix = parseInt(nombrePack[i].value) * parseInt(nombrePack[i].dataset.prix);
          var pack = new Pack(nombrePack[i].dataset.id, nombrePack[i].value, nombrePack[i].dataset.nom, prix);
          packEnvoie.push(pack);
          packCommande.push(pack);
        }

        for (var j = 0; j < packEnvoie.length; j++) {
          if (packEnvoie[j].nombre !== "") {
            var tr = document.createElement('tr');
            tr.classList.add('color-dark');
            var tdNom = document.createElement('td');
            tdNom.innerHTML = packEnvoie[j].nom;
            tr.appendChild(tdNom);
            var tdNombre = document.createElement('td');
            tdNombre.innerHTML = packEnvoie[j].nombre;
            tr.appendChild(tdNombre);
            var tdPrixTTC = document.createElement('td');
            tdPrixTTC.innerHTML = parseInt(packEnvoie[j].prix) * 1.2 + ' €';
            tr.appendChild(tdPrixTTC);
            var tdPrixHt = document.createElement('td');
            tdPrixHt.innerHTML = parseInt(packEnvoie[j].prix) + ' €';
            tr.appendChild(tdPrixHt);
            document.querySelector("tbody").appendChild(tr);
            ttc += parseInt(packEnvoie[j].prix) * 1.2;
          }
        }

        totalTtc.innerHTML = 'Total TTC : ' + ttc + ' € TTC';
        totalHt.innerHTML = 'Total HT : ' + Math.round(ttc / 1.2 * 100) / 100 + ' € HT';
      });
    };

    for (var i = 0; i < ajouter.length; i++) {
      _loop(i);
    }

    commander.addEventListener('click', function () {
      console.log(packCommande);
      fetch('/institution/ajoutPack', {
        method: 'POST',
        body: JSON.stringify({
          packCommande: packCommande
        })
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response.fact === true) {
          fermer.click();
          document.querySelector('.btnreponse').click();
        } else {
          fermer.click();
          document.querySelector('.btnreponse2').click();
        }
      });
    });
    fermer.addEventListener('click', function () {
      packEnvoie = [];

      for (var _i = 0; _i < nombrePack.length; _i++) {
        nombrePack[_i].value = "";
      }
    });
  })();
}

/***/ }),

/***/ "./assets/js/ajouterDrone.js":
/*!***********************************!*\
  !*** ./assets/js/ajouterDrone.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Liste des drones') {
  (function () {
    var contenu1 = document.querySelectorAll("input[type=text]");
    var contenu2 = document.querySelectorAll("input[type=radio]");
    var contenu3 = document.querySelector('select');
    var contenu4 = document.querySelectorAll("input[type=number]");
    var bouton = document.querySelector('.btn-primary');
    var form = new FormData();
    var captif = undefined;
    var deleteDrone = document.querySelectorAll('.deleteDrone');
    var adresse;
    console.log(contenu1);
    console.log(contenu2);
    console.log(contenu3);
    console.log(contenu4);
    bouton.addEventListener('click', function () {
      if (contenu2[0].checked) {
        captif = contenu2[0].value;
      } else {
        captif = contenu2[1].value;
      }

      console.log(captif);

      if (captif != undefined && contenu1[0].value !== "" && contenu1[1].value !== "" && contenu1[2].value !== "" && contenu1[5].value !== "" && contenu3.value !== "" && contenu4[0].value !== "") {
        form.append('fabriquant', contenu1[0].value);
        form.append('type', contenu1[1].value);
        form.append('numero', contenu1[2].value);
        form.append('poids', contenu4[0].value);
        form.append('trame', contenu1[3].value);
        form.append('serial', contenu1[5].value);
        form.append('marque', contenu1[4].value);
        form.append('vitesse', contenu4[1].value);
        form.append('captif', captif);
        form.append('classe', contenu3.value);
        fetch('/drone/enregistrer', {
          method: 'POST',
          body: form
        }).then(function () {
          alert('Votre appareil est enregistré.');
          document.location.reload();
        });
      } else {
        alert("Veuillez remplir les champs obligatoires");
      }
    });

    var _loop = function _loop(i) {
      deleteDrone[i].addEventListener('click', function (e) {
        e.preventDefault();
        adresse = deleteDrone[i].href;
        var confirmer = confirm("Voulez vous supprimer cet appareil ?");

        if (confirmer) {
          document.location.href = adresse;
        }
      });
    };

    for (var i = 0; i < deleteDrone.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/annotation.js":
/*!*********************************!*\
  !*** ./assets/js/annotation.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var interactjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! interactjs */ "./node_modules/interactjs/dist/interact.min.js");
/* harmony import */ var interactjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(interactjs__WEBPACK_IMPORTED_MODULE_2__);




if (document.title === 'Ajouter des pièces') {
  (function () {
    var choix = document.querySelector('#choixFichier');
    var zoneReponse = document.querySelector('.ancienNote');
    var valider = document.querySelector('.envoyer');
    choix.addEventListener('change', function () {
      fetch('/annotation/' + choix.value, {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        for (var i = 0; i < response.length; i++) {
          var div = document.createElement('div');
          div.classList.add('col-12');
          var pTitre = document.createElement('p');
          pTitre.innerHTML = 'Note créée le ' + response[i].date + ' par <b>' + response[i].auteur + '</b>';
          div.appendChild(pTitre);
          var ptexte = document.createElement('p');
          ptexte.innerText = response[i].texte;
          div.appendChild(ptexte);
          zoneReponse.appendChild(div);
        }
      });
    });
    valider.addEventListener('click', function () {
      var texte = document.querySelector('#newNote').value;
      var titre = document.querySelector('#titre').value;
      var id = document.querySelector('#choixFichier').value;
      fetch('/ajoutNote/' + id, {
        method: 'POST',
        body: JSON.stringify({
          texteNote: texte,
          titreNote: titre
        })
      }).then(function () {
        document.location.reload();
      });
    }); //suppression d'un note d'un dcoument

    var supprimer = document.querySelectorAll('.delete');
    var zone = document.querySelector('.zoneDelete');
    var element = document.querySelectorAll('.elementDelete');

    var _loop = function _loop(i) {
      supprimer[i].addEventListener('click', function () {
        var alerte = confirm("Souhaitez vous supprimer définitivement cette note ?");

        if (alerte) {
          fetch("/supprimerNoteFichier", {
            method: 'POST',
            body: supprimer[i].dataset.id
          }).then(function () {
            zone.removeChild(element[i]);
          });
        }
      });
    };

    for (var i = 0; i < supprimer.length; i++) {
      _loop(i);
    } //Suppression d'un document


    var supprimerDocument = document.querySelectorAll('.btnSupprimer');
    var zoneSupprimer = document.querySelector('.zoneDoc');
    var elementDelete = document.querySelectorAll('.lineSupprimer');
    var test = document.querySelectorAll('.testDrop');
    var poubelle = document.querySelector('.poubelle');

    var _loop2 = function _loop2(_i) {
      supprimerDocument[_i].addEventListener('click', function () {
        var alert = confirm("Voulez vous supprimer définitivement ce document ainsi que toute les notes qui lui sont reliées ?");

        if (alert) {
          fetch("/supprimerFichier", {
            method: 'POST',
            body: supprimerDocument[_i].dataset.id
          }).then(function () {
            zoneSupprimer.removeChild(elementDelete[_i]);
          });
        }
      });
    };

    for (var _i = 0; _i < supprimerDocument.length; _i++) {
      _loop2(_i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Welcome to your app's main JavaScript file!
 *
 * We recommend including the built version of this JavaScript file
 * (and its CSS file) in your base layout (base.html.twig).
 */
// any CSS you require will output into a single css file (app.css in this case)
//const $ = require('jquery')
__webpack_require__(/*! ../css/style.css */ "./assets/css/style.css");

__webpack_require__(/*! ../css/planning.css */ "./assets/css/planning.css");

__webpack_require__(/*! ../css/insti.css */ "./assets/css/insti.css");

__webpack_require__(/*! ../css/chat.css */ "./assets/css/chat.css");

__webpack_require__(/*! ../css/dossier.css */ "./assets/css/dossier.css");

__webpack_require__(/*! ../css/appelOffre.css */ "./assets/css/appelOffre.css");

__webpack_require__(/*! ../js/armee/intervention.js */ "./assets/js/armee/intervention.js");

__webpack_require__(/*! ../js/remplirMap */ "./assets/js/remplirMap.js");

__webpack_require__(/*! ../js/listeMairie */ "./assets/js/listeMairie.js");

__webpack_require__(/*! ../css/paiement.css */ "./assets/css/paiement.css");

__webpack_require__(/*! ../js/paiementInsti.js */ "./assets/js/paiementInsti.js");

__webpack_require__(/*! ../js/interInstitutionnel.js */ "./assets/js/interInstitutionnel.js");

__webpack_require__(/*! ../css/militaire.css */ "./assets/css/militaire.css");

__webpack_require__(/*! ../css/enSavoirPlus.css */ "./assets/css/enSavoirPlus.css");

__webpack_require__(/*! ../js/enSavoirPlus.js */ "./assets/js/enSavoirPlus.js");

__webpack_require__(/*! ../css/forum.css */ "./assets/css/forum.css");

__webpack_require__(/*! ../js/posterSujet.js */ "./assets/js/posterSujet.js");

__webpack_require__(/*! ../js/interventionPerso.js */ "./assets/js/interventionPerso.js");

__webpack_require__(/*! ../js/armee/carteInter */ "./assets/js/armee/carteInter.js");

__webpack_require__(/*! ../js/ajouterDrone.js */ "./assets/js/ajouterDrone.js");

__webpack_require__(/*! ../css/signature.css */ "./assets/css/signature.css");

__webpack_require__(/*! ../js/creerFacture.js */ "./assets/js/creerFacture.js");

__webpack_require__(/*! ../js/validerProp.js */ "./assets/js/validerProp.js");

__webpack_require__(/*! ../css/cguOtd.css */ "./assets/css/cguOtd.css");

__webpack_require__(/*! ../css/interHidden.css */ "./assets/css/interHidden.css");

__webpack_require__(/*! ../css/cssAdmin.css */ "./assets/css/cssAdmin.css");

__webpack_require__(/*! ../js/creerDevis.js */ "./assets/js/creerDevis.js");

__webpack_require__(/*! ../js/signature.js */ "./assets/js/signature.js");

__webpack_require__(/*! ../css/crm.css */ "./assets/css/crm.css");

__webpack_require__(/*! ../js/devis.js */ "./assets/js/devis.js");

__webpack_require__(/*! ../js/paiment.js */ "./assets/js/paiment.js");

__webpack_require__(/*! ../css/sepa.css */ "./assets/css/sepa.css");

__webpack_require__(/*! ../css/cgv.css */ "./assets/css/cgv.css");

__webpack_require__(/*! ../js/validerAbonnement.js */ "./assets/js/validerAbonnement.js");

__webpack_require__(/*! ../css/FactureAdmin.css */ "./assets/css/FactureAdmin.css");

__webpack_require__(/*! ../js/rapportConsultant.js */ "./assets/js/rapportConsultant.js");

__webpack_require__(/*! ../js/drone.js */ "./assets/js/drone.js");

__webpack_require__(/*! ../js/proposition */ "./assets/js/proposition.js");

__webpack_require__(/*! ../css/map.css */ "./assets/css/map.css");

__webpack_require__(/*! ../js/cgv.js */ "./assets/js/cgv.js");

__webpack_require__(/*! ../js/oubliepswd.js */ "./assets/js/oubliepswd.js");

__webpack_require__(/*! ../js/demandeur.js */ "./assets/js/demandeur.js");

__webpack_require__(/*! ../js/zipCode.js */ "./assets/js/zipCode.js");

__webpack_require__(/*! ../js/changerDateInter */ "./assets/js/changerDateInter.js");

__webpack_require__(/*! ../js/factureAdmin */ "./assets/js/factureAdmin.js");

__webpack_require__(/*! ../js/meteo */ "./assets/js/meteo.js");

__webpack_require__(/*! ../js/map.js */ "./assets/js/map.js");

__webpack_require__(/*! ../js/accordTarif.js */ "./assets/js/accordTarif.js");

__webpack_require__(/*! ../js/listeFactureAdmin.js */ "./assets/js/listeFactureAdmin.js");

__webpack_require__(/*! ../js/finAbonnement.js */ "./assets/js/finAbonnement.js");

__webpack_require__(/*! ../js/part.js */ "./assets/js/part.js");

__webpack_require__(/*! ../js/departInter.js */ "./assets/js/departInter.js");

__webpack_require__(/*! ../js/inter.js */ "./assets/js/inter.js");

__webpack_require__(/*! ../js/droneInter.js */ "./assets/js/droneInter.js");

__webpack_require__(/*! ../js/infoTech.js */ "./assets/js/infoTech.js");

__webpack_require__(/*! ../js/modalInscription.js */ "./assets/js/modalInscription.js");

__webpack_require__(/*! ../js/assurance.js */ "./assets/js/assurance.js");

__webpack_require__(/*! ../js/rappelInter.js */ "./assets/js/rappelInter.js");

__webpack_require__(/*! ../js/tarif.js */ "./assets/js/tarif.js");

__webpack_require__(/*! ../js/enregistrerPaiement.js */ "./assets/js/enregistrerPaiement.js");

__webpack_require__(/*! ../js/entreprise.js */ "./assets/js/entreprise.js");

__webpack_require__(/*! ../js/creerDiag */ "./assets/js/creerDiag.js");

__webpack_require__(/*! ../js/rapport.js */ "./assets/js/rapport.js");

__webpack_require__(/*! ../js/abonnement.js */ "./assets/js/abonnement.js");

__webpack_require__(/*! ../js/assistance.js */ "./assets/js/assistance.js");

__webpack_require__(/*! ../js/rechercheBatiment */ "./assets/js/rechercheBatiment.js");

__webpack_require__(/*! ../js/message.js */ "./assets/js/message.js");

__webpack_require__(/*! ../js/factures.js */ "./assets/js/factures.js");

__webpack_require__(/*! ../js/modalAdmin.js */ "./assets/js/modalAdmin.js");

__webpack_require__(/*! ../js/messageEntreprise.js */ "./assets/js/messageEntreprise.js");

__webpack_require__(/*! ../js/inscriSal */ "./assets/js/inscriSal.js");

__webpack_require__(/*! ../js/ajoutPack */ "./assets/js/ajoutPack.js");

__webpack_require__(/*! ../js/paiementHdd.js */ "./assets/js/paiementHdd.js");

__webpack_require__(/*! ../js/kyc.js */ "./assets/js/kyc.js");

__webpack_require__(/*! ../js/creationZip.js */ "./assets/js/creationZip.js");

__webpack_require__(/*! ../js/payout.js */ "./assets/js/payout.js");

__webpack_require__(/*! ../js/envoyerRapport.js */ "./assets/js/envoyerRapport.js");

__webpack_require__(/*! ../js/ajoutAgent.js */ "./assets/js/ajoutAgent.js");

__webpack_require__(/*! ../js/calendar.js */ "./assets/js/calendar.js");

__webpack_require__(/*! ../js/horairesAgent */ "./assets/js/horairesAgent.js");

__webpack_require__(/*! ../js/agentPlanning */ "./assets/js/agentPlanning.js");

__webpack_require__(/*! ../js/forum.js */ "./assets/js/forum.js");

__webpack_require__(/*! ../js/agendaInsti */ "./assets/js/agendaInsti.js");

__webpack_require__(/*! ../js/notam */ "./assets/js/notam.js");

__webpack_require__(/*! ../js/selectTypeInter */ "./assets/js/selectTypeInter.js");

__webpack_require__(/*! ../js/factureInsti */ "./assets/js/factureInsti.js");

__webpack_require__(/*! ../js/statsAdmin */ "./assets/js/statsAdmin.js");

__webpack_require__(/*! ../js/listeInterVille */ "./assets/js/listeInterVille.js");

__webpack_require__(/*! ../js/appelOffre */ "./assets/js/appelOffre.js");

__webpack_require__(/*! ../js/appelOffreFichier */ "./assets/js/appelOffreFichier.js");

__webpack_require__(/*! ../js/reposneAo */ "./assets/js/reposneAo.js");

__webpack_require__(/*! ../js/dossierAo */ "./assets/js/dossierAo.js");

__webpack_require__(/*! ../js/chat */ "./assets/js/chat.js");

__webpack_require__(/*! ../js/dossierGc */ "./assets/js/dossierGc.js");

__webpack_require__(/*! ../js/dossier */ "./assets/js/dossier.js");

__webpack_require__(/*! ../js/sousDossier */ "./assets/js/sousDossier.js");

__webpack_require__(/*! ../js/annotation */ "./assets/js/annotation.js");

__webpack_require__(/*! ../js/ajoutNote */ "./assets/js/ajoutNote.js");

__webpack_require__(/*! ../js/dateInter */ "./assets/js/dateInter.js");

__webpack_require__(/*! ../js/planningOtd */ "./assets/js/planningOtd.js");

__webpack_require__(/*! ../css/modalDossier.css */ "./assets/css/modalDossier.css");

__webpack_require__(/*! ../css/accueilInsti.css */ "./assets/css/accueilInsti.css");

__webpack_require__(/*! ../js/choixDateinter */ "./assets/js/choixDateinter.js");

__webpack_require__(/*! ../js/modfiInfoInsti */ "./assets/js/modfiInfoInsti.js");

__webpack_require__(/*! ../js/changerAuthorisation */ "./assets/js/changerAuthorisation.js");

__webpack_require__(/*! ../js/changerAbonnement */ "./assets/js/changerAbonnement.js");

__webpack_require__(/*! ../js/listeImmeuble */ "./assets/js/listeImmeuble.js");

__webpack_require__(/*! ../js/interventionRealise */ "./assets/js/interventionRealise.js");

__webpack_require__(/*! ../js/newLienActivation */ "./assets/js/newLienActivation.js");

__webpack_require__(/*! ../js/modifierInfoDemandeur */ "./assets/js/modifierInfoDemandeur.js");

__webpack_require__(/*! ../js/modifBanqueGc */ "./assets/js/modifBanqueGc.js");

__webpack_require__(/*! ../js/telechargerRapport */ "./assets/js/telechargerRapport.js");

__webpack_require__(/*! ../js/meteoInter */ "./assets/js/meteoInter.js");

__webpack_require__(/*! ../css/defilement.css */ "./assets/css/defilement.css");

__webpack_require__(/*! ../js/adresseInter */ "./assets/js/adresseInter.js");

__webpack_require__(/*! ../js/adminRechercheDirigeant */ "./assets/js/adminRechercheDirigeant.js");

__webpack_require__(/*! ../css/modalCalendrier.css */ "./assets/css/modalCalendrier.css");

__webpack_require__(/*! ../js/modifBanqueOtd */ "./assets/js/modifBanqueOtd.js");

__webpack_require__(/*! ../js/suppresionDossier */ "./assets/js/suppresionDossier.js");

__webpack_require__(/*! ../css/supprimerDossier.css */ "./assets/css/supprimerDossier.css");

__webpack_require__(/*! ../js/abonnementOtdAdmin */ "./assets/js/abonnementOtdAdmin.js");

__webpack_require__(/*! ../js/abonnementGc */ "./assets/js/abonnementGc.js");

__webpack_require__(/*! ../js/abonnementInsti.js */ "./assets/js/abonnementInsti.js");

__webpack_require__(/*! ../js/packSupAdmin */ "./assets/js/packSupAdmin.js");

__webpack_require__(/*! ../js/codePromoAdmin */ "./assets/js/codePromoAdmin.js");

__webpack_require__(/*! ../js/adminAmbassadeur */ "./assets/js/adminAmbassadeur.js");

__webpack_require__(/*! ../js/inscriptionCoPro */ "./assets/js/inscriptionCoPro.js");

__webpack_require__(/*! ../js/adminCommision */ "./assets/js/adminCommision.js");

__webpack_require__(/*! ../js/adminCompta */ "./assets/js/adminCompta.js");

__webpack_require__(/*! ../css/interInstiModale.css */ "./assets/css/interInstiModale.css");

__webpack_require__(/*! ../js/envoieMailAdmin */ "./assets/js/envoieMailAdmin.js");

__webpack_require__(/*! ../js/inscriptionProBtp */ "./assets/js/inscriptionProBtp.js");

__webpack_require__(/*! ../js/partenaireProBtp */ "./assets/js/partenaireProBtp.js");

__webpack_require__(/*! ../css/carousel.css */ "./assets/css/carousel.css");

__webpack_require__(/*! ../js/interrapide */ "./assets/js/interrapide.js");

__webpack_require__(/*! ../js/ajoutAbonnement */ "./assets/js/ajoutAbonnement.js");

__webpack_require__(/*! ../js/carouselPub */ "./assets/js/carouselPub.js");

__webpack_require__(/*! ../js/adminInter */ "./assets/js/adminInter.js");

__webpack_require__(/*! ../js/modifierLicence */ "./assets/js/modifierLicence.js");

__webpack_require__(/*! ../js/voirAssurance */ "./assets/js/voirAssurance.js");

__webpack_require__(/*! ../js/contraineInter */ "./assets/js/contraineInter.js");

__webpack_require__(/*! ../js/selectionPackOdi */ "./assets/js/selectionPackOdi.js");

__webpack_require__(/*! ../js/tarifOdi */ "./assets/js/tarifOdi.js");

__webpack_require__(/*! ../js/remise */ "./assets/js/remise.js");

__webpack_require__(/*! ../js/packEntreprise */ "./assets/js/packEntreprise.js");

__webpack_require__(/*! ../js/temspMIssion */ "./assets/js/temspMIssion.js");

__webpack_require__(/*! ../js/packAdminOdi */ "./assets/js/packAdminOdi.js");

__webpack_require__(/*! ../js/supprimerPackAdmin */ "./assets/js/supprimerPackAdmin.js");

__webpack_require__(/*! ../js/missionAdminOdi */ "./assets/js/missionAdminOdi.js");

__webpack_require__(/*! ../js/etape1Diag */ "./assets/js/etape1Diag.js");

__webpack_require__(/*! ../js/choixDiag */ "./assets/js/choixDiag.js");

__webpack_require__(/*! ../js/choixOdi */ "./assets/js/choixOdi.js");

__webpack_require__(/*! ../js/dateInterDiag */ "./assets/js/dateInterDiag.js"); //require("../css/progress.css")
// Need jQuery? Install it with "yarn add jquery", then uncomment to require it.

/***/ }),

/***/ "./assets/js/appelOffre.js":
/*!*********************************!*\
  !*** ./assets/js/appelOffre.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);





if (document.title === "Appel d'offre") {
  (function () {
    var addFormToCollection = function addFormToCollection($collectionHolderClass) {
      // Get the ul that holds the collection of tags
      var $collectionHolder = $('.' + $collectionHolderClass); // Get the data-prototype explained earlier

      var prototype = $collectionHolder.data('prototype'); // get the new index

      var index = $collectionHolder.data('index');
      var newForm = prototype; // You need this only if you didn't set 'label' => false in your tags field in TaskType
      // Replace '__name__label__' in the prototype's HTML to
      // instead be a number based on how many items we have
      // newForm = newForm.replace(/__name__label__/g, index);
      // Replace '__name__' in the prototype's HTML to
      // instead be a number based on how many items we have

      newForm = newForm.replace(/__name__/g, index); // increase the index with one for the next item

      $collectionHolder.data('index', index + 1); // Display the form in the page in an li, before the "Add a tag" link li

      var $newFormLi = $("<div class='col-sm-6 formContact'></div>").append(newForm); // Add the new form at the end of the list

      $collectionHolder.append($newFormLi);
    };

    var addTagFormDeleteLink = function addTagFormDeleteLink($tagFormLi) {
      var $removeFormButton = $('<button type="button" class="btn btn-danger mt-5">Effacer</button>');
      $tagFormLi.append($removeFormButton);
      $removeFormButton.on('click', function (e) {
        // remove the li for the tag form
        $tagFormLi.remove();
      });
    };

    var appelOuvert = document.getElementsByName('appel[ouvert]');
    var appelType = document.querySelector('#appel_type');
    var appel = document.querySelector('.appel');
    var fakebutton = document.querySelector('.btn-dossierAo');
    var realbutton = document.querySelector('#appel_dossier');
    fakebutton.addEventListener('click', function () {
      realbutton.click();
      realbutton.addEventListener('change', function () {
        fakebutton.innerHTML = realbutton.files.length + ' fichier(s) ajouté(s)';
      });
    });
    appelType.addEventListener('change', function () {
      if (appelType.value == "appel d'offre") {
        appel.style.display = 'block';
        document.querySelector('#appel_ouvert_0+label').classList.add('required');
        document.querySelector('#appel_ouvert_1+label').classList.add('required');
        document.querySelector('.dossier').innerHTML = "d'appel d'offre";
      } else {
        appel.style.display = 'none';
        document.querySelector('#appel_ouvert_0+label').classList.remove('required');
        document.querySelector('#appel_ouvert_1+label').classList.remove('required');
        restreint.style.display = 'none';
        appelOuvert[0].checked = false;
        appelOuvert[1].checked = false;
      }

      if (appelType.value == "appel a concurrence") {
        document.querySelector('.dossier').innerHTML = "d'appel à concurrence";
      }
    });
    var restreint = document.querySelector('.restreint');

    var _loop = function _loop(i) {
      appelOuvert[i].addEventListener('change', function () {
        if (appelOuvert[i].value == 'restreint' && appelType.value == "appel d'offre") {
          restreint.style.display = 'block';
          document.querySelector('#appel_restreint_delaiDepotCandidature').setAttribute('required', 'required');
          document.querySelector('#appel_restreint_delaiReponseCandidature').setAttribute('required', 'required');
        } else {
          restreint.style.display = 'none';
          document.querySelector('#appel_restreint_delaiDepotCandidature').removeAttribute('required');
          document.querySelector('#appel_restreint_delaiReponseCandidature').removeAttribute('required');
        }
      });
    };

    for (var i = 0; i < appelOuvert.length; i++) {
      _loop(i);
    }

    var budgetExistant = document.getElementsByName('appel[budgetExistant]');

    var _loop2 = function _loop2(_i) {
      budgetExistant[_i].addEventListener('change', function () {
        if (budgetExistant[_i].value == 'oui') {
          document.querySelector('.budget').style.display = 'block';
        } else {
          document.querySelector('.budget').style.display = 'none';
        }
      });
    };

    for (var _i = 0; _i < budgetExistant.length; _i++) {
      _loop2(_i);
    }

    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).ready(function () {
      // Get the ul that holds the collection of tags
      var $tagsCollectionHolder = $('div.contacts'); // count the current form inputs we have (e.g. 2), use that as the new
      // index when inserting a new item (e.g. 2)
      // add a delete link to all of the existing tag form li elements

      $tagsCollectionHolder.find('div.col-sm-6').each(function () {
        addTagFormDeleteLink($(this));
      });
      $tagsCollectionHolder.data('index', $tagsCollectionHolder.find('input').length);
      var i = 0;
      $('body').on('click', '.add_item_link', function (e) {
        var $collectionHolderClass = $(e.currentTarget).data('collectionHolderClass');
        addFormToCollection($collectionHolderClass);
        $tagsCollectionHolder.find('div#appel_contacts_' + i).each(function () {
          addTagFormDeleteLink($(this));
        });
        i++;
      });
    });
  })();
}

/***/ }),

/***/ "./assets/js/appelOffreFichier.js":
/*!****************************************!*\
  !*** ./assets/js/appelOffreFichier.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Ajout pièces') {
  (function () {
    var changeFile = function changeFile(realButton, fakeButton) {
      fakeButton.addEventListener('click', function () {
        realButton.click();
        realButton.addEventListener('change', function () {
          fakeButton.innerHTML = realButton.files.length + ' fichier(s) ajouté(s)';
        });
      });
    };

    var inputFile = document.querySelectorAll('.file');
    var button = document.querySelectorAll('.fakeFile');
    var valider = document.querySelectorAll('.validerPiece');
    var zoneTexte = document.querySelectorAll('.textInfo');
    var nreFile = document.querySelectorAll('.nbreFile');

    var _loop = function _loop(i) {
      changeFile(inputFile[i], button[i]);
      fetch('/insitution/nobreFichier/' + valider[i].dataset.id + '-' + valider[i].dataset.type, {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response === 0) {
          nreFile[i].innerHTML = '(Aucun fichier ajouté)';
        }

        if (response === 1) {
          nreFile[i].innerHTML = '(1 fichier ajouté)';
        } else {
          nreFile[i].innerHTML = '(' + response + ' fichiers ajoutés)';
        }
      });
    };

    for (var i = 0; i < button.length; i++) {
      _loop(i);
    }

    var _loop2 = function _loop2(_i) {
      valider[_i].addEventListener('click', function () {
        var type = valider[_i].dataset.type;
        var id = valider[_i].dataset.id;
        fetch('/institution/saveInfo/' + type + '/' + id, {
          method: 'POST',
          body: zoneTexte[_i].value
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          for (var j = 0; j < inputFile[_i].files.length; j++) {
            var form = new FormData();
            form.append('file', inputFile[_i].files[j]);
            fetch('/insitutionnel/saveFile/' + response, {
              method: 'POST',
              body: form
            }).then(function (reponse) {
              return reponse.json();
            }).then(function (reponse) {
              document.location.reload();
            });
          }
        });
      });
    };

    for (var _i = 0; _i < valider.length; _i++) {
      _loop2(_i);
    }
  })();
}

if (document.title === 'Précision') {
  var valider = document.querySelector('.terminer');
  var texte = document.querySelector('textarea');
  var id = document.querySelector('.id').value;
  var lien;
  var code = document.querySelector('.codeSyndic');

  if (code) {
    lien = "/mes appels d'offre/" + code.value;
  } else {
    lien = "/mes appels d'offre/";
  }

  valider.addEventListener('click', function () {
    if (texte.value != "") {
      fetch('/institution/savePrecision/' + id, {
        method: 'POST',
        body: texte.value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.location.href = lien;
      });
    } else {
      document.location.href = lien;
    }
  });
}

/***/ }),

/***/ "./assets/js/armee/carteInter.js":
/*!***************************************!*\
  !*** ./assets/js/armee/carteInter.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Carte des interventions') {
  var carte = function carte() {
    var table = document.querySelector('tbody');
    var contenu = JSON.stringify({
      dateInter: inter.value,
      distance: distanceInter.value
    });
    fetch('/militaire/afficherCarte', {
      method: 'POST',
      body: contenu
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      var script = document.createElement('script');
      script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyDuoYW11lZP5K0U3kCoeP8YHhxaFHD8l7g&callback=initMap';
      script.defer = true;
      script.async = true;

      window.initMap = function () {
        map = new google.maps.Map(document.querySelector('.carteInter'), {
          center: {
            lat: response['center'][0],
            lng: response['center'][1]
          },
          zoom: 8,
          mapTypeControl: true,
          scrollwheel: true,
          zoomControl: false
        });
        var LatLngArmee = new google.maps.LatLng(response['center'][0], response['center'][1]);
        var marqueurAmee = new google.maps.Marker({
          position: LatLngArmee,
          map: map,
          title: 'Votre position'
        });
        marqueurAmee.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png');

        for (var j = 0; j <= response['inter'].length; j++) {
          var myLatlng = new google.maps.LatLng(response['inter'][j][0], response['inter'][j][1]);
          var marker = new google.maps.Marker({
            position: myLatlng,
            map: map,
            title: "Drone utilisé :" + response['inter'][j][2] + " " + response['inter'][j][3] + " " + response['inter'][j][4]
          });
        }
      };

      document.head.appendChild(script);

      while (table.lastChild) {
        table.removeChild(table.lastChild);
      }

      for (var i = 0; i <= response['inter'].length; i++) {
        console.log('ok');
        var tr = document.createElement('tr');
        var tdHD = document.createElement('td');
        var tdHF = document.createElement('td');
        var tdAdresse = document.createElement("td");
        var tdOTD = document.createElement("td");
        tdHD.innerHTML = response['inter'][i][12];
        tdHF.innerHTML = response['inter'][i][13];
        tdAdresse.innerHTML = response['inter'][i][8] + " " + response['inter'][i][9] + "<br>" + response['inter'][i][10] + " " + response['inter'][i][11];
        tdOTD.innerHTML = "OTD présent : " + response['inter'][i][6] + " " + response['inter'][i][5] + "<br>" + "Téléphone :" + response['inter'][i][7];
        tr.appendChild(tdHD);
        tr.appendChild(tdHF);
        tr.appendChild(tdAdresse);
        tr.appendChild(tdOTD);
        table.appendChild(tr);
      }
    });
  };

  var inter = document.querySelector('.dateInter');
  var distanceInter = document.querySelector('.distanceInter');
  document.addEventListener('DOMContentLoaded', function () {
    carte();
  });
  distanceInter.addEventListener('change', function () {
    carte();
  });
  inter.addEventListener('change', function () {
    carte();
  });
}

/***/ }),

/***/ "./assets/js/armee/intervention.js":
/*!*****************************************!*\
  !*** ./assets/js/armee/intervention.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Accueil armee') {
  var interJour = document.querySelector('.interJour');
  var interSemaine = document.querySelector('.interSemaine');
  var interMois = document.querySelector('.interMois');
  document.addEventListener('DOMContentLoaded', function () {
    fetch("/militaire/interDujour", {
      method: 'GET'
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      if (reponse['nbreInterjour'] <= 1) {
        interJour.innerText = reponse['nombreInterJour'] + ' intervention';
      } else {
        interJour.innerText = reponse['nombreInterJour'] + ' interventions';
      }

      if (reponse['nbreInterSemaine'] <= 1) {
        interSemaine.innerText = reponse['nbreInterSemaine'] + ' intervention';
      } else {
        interSemaine.innerText = reponse['nbreInterSemaine'] + ' interventions';
      }

      if (reponse['nbreInterMois'] <= 1) {
        interMois.innerText = reponse['nbreInterMois'] + ' intervention';
      } else {
        interMois.innerText = reponse['nbreInterMois'] + ' interventions';
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/assistance.js":
/*!*********************************!*\
  !*** ./assets/js/assistance.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Assistance au vol') {
  (function () {
    var interventions = document.querySelectorAll('.card');
    var mapSat = [];
    var mapExclu = [];
    var exlusion = document.querySelectorAll('.exclusion');
    var vent = document.querySelectorAll('.vent');
    var pluie = document.querySelectorAll('.pluie');
    var temp = document.querySelectorAll('.temp');

    var _loop = function _loop(i) {
      fetch("/coordInter/" + interventions[i].dataset.inter, {
        method: "GET"
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        mapExclu[i] = L.map(exlusion[i], {
          center: [reponse.lat, reponse.lon],
          zoom: 18,
          attributionControl: false,
          zoomControl: false,
          scrollWheelZoom: false,
          keyboard: false,
          doubleClickZoom: false,
          dragging: false
        });
        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
          maxZoom: 20,
          id: 'mapbox/satellite-v9',
          tileSize: 512,
          zoomOffset: -1,
          accessToken: 'pk.eyJ1IjoieG1hdGhpZXUxMyIsImEiOiJja2N1aHU2eTAyOGZ2MnJsZjk1bjR0ZHE0In0.-N1CSInz77-O6xViA43KQw'
        }).addTo(mapExclu[i]);
        L.circle([reponse.lat, reponse.lon], reponse.rayon).addTo(mapExclu[i]);
        L.marker(reponse, {
          title: "Zone d'exclusion"
        }).addTo(mapExclu[i]);
      });
    };

    for (var i = 0; i < interventions.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/assurance.js":
/*!********************************!*\
  !*** ./assets/js/assurance.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

if (document.title === 'Phase 6 de votre inscription' || document.title === 'Ajouter vos informations assurantielles') {
  document.addEventListener('DOMContentLoaded', function () {
    function changeButton(idButton, realId) {
      var button = document.getElementById(idButton);
      var assurance = document.getElementById(realId);
      button.addEventListener('click', function () {
        assurance.click();
        assurance.addEventListener('change', function () {
          button.innerHTML = assurance.files[0]['name'];
        });
      });
    }

    changeButton('assu', 'assurance_ent_ass_pro_fichier');
  });
}

if (document.title === "Complémentaire") {
  var realButton = document.querySelector("#rc_pro2_fichier");
  var fakeButton = document.querySelector("#assu");
  fakeButton.addEventListener('click', function () {
    realButton.click();
    realButton.addEventListener('change', function () {
      fakeButton.innerHTML = realButton.files[0]["name"];
    });
  });
}

/***/ }),

/***/ "./assets/js/calendar.js":
/*!*******************************!*\
  !*** ./assets/js/calendar.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/core/locales/fr */ "./node_modules/@fullcalendar/core/locales/fr.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fullcalendar/daygrid */ "./node_modules/@fullcalendar/daygrid/main.js");
/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fullcalendar/timegrid */ "./node_modules/@fullcalendar/timegrid/main.js");
/* harmony import */ var _fullcalendar_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fullcalendar/list */ "./node_modules/@fullcalendar/list/main.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.js");



function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }








if (document.title === 'Calendrier') {
  var calendarEl = document.getElementById('calendrier');
  var idSalarie = document.querySelector('#idSalarie');
  var route;
  var routeInfo;

  if (idSalarie.dataset.role === "odi") {
    route = '/calendarODI/' + idSalarie.value;
    routeInfo = "/infoInterOdi";
  } else {
    route = '/calendarOTD/' + idSalarie.value;
    routeInfo = "/recupereInterCalendar";
  }

  document.addEventListener('DOMContentLoaded', function () {
    var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__["Calendar"](calendarEl, {
      plugins: [_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_4__["default"], _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_5__["default"], _fullcalendar_list__WEBPACK_IMPORTED_MODULE_6__["default"], _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_7__["default"]],
      initialView: 'dayGridMonth',
      locale: _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3___default.a,
      height: 750,
      aspectRatio: 4.5,
      editable: false,
      views: {
        listDay: {
          buttonText: "Aujourd'hui"
        },
        listWeek: {
          buttonText: 'Semaine'
        },
        listMonth: {
          buttonText: 'Mois'
        }
      },
      events: route,
      headerToolbar: {
        left: 'prev,next',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      timeZone: 'locale',
      allDaySlot: false,
      slotDuration: '00:30:00',
      eventClick: function eventClick(info) {
        if (info.event._def.extendedProps.recurringDef === "absence") {
          var confirmer = confirm("Souhaitez vous supprimer cette plage horaire ?");

          if (confirmer) {
            fetch("/SuppimerAbsence/" + info.event._def.extendedProps.publicId, {
              method: 'GET'
            }).then(function () {
              alert("Suppression effectuée");
              info.event.remove();
            });
          }
        } else {
          fetch(routeInfo, {
            method: 'POST',
            body: info.event._def.extendedProps.publicId
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            var _iterator = _createForOfIteratorHelper(response),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var responseElement = _step.value;
                document.querySelector('.typeInter').innerHTML = responseElement.type;
                document.querySelector('.adresse').innerHTML = responseElement.adresse;
                document.querySelector('.detail').innerHTML = responseElement.detail;
                document.querySelector('.drone').innerHTML = responseElement.drone;
                document.querySelector('.demandeur').innerHTML = responseElement.demandeur;
                document.querySelector('.rdv').innerHTML = responseElement.rdv;
                document.querySelector('.temps').innerHTML = responseElement.temps;
                document.querySelector('.distance').innerHTML = responseElement.distance;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            document.querySelector('.btn-primary').click();
          });
        }
      }
    });
    calendar.render();
  });
}

/***/ }),

/***/ "./assets/js/carouselPub.js":
/*!**********************************!*\
  !*** ./assets/js/carouselPub.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var siema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! siema */ "./node_modules/siema/dist/siema.min.js");
/* harmony import */ var siema__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(siema__WEBPACK_IMPORTED_MODULE_1__);



if (document.title === "Diag-drone") {
  var defilementPub = function defilementPub() {
    document.querySelector('.js-prev').click();
  };

  var siema = new siema__WEBPACK_IMPORTED_MODULE_1___default.a({
    selector: '.siema',
    duration: 2,
    easing: 'cubic-bezier(.17,.67,.32,1.34)',
    perPage: 4,
    startIndex: 0,
    draggable: false,
    multipleDrag: false,
    threshold: 20,
    loop: true,
    rtl: true,
    onInit: function onInit() {},
    onChange: function onChange() {}
  });
  document.querySelector('.js-prev').addEventListener('click', function () {
    siema.next();
  });
  window.setInterval(defilementPub, 5000);
}

/***/ }),

/***/ "./assets/js/cgv.js":
/*!**************************!*\
  !*** ./assets/js/cgv.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title === 'Condition générales') {
  document.addEventListener('DOMContentLoaded', function () {
    /*let modale = document.querySelector('.modal');
    let bouton = document.querySelector('.btn-maincolor');
        bouton.addEventListener('click', () => {
        modale.style.display = 'block'
      })*/
  });
}

if (document.title == 'Mandat SEPA') {
  var suivant = document.querySelector('.btn-maincolor2');
  suivant.addEventListener('click', function () {
    document.location = '/terminer/Inscription';
  });
}

/***/ }),

/***/ "./assets/js/changerAbonnement.js":
/*!****************************************!*\
  !*** ./assets/js/changerAbonnement.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Changer votre abonnement") {
  (function () {
    var mois = document.querySelector('.form-control-range');
    var button = document.createElement('button');
    var a = document.createElement('a');
    var input = document.createElement('input');
    var abonnement = document.querySelectorAll('.form-check-input');
    var zoneBouton = document.querySelector('.CGU');
    var idAbonnement;
    var restant = document.querySelector('#reste').value;

    var _loop = function _loop(i) {
      abonnement[i].addEventListener('change', function () {
        while (zoneBouton.firstChild) {
          zoneBouton.removeChild(zoneBouton.lastChild);
        }

        input.type = 'checkbox';
        input.id = 'cgu';
        input.value = 1;
        a.href = "/cguOTDdd";
        a.setAttribute('target', '_blank');
        a.innerText = "J'ai lu et j'accèpte les conditions générales d'utilisation";
        button.classList.add('btn');
        button.classList.add('btn-maincolor');
        button.innerText = 'Valider';
        zoneBouton.appendChild(input);
        zoneBouton.appendChild(a);
        zoneBouton.appendChild(document.createElement('br'));
        zoneBouton.appendChild(button);
        idAbonnement = abonnement[i].value;
        var bouton = document.querySelector('.btn-maincolor');
        var cgu = document.querySelector('#cgu');
        var condition;

        if (cgu) {
          condition = cgu.value;
        } else {
          condition = null;
        }

        bouton.addEventListener('click', function () {
          var corps = JSON.stringify({
            duree: mois.value,
            conditionUtilisation: condition
          });
          console.log(corps);
          if (!cgu.checked) alert("Veuillez accepter nos condition générales d'utillisation");else if (restant > mois.value) {
            alert("Sélectionnez une durée d'abonnement plus longue");
          } else {
            fetch('/entreprise/validerChangementAbonnement/' + idAbonnement, {
              method: 'POST',
              body: corps
            }).then(function (reponse) {
              return reponse.json();
            }).then(function (reponse) {
              if (reponse === 'ok') {
                var p = document.createElement('p');
                p.classList.add('h5');
                p.innerText = 'Un mail concernant les instructions de validation de votre abonnement viens de vous être envoyé';
                document.querySelector('.message').appendChild(p);
              }
            });
          }
        });
      });
    };

    for (var i = 0; i < abonnement.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/changerAuthorisation.js":
/*!*******************************************!*\
  !*** ./assets/js/changerAuthorisation.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Liste autorisations') {
  (function () {
    var valider = document.querySelectorAll('.btn-primary');
    var authorisation = document.querySelectorAll('.form-control');
    console.log(authorisation);

    var _loop = function _loop(i) {
      valider[i].addEventListener('click', function () {
        var contenu = JSON.stringify({
          agent: valider[i].dataset.user,
          type: valider[i].dataset.type,
          role: authorisation[i].value
        });
        fetch("/institution/changerRole", {
          method: 'POST',
          body: contenu
        }).then(function () {
          document.location.reload();
        });
      });
    };

    for (var i = 0; i < valider.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/changerDateInter.js":
/*!***************************************!*\
  !*** ./assets/js/changerDateInter.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == "Mes Interventions") {
  (function () {
    var boutonDate = document.querySelectorAll('.btn-inter');
    var validerdate = document.querySelectorAll('.change');
    var modalDate = document.querySelectorAll('.dateInter');
    var date = document.querySelectorAll('.dateIntervention');
    var heure = document.querySelectorAll('.heureInter');
    var boutonDrone = document.querySelectorAll('.btn-changer');
    var modalDrone = document.querySelectorAll('.appareil');
    var choixDrone = document.querySelectorAll('.choixAppareil');

    var _loop = function _loop(i) {
      boutonDate[i].addEventListener('click', function () {
        modalDate[i].showModal();
        validerdate[i].addEventListener('click', function () {
          var rdv = Date.parse(date[i].value + ' ' + heure[i].value);
          var corp = JSON.stringify({
            dateRdv: rdv / 1000,
            inter: boutonDate[i].dataset.inter
          });
          fetch('/changerDate', {
            method: 'POST',
            body: corp
          }).then(function () {
            document.location.reload();
          });
        });
      });
    };

    for (var i = 0; i < boutonDate.length; i++) {
      _loop(i);
    }

    var _loop2 = function _loop2(j) {
      boutonDrone[j].addEventListener('click', function () {
        modalDrone[j].showModal();
        choixDrone[j].addEventListener('change', function () {
          var corps = JSON.stringify({
            idDrone: choixDrone[j].value,
            idInter: choixDrone[j].dataset.inter
          });
          fetch('/choixDroneInter', {
            method: 'POST',
            body: corps
          }).then(function () {
            document.location.reload();
          });
        });
      });
    };

    for (var j = 0; j < boutonDrone.length; j++) {
      _loop2(j);
    }
  })();
}

/***/ }),

/***/ "./assets/js/chat.js":
/*!***************************!*\
  !*** ./assets/js/chat.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Chat DIAG-DRONE') {
  var button = document.querySelector('.btn-maincolor');
  var strWindowFeatures = "menubar=no,location=no,resizable=no,scrollbars=yes,status=1,height=500,width=850";
  button.addEventListener('click', function () {
    window.open('/chat/fenetreChat', 'chat', strWindowFeatures);
  });
}

if (document.title == 'Message à DIAG-DRONE') {
  var envoyer = document.querySelector('.btn-success');
  var text = document.querySelector('textarea');
  var discussion = document.querySelector('.discussion');
  envoyer.addEventListener('click', function () {
    var p = document.createElement('p');
    p.innerHTML = 'Moi: ' + text.value;
    discussion.appendChild(p);
    fetch('/chat/envoieMessage', {
      method: 'POST',
      body: text.value
    });
  });
}

/***/ }),

/***/ "./assets/js/choixDateinter.js":
/*!*************************************!*\
  !*** ./assets/js/choixDateinter.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-iso-string.js */ "./node_modules/core-js/modules/es.date.to-iso-string.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Choix Date') {
  (function () {
    var code = document.querySelector('.codeSyndic');
    var aujourd = new Date();
    var demain = new Date();
    var dateMax = new Date();
    var delai = document.querySelector('#delai');
    dateMax.setDate(aujourd.getDate() + 2);

    if (delai) {
      demain.setDate(aujourd.getDate() + 14);
      dateMax.setDate(aujourd.getDate() + 15);
    } else {
      demain.setDate(aujourd.getDate());
      dateMax.setDate(aujourd.getDate() + 2);
    }

    var choixTypedate = document.getElementsByName("typeDate");
    var type = "dateSeule";

    var _loop = function _loop(i) {
      choixTypedate[i].addEventListener('change', function () {
        switch (choixTypedate[i].value) {
          case "dateSeule":
            document.querySelector('.dateSimple').style.display = "block";
            document.querySelector('.plageDate').style.display = "none";
            type = "dateSeule";
            break;

          case "plageDate":
            document.querySelector('.dateSimple').style.display = "none";
            document.querySelector('.plageDate').style.display = "block";
            type = "plageDate";
            break;

          case "sansDate":
            document.querySelector('.dateSimple').style.display = "none";
            document.querySelector('.plageDate').style.display = "none";
            type = "sansDate";
            break;
        }
      });
    };

    for (var i = 0; i < choixTypedate.length; i++) {
      _loop(i);
    }

    var date = new Date(demain);
    var dateInput = document.querySelector('#dateInter');
    var dateMinimum = document.querySelector("#dateMin");
    var datemaximum = document.querySelector("#dateMax");
    dateInput.value = demain.toISOString().substring(0, 10);
    dateInput.min = demain.toISOString().substring(0, 10);
    dateMinimum.value = demain.toISOString().substring(0, 10);
    dateMinimum.min = demain.toISOString().substring(0, 10);
    datemaximum.value = dateMax.toISOString().substring(0, 10);
    datemaximum.min = dateMax.toISOString().substring(0, 10);
    var temps;
    var btn = document.querySelector('.btn-maincolor');
    dateMinimum.addEventListener('change', function () {
      var nDateMaximum = new Date(new Date().setDate(new Date(dateMinimum.value).getDate() + 1)).toISOString().substring(0, 10);
      datemaximum.value = nDateMaximum;
    });
    datemaximum.addEventListener('change', function () {
      var nDateMinimum = new Date(new Date().setDate(new Date(datemaximum.value).getDate() - 1));

      if (nDateMinimum.getTime() < new Date(dateMinimum.value).getTime()) {
        dateMinimum.value = nDateMinimum.toISOString().substring(0, 10);
      }
    });
    /* btn.addEventListener('click',()=>{
           if (demain.getTime() <= date.getTime()){
             let timestamp = date.getTime();
               fetch("/newInter/nbreOtd/"+btn.dataset.inter,{
                 method :'POST',
                 body : timestamp
             }).then((response)=>{
                 return response.json()
             })
                 .then((response)=>{
                     if (response.type ==='rapide'){
                         reponse = "<p class='h4'><span class='color_blue'>Diag-drone</span> a détecté  <span class='color_blue nombre'>"+response.nombre+"</span>\n" +
                             "                        <span class='color_blue'>O</span>pérateurs <span class='color_blue'>T</span>élépilotes de <span class='color_blue'>D</span>rone qui correspondent à votre demande pouvant intervenir dans un délai de 24 heures minimum</p>"
                     }
                     else{
                         reponse = "<p class='h4'><span class='color_blue'>Diag-drone</span> a détecté  <span class='color_blue nombre'>"+response.nombre+"</span>\n" +
                             "                        <span class='color_blue'>O</span>pérateurs <span class='color_blue'>T</span>élépilotes de <span class='color_blue'>D</span>rone qui correspondent à votre demande pouvant intervenir dans un délai de 6 jours minimum</p>"
                     }
                     document.querySelector('.modal-body').innerHTML = reponse
                     document.querySelector('#modalReponse').style.display = 'block'
                     document.querySelector('#modalReponse').classList.add('show')
                     document.querySelector('#modalReponse').style.paddingRight = '16px'
                 })
         }
         else {
             alert('Veuillez choisir un autre jour')
         }
       })*/

    var valider = document.querySelector('.btn-maincolor2');
    btn.addEventListener('click', function () {
      console.log(type);
      var content;

      switch (type) {
        case "dateSeule":
          content = JSON.stringify({
            debut: dateInput.value,
            fin: null
          });
          break;

        case "plageDate":
          content = JSON.stringify({
            debut: dateMinimum.value,
            fin: datemaximum.value
          });
          break;

        case "sansDate":
          {
            content = null;
            break;
          }
      } // document.querySelector('.closeF').click()


      document.querySelector(".btnModale").click();
      fetch('/validerRdvInter/' + valider.dataset.inter, {
        method: 'POST',
        body: content
      }).then(function () {
        document.querySelector(".closeSpinner").click();
        document.querySelector(".btnModaleF").click();

        if (code) {//document.location.href='/demandeur/encours/'+code.value;
        } else {//document.location.href='/demandeur/encours/'
          }
      });
    });
    document.querySelector('.btn-secondary').addEventListener('click', function () {
      document.querySelector('#modalReponse').style.display = 'none';
    });
  })();
}

/***/ }),

/***/ "./assets/js/choixDiag.js":
/*!********************************!*\
  !*** ./assets/js/choixDiag.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Vos diagnostics immobilier") {
  var inter = document.querySelector('input[type=hidden]').value;
  var missions = document.querySelectorAll('input[type=checkbox]');
  var liste = [];
  var valider = document.querySelector('.btn-maincolor');
  document.addEventListener("DOMContentLoaded", function () {
    var _iterator = _createForOfIteratorHelper(missions),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var mission = _step.value;
        liste.push(mission.value);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    fetch("/prixMissions/" + inter, {
      method: 'post',
      body: JSON.stringify({
        mission: liste
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      console.log(response);
    });
  });
  valider.addEventListener('click', function () {
    var missionChoisie = document.querySelectorAll('input[type=checkbox]:checked');
    var listeMission = [];

    var _iterator2 = _createForOfIteratorHelper(missionChoisie),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var mission = _step2.value;
        listeMission.push(mission.value);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    fetch("/ajoutMissionInter/" + inter, {
      method: "POST",
      body: JSON.stringify({
        liste: listeMission
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      document.location.href = "/choixOdi/" + response;
    });
  });
}

/***/ }),

/***/ "./assets/js/choixOdi.js":
/*!*******************************!*\
  !*** ./assets/js/choixOdi.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");
/* harmony import */ var core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.js");
/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fullcalendar/daygrid */ "./node_modules/@fullcalendar/daygrid/main.js");
/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fullcalendar/timegrid */ "./node_modules/@fullcalendar/timegrid/main.js");
/* harmony import */ var _fullcalendar_list__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @fullcalendar/list */ "./node_modules/@fullcalendar/list/main.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @fullcalendar/core/locales/fr */ "./node_modules/@fullcalendar/core/locales/fr.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! superagent */ "./node_modules/superagent/lib/client.js");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_12__);







function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









if (document.title === "Choix de l'ODI") {
  (function () {
    var elementCalendrier = document.querySelector("#calendrier");
    var inter = document.querySelector('input[type=hidden]').value;
    var remise = 1;
    var demiJ = document.querySelector('#tab02');
    var prixInter;
    var dateInter;
    var delai;
    var pack;
    document.addEventListener('DOMContentLoaded', function () {
      var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_6__["Calendar"](elementCalendrier, {
        plugins: [_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_7__["default"], _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_8__["default"], _fullcalendar_list__WEBPACK_IMPORTED_MODULE_9__["default"], _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_10__["default"]],
        initialView: 'dayGridMonth',
        locale: _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_11___default.a,
        height: 500,
        aspectRatio: 2,
        editable: false,
        views: {
          listDay: {
            buttonText: "Aujourd'hui"
          },
          listWeek: {
            buttonText: 'Semaine'
          },
          listMonth: {
            buttonText: 'Mois'
          }
        },
        events: function events(info, successCallback, failureCallback) {
          superagent__WEBPACK_IMPORTED_MODULE_12___default.a.post('/infoCaledrierOdi/' + inter).type('json').query({
            start: info.start.valueOf(),
            end: info.end.valueOf()
          }).end(function (err, res) {
            if (err) {
              failureCallback(err);
            } else {
              successCallback(Array.prototype.slice.call( // convert to array
              res.body).map(function (eventEl) {
                return {
                  title: eventEl.total,
                  start: eventEl.date,
                  allDay: true,
                  color: eventEl.backgroud,
                  backgroundColor: eventEl.backgroud,
                  salarie: eventEl.salarie,
                  prix: eventEl.prix,
                  duree: eventEl.duree,
                  total: eventEl.total,
                  mission: eventEl.mission,
                  dureeS: eventEl.dureeS,
                  pack: eventEl.pack
                };
              }));
            }
          });
        },
        headerToolbar: {
          left: 'prev,next',
          center: 'title',
          right: 'dayGridMonth,timeGridWeek'
        },
        timeZone: 'locale',
        allDaySlot: false,
        slotDuration: '00:30:00',
        eventClick: function eventClick(info) {
          document.querySelector('.salarie').value = info.event._def.extendedProps.salarie;
          var zonePrixHeure = document.querySelector(".prixHeurePreci");

          while (zonePrixHeure.firstChild) {
            zonePrixHeure.removeChild(zonePrixHeure.lastChild);
          }

          dateInter = new Date(info.el.fcSeg.eventRange.range.start).toLocaleDateString('fr-FR');
          prixInter = info.event._def.extendedProps.prix;
          delai = info.event._def.extendedProps.dureeS;
          pack = info.event._def.extendedProps.pack;
          console.log(pack);
          var p = document.createElement("p");
          p.classList.add("h5", "color_blue");
          p.innerText = "Le prix proposé par l'ODI est " + prixInter + " €.";
          zonePrixHeure.appendChild(p);
          document.querySelector('.dureeDiag').innerHTML = info.event._def.extendedProps.duree;
          document.querySelector('.salarie').value = info.event._def.extendedProps.salarie;
          document.querySelector('.dateDiag').innerText = new Date(info.el.fcSeg.eventRange.range.start).toLocaleDateString('fr-FR');
          fetch("/dispoOdi", {
            method: 'POST',
            body: JSON.stringify({
              salarie: info.event._def.extendedProps.salarie,
              date: new Date(info.el.fcSeg.eventRange.range.start).toLocaleDateString('fr-FR')
            })
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            var zoneJournee = document.querySelector('#journee');
            var zonePrix = document.querySelector("#prixJournee");

            while (zoneJournee.firstChild) {
              zoneJournee.removeChild(zoneJournee.lastChild);
            }

            while (zonePrix.firstChild) {
              zonePrix.removeChild(zonePrix.lastChild);
            }

            if (response.journee) {
              var _p = document.createElement("p");

              _p.classList.add("h4");

              _p.innerText = "Vous pouvez bénéficiez d'une remise de " + response.remise + "% en laissant le technicien choisir l'heure du rendez. Vous serez prévénu par email la veille de votre rendez de l'heure d'arrivée du technicien";
              zoneJournee.append(_p);
              remise += response.remise / 100;
            } else {
              var _p2 = document.createElement("p");

              _p2.classList.add("h4");

              _p2.innerText = "Vous serez prévénu par email la veille de votre rendez de l'heure d'arrivée du technicien .";
              zoneJournee.append(_p2);
            }

            var prix = document.createElement("p");
            prix.classList.add("h5");
            prix.innerText = "Le prix proposé par le technicien est : " + (prixInter / remise).toFixed(2) + " €";
            zonePrix.appendChild(prix);
          });
          document.querySelector('.btn-primary').click();
        }
      });
      calendar.render();
    });
    demiJ.addEventListener('click', function () {
      fetch("/dispoOdi/demi", {
        method: 'post',
        body: JSON.stringify({
          date: dateInter,
          salarie: document.querySelector('.salarie').value
        })
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        var remiseDemi = 1;
        var zoneJournee = document.querySelector('#demi');
        var zonePrix = document.querySelector("#prixDemi");

        while (zoneJournee.firstChild) {
          zoneJournee.removeChild(zoneJournee.lastChild);
        }

        while (zonePrix.firstChild) {
          zonePrix.removeChild(zonePrix.lastChild);
        }

        if (response.journee) {
          var p = document.createElement("p");
          p.classList.add("h4");
          p.innerText = "Vous pouvez bénéficiez d'une remise de " + response.remise + "% en choisissant un rendez vous le matin ou l'après midi. Le technicien vous préviendra par email ";
          zoneJournee.append(p);
          remiseDemi += response.remise / 100;
        } else {
          var _p3 = document.createElement("p");

          _p3.classList.add("h4");

          _p3.innerText = "Veuillez choisir la demi-journée à laquelle vous souhaitez votre rendez-vous. Vous serez prévénu par email la veille de votre rendez de l'heure d'arrivée du technicien .";
          zoneJournee.append(_p3);
        }

        var prix = document.createElement("p");
        prix.classList.add("h5");
        prix.innerText = "Le prix proposé par l'ODI est : " + (prixInter / remiseDemi).toFixed(2) + " €";
        zonePrix.appendChild(prix);
      });
    });
    var choixDemi = document.getElementsByName("demi");

    var _loop = function _loop(i) {
      choixDemi[i].addEventListener('change', function () {
        fetch("/choixMoment", {
          method: 'post',
          body: JSON.stringify({
            moment: choixDemi[i].value,
            date: dateInter,
            duree: delai,
            odi: document.querySelector('.salarie').value
          })
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          if (response === "disponible") {
            document.querySelector(".demiJ").removeAttribute('hidden');
            document.querySelector('.resultat').innerText = "L'opérateur est disponible. Vous pouvez valider votre intervention.";
          } else {
            document.querySelector(".demiJ").setAttribute('hidden', 'hidden');
            document.querySelector('.resultat').innerText = "L'opérateur n'est disponible. Veuillez modifier votre choix.";
          }
        });
      });
    };

    for (var i = 0; i < choixDemi.length; i++) {
      _loop(i);
    }

    var heure = document.querySelector("#heure");
    heure.addEventListener('change', function () {
      fetch("/choixHeure", {
        method: 'post',
        body: JSON.stringify({
          date: dateInter,
          duree: delai,
          odi: document.querySelector('.salarie').value,
          heure: heure.value
        })
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (response) {
        if (response === "disponible") {
          document.querySelector(".reponseHeure").innerHTML = "L'opérateur est disponible. Vous pouvez valider votre intervention.";
          document.querySelector('.heure').removeAttribute('hidden');
        } else {
          document.querySelector('.resultat').innerText = "L'opérateur n'est disponible. Veuillez modifier votre choix.";
          document.querySelector('.heure').setAttribute('hidden', 'hidden');
        }
      });
    });
    var valider = document.querySelectorAll('.btn-maincolor');
    var moment;

    var _iterator = _createForOfIteratorHelper(valider),
        _step;

    try {
      var _loop2 = function _loop2() {
        var element = _step.value;
        element.addEventListener('click', function () {
          var dateRdv;

          if (element.classList.contains('journee')) {
            moment = 'Dans la journee';
          } else if (element.classList.contains('demiJ')) {
            var choixMoment = document.querySelector("input.demijournee:checked");

            if (!choixMoment) {
              alert("Veuillez choisir une periode pour votre rendez vous");
            } else {
              moment = choixMoment.value;
            }
          } else {
            moment = "Heure précise";
            dateRdv = heure.value;
          }

          fetch("/validerDiag", {
            method: "POST",
            body: JSON.stringify({
              intervention: inter,
              moment: moment,
              duree: delai,
              odi: document.querySelector('.salarie').value,
              date: dateInter,
              rdv: dateRdv,
              prix: prixInter,
              pack: pack
            })
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            document.querySelector(".closeModal").click();

            if (response.inscrit) {
              document.querySelector(".connectz").click();
            } else {
              document.querySelector('.inscription').click();
              document.querySelector("#connect").href = "/login?id=" + response.inter;
              document.querySelector('#inscrit').href = "/inscription/demandeur?id=" + response.inter;
            }
          });
        });
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop2();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  })();
}

/***/ }),

/***/ "./assets/js/codePromoAdmin.js":
/*!*************************************!*\
  !*** ./assets/js/codePromoAdmin.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Promo abonnement') {
  (function () {
    var type = document.getElementsByName('type');
    var valider = document.querySelector('.btn-primary');
    var profil;
    var dateDebut = document.querySelector('#debut');
    var dateFin = document.querySelector('#fin');
    var remise = document.querySelector('#remise');
    var codePromo = document.querySelector('#codePromo');

    var _loop = function _loop(i) {
      type[i].addEventListener('change', function () {
        if (type[i].value === 'otd') {
          document.querySelector('.abonnementOtd').style.display = 'block';
          document.querySelector('.profilInsti').style.display = 'none';
          document.querySelector('.profilGc').style.display = 'none';
          profil = document.querySelector('#abpoOtd');
        } else if (type[i].value === 'gc') {
          document.querySelector('.abonnementOtd').style.display = 'none';
          document.querySelector('.profilInsti').style.display = 'none';
          document.querySelector('.profilGc').style.display = 'block';
          profil = document.querySelector('#profilGc');
        } else {
          document.querySelector('.abonnementOtd').style.display = 'none';
          document.querySelector('.profilInsti').style.display = 'block';
          document.querySelector('.profilGc').style.display = 'none';
          profil = document.querySelector('#profilInsti');
        }
      });
    };

    for (var i = 0; i < type.length; i++) {
      _loop(i);
    }

    valider.addEventListener('click', function () {
      var route;

      if (dateDebut.value != "" && dateFin.value != "" && remise.value != "" && profil.value != "" && codePromo.value != "") {
        if (profil.classList.contains('abonnement')) {
          route = "/administrateur/promoOtd";
        } else if (profil.classList.contains('institution')) {
          route = "/administrateur/promoInsti";
        } else {
          route = "/administrateur/promoGc";
        }
      } else {
        alert('Il manque des informations pour créer le code promotionnel');
      }

      var contenu = JSON.stringify({
        debut: dateDebut.value,
        fin: dateFin.value,
        type: profil.value,
        remise: remise.value,
        code: codePromo.value
      });
      fetch(route, {
        body: contenu,
        method: 'POST'
      }).then(function () {
        document.location.reload();
      });
    });
  })();
}

/***/ }),

/***/ "./assets/js/contraineInter.js":
/*!*************************************!*\
  !*** ./assets/js/contraineInter.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Contraintes interventions") {
  (function () {
    var nbreContrainte = document.querySelectorAll('.nbreContrainte');
    var ajoutContrainte = document.querySelectorAll('.ajoutContrainte');
    var zoneAjout = document.querySelectorAll('.zoneAjout');
    var validerContrainte = document.querySelectorAll('.validerContrainte');
    var envoie = [];
    var enfant1 = "<label >Contrainte</label>\n" + "                                <select   class=\"form-control form-control-lg type\">\n" + "                                    <option value=\"\" disabled selected>Sélectionne la contrainte</option>\n" + "                                    <option value=\"Espace aérien\">Espace aérien</option>\n" + "                                    <option value=\"Aérodrome-Aéroport (AIP)\">Aérodrome-Aéroport (AIP)</option>\n" + "                                    <option value=\"Zone urbaine\">Zone urbaine</option>\n" + "                                    <option value=\"Zone densément peuplée\">Zone densément peuplée</option>\n" + "                                    <option value=\"Route\">Route</option>\n" + "                                    <option value=\"Antenne\">Antenne</option>\n" + "                                    <option value=\"Chemin de fer\">Chemin de fer</option>\n" + "                                    <option value=\"Lignes électriques\">Lignes électriques</option>\n" + "                                    <option value=\"Réserve naturelle\">Réserve naturelle</option>\n" + "                                    <option value=\"Zone militaire (VOL TAC , SETBA , SEBAH)\">Zone militaire (VOL TAC , SETBA , SEBAH)</option>\n" + "                                    <option value=\"Notam\">Notam</option>\n" + "                                    <option value=\"Construction isolée\">Construction isolée</option>\n" + "                                    <option value=\"Photo / Vidéo interdite\">Photo / Vidéo interdite</option>\n" + "                                </select>";
    var enfant2 = " <label for=\"altitude\">Altitude</label>\n" + "                                <input type=\"text\" class=\"form-control form-control-lg altitutde\">";
    var enfant3 = " <label for=\"specificite\">Spécificité (non obligatoire)</label>\n" + "            <input type=\"text\" class=\"form-control form-control-lg specificite\">";

    var _loop = function _loop(i) {
      ajoutContrainte[i].addEventListener('click', function () {
        for (var j = 0; j < nbreContrainte[i].value; j++) {
          var div1 = document.createElement('div');
          div1.classList.add('col-4');
          div1.innerHTML = enfant1;
          var div2 = document.createElement('div');
          div2.classList.add('col-4');
          div2.innerHTML = enfant2;
          var div3 = document.createElement('div');
          div3.innerHTML = enfant3;
          zoneAjout[i].appendChild(div1);
          zoneAjout[i].appendChild(div2);
          zoneAjout[i].appendChild(div3);
        }
      });
    };

    for (var i = 0; i < ajoutContrainte.length; i++) {
      _loop(i);
    }

    var _loop2 = function _loop2(_i) {
      validerContrainte[_i].addEventListener('click', function () {
        var type = document.querySelectorAll('.type');
        var altitude = document.querySelectorAll('.altitutde');
        var specificite = document.querySelectorAll('.specificite');

        for (var j = 0; j < altitude.length; j++) {
          envoie.push({
            alt: altitude[j].value,
            type: type[j].value,
            speci: specificite[j].value
          });
        }

        var confirmer = confirm('On envoie en BDD ?');

        if (confirmer) {
          fetch("/administrateur/ajoutContraintInter/" + validerContrainte[_i].dataset.inter, {
            method: 'POST',
            body: JSON.stringify({
              content: envoie
            })
          }).then(function () {
            alert("Les contraintes ont été enregistrées. La page va maintenant être actualisée");
            document.location.reload();
          });
        }
      });
    };

    for (var _i = 0; _i < validerContrainte.length; _i++) {
      _loop2(_i);
    }
  })();
}

if (document.title === "Voir contrainte") {
  (function () {
    var supprimer = document.querySelectorAll('.deleteContrainte');
    var zoneContr = document.querySelectorAll('.zoneContr');
    var zoneAlt = document.querySelectorAll('.zoneAlt');
    var zoneBtn = document.querySelectorAll('.zoneBtn');
    var zoneSpec = document.querySelectorAll('.zoneSpec');
    var typeM = document.querySelectorAll('.typeM');
    var altM = document.querySelectorAll('.altitutdeM');
    var specM = document.querySelectorAll('.specificiteM');
    var valider = document.querySelector('.btn-success');

    var _loop3 = function _loop3(i) {
      supprimer[i].addEventListener('click', function () {
        var confirmer = confirm("Souhaite tu supprimer cette contrainte de vol ?");

        if (confirmer) {
          fetch("/administrateur/supprimerContrainte/" + supprimer[i].dataset.contrainte, {
            method: 'GET'
          }).then(function () {
            alert('Contrainte de vol supprimée');
            document.querySelector('.zoneModif').removeChild(zoneBtn[i]);
            document.querySelector('.zoneModif').removeChild(zoneContr[i]);
            document.querySelector('.zoneModif').removeChild(zoneAlt[i]);
            document.querySelector('.zoneModif').removeChild(zoneSpec[i]);
          });
        }
      });
    };

    for (var i = 0; i < supprimer.length; i++) {
      _loop3(i);
    }

    valider.addEventListener('click', function () {
      var confirmer = confirm("On envoie en base de données ?");

      if (confirmer) {
        var envoie = [];
        var type = document.querySelectorAll('.type');
        var altitude = document.querySelectorAll('.altitutde');
        var specificite = document.querySelectorAll('.specificite');

        for (var j = 0; j < altitude.length; j++) {
          envoie.push({
            alt: altitude[j].value,
            type: type[j].value,
            speci: specificite[j].value
          });
          fetch("/administrateur/ajoutContraintInter/" + altitude[j].dataset.inter, {
            method: 'POST',
            body: JSON.stringify({
              content: envoie
            })
          }).then(function () {
            alert("La contrainte de vol a été enregistrée. La page va maintenant être actualisée");
            document.location.reload();
          });
        }
      }
    });

    var _loop4 = function _loop4(_i2) {
      typeM[_i2].addEventListener('change', function () {
        fetch('/administrateur/modifierContrainte/' + typeM[_i2].dataset.id, {
          method: 'POST',
          body: JSON.stringify({
            modif: typeM[_i2].dataset.type,
            valeur: typeM[_i2].value
          })
        });
      });

      altM[_i2].addEventListener('keyup', function () {
        fetch('/administrateur/modifierContrainte/' + altM[_i2].dataset.id, {
          method: 'POST',
          body: JSON.stringify({
            modif: altM[_i2].dataset.type,
            valeur: altM[_i2].value
          })
        });
      });

      specM[_i2].addEventListener('keyup', function () {
        fetch('/administrateur/modifierContrainte/' + specM[_i2].dataset.id, {
          method: 'POST',
          body: JSON.stringify({
            modif: specM[_i2].dataset.type,
            valeur: specM[_i2].value
          })
        });
      });
    };

    for (var _i2 = 0; _i2 < typeM.length; _i2++) {
      _loop4(_i2);
    }
  })();
}

/***/ }),

/***/ "./assets/js/creationZip.js":
/*!**********************************!*\
  !*** ./assets/js/creationZip.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

if (document.title == 'Création zip') {
  var p = document.querySelector('p');
  var id = document.querySelector('img').dataset.rapport;
  console.log(id);
  document.addEventListener('DOMContentLoaded', function () {
    fetch('/telechargerMedia', {
      method: 'POST',
      body: id,
      headers: new Headers()
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      p.innerHTML = 'La finalisation est terminée. Vous allez être redirigés automatiquement.';
      p.style.animationName = 'non';

      if (response['reponse'] === 'ok') {
        setTimeout(function () {
          document.location.href = response['route'];
        }, 6000);
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/creerDevis.js":
/*!*********************************!*\
  !*** ./assets/js/creerDevis.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Client = function Client(nom, prenom, entreprise, adresse, telephone, email, siret) {
  "use strict";

  _classCallCheck(this, Client);

  this.nom = nom;
  this.prenom = prenom;
  this.entreprise = entreprise;
  this.siret = siret;
  this.adresse = adresse;
  this.telephone = telephone;
  this.email = email;
};

var ligneTableau = function ligneTableau(reference, designation, quantite, prixUnitaire, tva, montantHt) {
  "use strict";

  _classCallCheck(this, ligneTableau);

  this.reference = reference;
  this.designation = designation;
  this.quantite = quantite;
  this.prixUnitaire = prixUnitaire;
  this.tva = tva;
  this.montantHt = montantHt;
};

if (document.title === 'Créer un devis') {
  var somme = function somme(objet) {
    var montantHt = 0;
    var montantTva = 0;
    var montantTTC = 0;

    for (var i = 0; i < objet.length; i++) {
      var element = objet[i];

      for (var key in objet[i]) {
        if (objet[i].hasOwnProperty(key)) {
          if (key === 'montantHt') {
            montantHt += parseFloat(element['montantHt']);
            montantTva += element['montantHt'] * element['tva'] / 100;
            totalHt.innerText = montantHt;
            totalTva.innerText = montantTva;
            totalTtc.innerText = montantTva + montantHt;

            var _final = parseFloat(montantTva) + parseFloat(montantHt);

            document.querySelector('.prix').innerHTML = " " + _final + " €";
            sommeFinale.value = _final;

            if (conditionP.value === "acompte") {
              document.querySelector('#montantTTCAcompte').value = pourcentageAcompte.value * _final / 100;
              document.querySelector('#montantTTCPaiement').value = pourcentageMontant.value * _final / 100;
            }
          }
        }
      }
    }
  };

  var devis = document.querySelectorAll('.devis');
  var clientDevis = document.querySelectorAll('.client');
  var enregistrerLigne = document.querySelector('.enregistrerLigne');
  var validerTitre = document.querySelector('.validerTitre');
  var titreDevis = document.querySelector('.titreDevis');
  var titre = document.querySelector('.titre');
  var table = document.querySelector('tbody');
  var sauverClient = document.querySelector('.sauverClient');
  var infoClient = document.querySelector('.infoClient');
  var boutonEnvoie = document.querySelector('.btn-lg');
  var totalHt = document.querySelector('.ht');
  var totalTva = document.querySelector('.tvaDevisF');
  var totalTtc = document.querySelector('.ttc');
  var conditionP = document.querySelector('#conditionP');
  var acompteDevis = document.querySelector('.acompteDevis');
  var ligneArray = [];
  var pourcentageAcompte = document.querySelector('#pourcentageAcompte');
  var pourcentageMontant = document.querySelector('#pourcentagePaiement');
  var sommeFinale = document.querySelector('input[type=hidden]');
  var listeCondition = document.querySelector('.listeCondition');
  totalHt.innerText = 0;
  totalTva.innerText = 0;
  totalTtc.innerText = 0;
  validerTitre.addEventListener('click', function () {
    titreDevis.innerHTML = '';
    var p = document.createElement('p');
    p.classList.add('h3');
    titreDevis.appendChild(p);
    p.innerHTML = titre.value;
  });
  devis[3].addEventListener('keyup', function () {
    if (devis[2].value !== "") {
      devis[5].value = Math.round(devis[3].value * devis[2].value * 100) / 100;
    } else {
      devis[5].value = 0;
    }
  });
  devis[2].addEventListener('keyup', function () {
    if (devis[3].value !== "") {
      devis[5].value = Math.round(devis[3].value * devis[2].value * 100) / 100;
    } else {
      devis[5].value = 0;
    }
  });
  enregistrerLigne.addEventListener('click', function () {
    var ligneDevis = new ligneTableau();
    var tr = document.createElement('tr');
    tr.classList.add("ligneDevis");

    for (var i = 0; i < devis.length; i++) {
      var td = document.createElement('td');
      td.classList.add('h6');
      td.innerText = devis[i].value;
      tr.appendChild(td);
    }

    ligneDevis.reference = devis[0].value;
    ligneDevis.designation = devis[1].value;
    ligneDevis.quantite = devis[2].value;
    ligneDevis.prixUnitaire = devis[3].value;
    ligneDevis.tva = devis[4].value;
    ligneDevis.montantHt = devis[5].value;
    ligneArray.push(ligneDevis);
    table.appendChild(tr);

    for (var _i = 0; _i < devis.length; _i++) {
      devis[_i].value = "";
    }

    var ligne = document.querySelectorAll(".ligneDevis");
    var devisM = document.querySelectorAll('.devisM');
    var valider = document.querySelector('.validerLigne');
    var supprimer = document.querySelector('.btnDelete');
    devisM[3].addEventListener('keyup', function () {
      if (devisM[2].value !== "") {
        devisM[5].value = Math.round(devisM[3].value * devisM[2].value * 100) / 100;
      } else {
        devisM[5].value = 0;
      }
    });
    devisM[2].addEventListener('keyup', function () {
      if (devisM[3].value !== "") {
        devisM[5].value = Math.round(devisM[3].value * devisM[2].value * 100) / 100;
      } else {
        devisM[5].value = 0;
      }
    });

    var _loop = function _loop(_i2) {
      ligne[_i2].addEventListener('click', function () {
        if (ligne.length === 1) {
          document.querySelector(".btnDelete").style.display = "none";
        } else {
          document.querySelector(".btnDelete").style.display = "block";
        }

        document.querySelector('.btnmodif').click();

        for (var j = 0; j < ligne[_i2].children.length; j++) {
          devisM[j].value = ligne[_i2].children[j].innerText;
        }

        valider.addEventListener('click', function () {
          for (var _j = 0; _j < ligne[_i2].children.length; _j++) {
            ligne[_i2].children[_j].innerText = devisM[_j].value;
          }

          ligneArray[_i2].reference = devisM[0].value;
          ligneArray[_i2].designation = devisM[1].value;
          ligneArray[_i2].quantite = devisM[2].value;
          ligneArray[_i2].prixUnitaire = devisM[3].value;
          ligneArray[_i2].tva = devisM[4].value;
          ligneArray[_i2].montantHt = devisM[5].value;
          somme(ligneArray);
          document.querySelector('.modalModifC').click();
        });
        supprimer.addEventListener('click', function () {
          var index = ligneArray.indexOf(ligneArray[_i2]);
          ligneArray.splice(0, index);

          try {
            table.removeChild(ligne[_i2]);
          } catch (e) {}

          somme(ligneArray);
          document.querySelector('.modalModifC').click();
        });
      });
    };

    for (var _i2 = 0; _i2 < ligne.length; _i2++) {
      _loop(_i2);
    }

    somme(ligneArray);
  });
  var client = new Client();
  sauverClient.addEventListener('click', function () {
    infoClient.innerHTML = '';

    for (var i = 0; i < clientDevis.length; i++) {
      var div = document.createElement('div');
      var span = document.createElement('span');
      span.innerHTML = clientDevis[i].value;
      div.appendChild(span);
      infoClient.appendChild(div);
    }

    client.nom = clientDevis[0].value;
    client.prenom = clientDevis[1].value;
    client.entreprise = clientDevis[2].value;
    client.siret = clientDevis[3].value;
    client.adresse = clientDevis[4].value;
    client.telephone = clientDevis[5].value;
    client.email = clientDevis[6].value;
  });
  var title;
  boutonEnvoie.addEventListener('click', function () {
    var typePaiement = [];

    if (titre.value === "") {
      title = "";
    } else {
      title = document.querySelector('.h3').innerHTML;
    }

    if (conditionP.value === "acompte") {
      typePaiement.push({
        condP: "acompte",
        acompte: document.querySelector('#montantTTCAcompte').value,
        comptant: document.querySelector('#montantTTCPaiement').value
      });
    }

    if (conditionP.value === "comptant") {
      typePaiement.push({
        condP: "comptant",
        acompte: "",
        comptant: sommeFinale.value
      });
    }

    if (conditionP.value === "30 jours") {
      typePaiement.push({
        condP: "30 jours",
        acompte: "",
        comptant: sommeFinale.value
      });
    }

    var corps = JSON.stringify({
      corpsTableau: ligneArray,
      corpsClient: client,
      ht: totalHt.innerHTML,
      TVA: totalTva.innerHTML,
      TTC: totalTtc.innerHTML,
      title: title,
      condition: typePaiement
    });
    fetch('/exportDevis', {
      method: 'POST',
      body: corps
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      window.open('/uploads/devis/' + reponse, '_blank');
    });
  });
  conditionP.addEventListener('change', function () {
    if (conditionP.value === "acompte") {
      acompteDevis.style.display = 'block';
    } else {
      acompteDevis.style.display = 'none';
    }
  });
  pourcentageAcompte.addEventListener('keyup', function () {
    pourcentageMontant.value = 100 - pourcentageAcompte.value;
    document.querySelector('#montantTTCAcompte').value = pourcentageAcompte.value * sommeFinale.value / 100;
    document.querySelector('#montantTTCPaiement').value = pourcentageMontant.value * sommeFinale.value / 100;
  });
  pourcentageMontant.addEventListener('keyup', function () {
    pourcentageAcompte.value = 100 - pourcentageMontant.value;
    document.querySelector('#montantTTCAcompte').value = pourcentageAcompte.value * sommeFinale.value / 100;
    document.querySelector('#montantTTCPaiement').value = pourcentageMontant.value * sommeFinale.value / 100;
  });
  document.querySelector('.validerConditions').addEventListener('click', function () {
    while (listeCondition.firstChild) {
      listeCondition.removeChild(listeCondition.lastChild);
    }

    if (conditionP.value === 'acompte') {
      var li1 = document.createElement('li');
      li1.innerText = "acompte : " + document.querySelector('#montantTTCAcompte').value + "€";
      var li2 = document.createElement('li');
      li2.innerText = "Paiement comptant : " + document.querySelector('#montantTTCPaiement').value + "€";
      listeCondition.appendChild(li1);
      listeCondition.appendChild(li2);
    }

    if (conditionP.value === "comptant") {
      var _li = document.createElement('li');

      _li.innerHTML = "100% soit :<span class=\"prix\">" + sommeFinale.value + " €</span><span class=\"type\"> Paiement comptant</span>";
      listeCondition.appendChild(_li);
    }

    if (conditionP.value === "30 jours") {
      var _li2 = document.createElement('li');

      _li2.innerHTML = "100% soit :<span class=\"prix\">" + sommeFinale.value + " €</span><span class=\"type\"> Paiement à 30 jours</span>";
      listeCondition.appendChild(_li2);
    }
  });
}

/***/ }),

/***/ "./assets/js/creerDiag.js":
/*!********************************!*\
  !*** ./assets/js/creerDiag.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Créer un diagnostic') {
  (function () {
    var trueFile = document.querySelector('#docDiag');
    var falseButton = document.querySelector('.boutonRemplace');
    falseButton.addEventListener('click', function () {
      trueFile.click();
      trueFile.addEventListener('change', function () {
        falseButton.innerHTML = trueFile.files[0]['name'];
      });
    });
    var validite = document.querySelector('#date');
    var type = document.querySelector('.nomDiag');
    var save = document.querySelector('.btn-primary');
    var informe;

    if (document.querySelector('#non').checked == true) {
      informe = false;
    } else {
      informe = true;
    }

    save.addEventListener('click', function () {
      if (trueFile && validite.value && type.value) {
        var form = new FormData();
        form.append('dateFin', validite.value);
        form.append('typeDiag', type.value);
        form.append('document', trueFile.files[0]);
        form.append('informe', informe);
        form.append('idActif', document.querySelector('#idActif').value);
        fetch("/institution/saveDiag", {
          method: 'POST',
          body: form
        }).then(function () {
          document.location.reload();
        });
      }
    });
    var chkInforme = document.querySelectorAll('.informeDiag');
    console.log(chkInforme);

    var _loop = function _loop(i) {
      chkInforme[i].addEventListener('change', function () {
        fetch('/institution/changeInforme', {
          method: 'POST',
          body: chkInforme[i].value
        });
      });
    };

    for (var i = 0; i < chkInforme.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/creerFacture.js":
/*!***********************************!*\
  !*** ./assets/js/creerFacture.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (document.title == 'Création de facture') {
  var somme = function somme(objet) {
    var montantHt = 0;
    var montantTva = 0;
    var montantTTC = 0;

    for (var i = 0; i < objet.length; i++) {
      var element = objet[i];

      for (var key in objet[i]) {
        if (objet[i].hasOwnProperty(key)) {
          if (key === 'montantHt') {
            montantHt += parseFloat(element['montantHt']);
            montantTva += element['montantHt'] * element['tva'] / 100;
            totalHt.innerText = montantHt;
            totalTva.innerText = montantTva;
            totalTtc.innerText = montantTva + montantHt;

            var _final = parseFloat(montantTva) + parseFloat(montantHt);

            document.querySelector('.prix').innerHTML = " " + _final + " €";
            sommeFinale.value = _final;

            if (conditionP.value === "acompte") {
              document.querySelector('#montantTTCAcompte').value = pourcentageAcompte.value * _final / 100;
              document.querySelector('#montantTTCPaiement').value = pourcentageMontant.value * _final / 100;
            }
          }
        }
      }
    }
  };

  var Client = function Client(nom, prenom, entreprise, adresse, telephone, email, siret) {
    "use strict";

    _classCallCheck(this, Client);

    this.nom = nom;
    this.prenom = prenom;
    this.entreprise = entreprise;
    this.adresse = adresse;
    this.telephone = telephone;
    this.email = email;
    this.siret = siret;
  };

  var Designation = function Designation(designation1, designation2, designation3, designation4, designation5, designation6) {
    "use strict";

    _classCallCheck(this, Designation);

    this.designation1 = designation1;
    this.designation2 = designation2;
    this.designation3 = designation3;
    this.designation4 = designation4;
    this.designation5 = designation5;
    this.designation6 = designation6;
  };

  var ligneTableau = function ligneTableau(reference, intitule, quantite, prixUnitaire, tva, montantHt) {
    "use strict";

    _classCallCheck(this, ligneTableau);

    this.reference = reference;
    this.intitule = intitule;
    this.quantite = quantite;
    this.prixUnitaire = prixUnitaire;
    this.tva = tva;
    this.montantHt = montantHt;
  };

  var facture = document.querySelectorAll('.facture');
  var clientFacture = document.querySelectorAll('.client');
  var enregistrerLigne = document.querySelector('.enregistrerLigne');
  var validerTitre = document.querySelector('.validerTitre');
  var titreDevis = document.querySelector('.titreDevis');
  var titre = document.querySelector('.titre');
  var table = document.querySelector('tbody');
  var sauverClient = document.querySelector('.sauverClient');
  var infoClient = document.querySelector('.infoClient');
  var boutonEnvoie = document.querySelector('.btn-lg');
  var totalHt = document.querySelector('.ht');
  var totalTva = document.querySelector('.tvaDevisF');
  var totalTtc = document.querySelector('.ttc');
  var caseDesignation = document.querySelectorAll('.designation');
  var ligneArray = [];
  var conditionP = document.querySelector('#conditionP');
  var acompteDevis = document.querySelector('.acompteDevis');
  var pourcentageAcompte = document.querySelector('#pourcentageAcompte');
  var pourcentageMontant = document.querySelector('#pourcentagePaiement');
  var sommeFinale = document.querySelector('input[type=hidden]');
  var listeCondition = document.querySelector('.listeCondition');
  totalHt.innerText = 0;
  totalTva.innerText = 0;
  totalTtc.innerText = 0;
  validerTitre.addEventListener('click', function () {
    titreDevis.innerHTML = '';
    var p = document.createElement('p');
    p.classList.add('h3');
    titreDevis.appendChild(p);
    p.innerHTML = titre.value;
  });
  enregistrerLigne.addEventListener('click', function () {
    var ligneFacture = new ligneTableau();
    var designation = new Designation();
    var tr = document.createElement('tr');
    tr.classList.add('ligneFacture');
    designation.designation1 = caseDesignation[0].value;
    designation.designation2 = caseDesignation[1].value;
    designation.designation3 = caseDesignation[2].value;
    designation.designation4 = caseDesignation[3].value;
    designation.designation5 = caseDesignation[4].value;
    designation.designation6 = caseDesignation[5].value;

    for (var i = 0; i < facture.length; i++) {
      var td = document.createElement('td');
      td.classList.add('h6');
      tr.appendChild(td);

      if (i == 1) {
        for (var k = 0; k < caseDesignation.length; k++) {
          if (caseDesignation[i] != null) {
            var p = document.createElement('p');
            p.classList.add('h6');
            p.innerHTML = caseDesignation[k].value;
            td.appendChild(p);
          }
        }
      } else {
        td.innerHTML = facture[i].value;
      }
    }

    ligneFacture.reference = facture[0].value;
    ligneFacture.intitule = designation;
    ligneFacture.quantite = facture[2].value;
    ligneFacture.prixUnitaire = facture[3].value;
    ligneFacture.tva = facture[4].value;
    ligneFacture.montantHt = facture[5].value;
    ligneArray.push(ligneFacture);
    table.appendChild(tr);
    somme(ligneArray);

    for (var _i = 0; _i < facture.length; _i++) {
      facture[_i].value = "";
    }

    for (var _i2 = 0; _i2 < caseDesignation.length; _i2++) {
      caseDesignation[_i2].value = "";
    }

    var ligneFact = document.querySelectorAll('.ligneFacture');
    var designationM = document.querySelectorAll('.designationM');
    var factM = document.querySelectorAll('.factureM');
    var valider = document.querySelector('.validerLigne');
    var supprimer = document.querySelector('.effacerLigne');
    factM[1].addEventListener('keyup', function () {
      factM[4].value = Math.round(factM[1].value * factM[2].value * 100) / 100;
    });
    factM[2].addEventListener('keyup', function () {
      factM[4].value = Math.round(factM[1].value * factM[2].value * 100) / 100;
    });

    var _loop = function _loop(_i3) {
      ligneFact[_i3].addEventListener('click', function () {
        document.querySelector('.btnModifFact').click();
        factM[0].value = ligneArray[_i3].reference;
        factM[1].value = ligneArray[_i3].quantite;
        factM[2].value = ligneArray[_i3].prixUnitaire;
        factM[3].value = ligneArray[_i3].tva;
        factM[4].value = ligneArray[_i3].montantHt;
        designationM[0].value = ligneArray[_i3].intitule.designation1;
        designationM[1].value = ligneArray[_i3].intitule.designation2;
        designationM[2].value = ligneArray[_i3].intitule.designation3;
        designationM[3].value = ligneArray[_i3].intitule.designation4;
        designationM[4].value = ligneArray[_i3].intitule.designation5;
        designationM[5].value = ligneArray[_i3].intitule.designation6;
        valider.addEventListener('click', function () {
          while (ligneFact[_i3].children[1].firstChild) {
            ligneFact[_i3].children[1].removeChild(ligneFact[_i3].children[1].lastChild);
          }

          ligneFact[_i3].children[0].innerText = factM[0].value;

          for (var j = 0; j < designationM.length; j++) {
            if (designationM[j].value !== "") {
              var _p = document.createElement("p");

              _p.classList.add("h6");

              _p.innerHTML = designationM[j].value;

              ligneFact[_i3].children[1].appendChild(_p);
            }
          }

          ligneFact[_i3].children[2].innerText = factM[1].value;
          ligneFact[_i3].children[3].innerText = factM[2].value;
          ligneFact[_i3].children[4].innerText = factM[3].value;
          ligneFact[_i3].children[5].innerText = factM[4].value;
          ligneArray[_i3].reference = factM[0].value;
          ligneArray[_i3].quantite = factM[1].value;
          ligneArray[_i3].prixUnitaire = factM[2].value;
          ligneArray[_i3].tva = factM[3].value;
          ligneArray[_i3].montantHt = factM[4].value;
          ligneArray[_i3].intitule.designation1 = designationM[0].value;
          ligneArray[_i3].intitule.designation2 = designationM[1].value;
          ligneArray[_i3].intitule.designation3 = designationM[2].value;
          ligneArray[_i3].intitule.designation4 = designationM[3].value;
          ligneArray[_i3].intitule.designation5 = designationM[4].value;
          ligneArray[_i3].intitule.designation6 = designationM[5].value;
          somme(ligneArray);
          document.querySelector('.closeModifFact').click();
        });
        supprimer.addEventListener('click', function () {
          try {
            table.removeChild(ligneFact[_i3]);
          } catch (e) {}

          var index = ligneArray.indexOf(ligneArray[_i3]);
          ligneArray.splice(0, index);
          somme(ligneArray);
        });
      });
    };

    for (var _i3 = 0; _i3 < ligneFact.length; _i3++) {
      _loop(_i3);
    }
  });
  facture[2].addEventListener('keyup', function () {
    facture[5].value = Math.round(facture[2].value * facture[3].value * 100) / 100;
  });
  facture[3].addEventListener('keyup', function () {
    facture[5].value = Math.round(facture[2].value * facture[3].value * 100) / 100;
  });
  var client = new Client();
  sauverClient.addEventListener('click', function () {
    infoClient.innerHTML = '';

    for (var i = 0; i < clientFacture.length; i++) {
      var div = document.createElement('div');
      div.innerHTML = clientFacture[i].value;
      infoClient.appendChild(div);
    }

    client.nom = clientFacture[0].value;
    client.prenom = clientFacture[1].value;
    client.entreprise = clientFacture[2].value;
    client.siret = clientFacture[3].value;
    client.adresse = clientFacture[4].value;
    client.telephone = clientFacture[5].value;
    client.email = clientFacture[6].value;
  });
  boutonEnvoie.addEventListener('click', function () {
    var typePaiement = [];

    if (conditionP.value === "acompte") {
      typePaiement.push({
        condP: "acompte",
        acompte: document.querySelector('#montantTTCAcompte').value,
        comptant: document.querySelector('#montantTTCPaiement').value
      });
    }

    if (conditionP.value === "comptant") {
      typePaiement.push({
        condP: "comptant",
        acompte: "",
        comptant: sommeFinale.value
      });
    }

    if (conditionP.value === "30 jours") {
      typePaiement.push({
        condP: "30 jours",
        acompte: "",
        comptant: sommeFinale.value
      });
    }

    var corps = JSON.stringify({
      corpsTableau: ligneArray,
      corpsClient: client,
      ht: totalHt.innerHTML,
      TVA: totalTva.innerHTML,
      TTC: totalTtc.innerHTML,
      title: titre.value,
      id: boutonEnvoie.dataset.salarie,
      condition: typePaiement
    });
    fetch('/exportFacture', {
      method: 'POST',
      body: corps
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      window.open('/uploads/factureEnt/' + reponse, '_blank');
    });
  });
  conditionP.addEventListener('change', function () {
    if (conditionP.value === "acompte") {
      acompteDevis.style.display = 'block';
    } else {
      acompteDevis.style.display = 'none';
    }
  });
  pourcentageAcompte.addEventListener('keyup', function () {
    pourcentageMontant.value = 100 - pourcentageAcompte.value;
    document.querySelector('#montantTTCAcompte').value = pourcentageAcompte.value * sommeFinale.value / 100;
    document.querySelector('#montantTTCPaiement').value = pourcentageMontant.value * sommeFinale.value / 100;
  });
  pourcentageMontant.addEventListener('keyup', function () {
    pourcentageAcompte.value = 100 - pourcentageMontant.value;
    document.querySelector('#montantTTCAcompte').value = pourcentageAcompte.value * sommeFinale.value / 100;
    document.querySelector('#montantTTCPaiement').value = pourcentageMontant.value * sommeFinale.value / 100;
  });
  console.log(document.querySelector('#montantTTCPaiement'));
  document.querySelector('.validerConditions').addEventListener('click', function () {
    while (listeCondition.firstChild) {
      listeCondition.removeChild(listeCondition.lastChild);
    }

    if (conditionP.value === 'acompte') {
      var li1 = document.createElement('li');
      li1.innerText = "acompte : " + document.querySelector('#montantTTCAcompte').value + "€";
      var li2 = document.createElement('li');
      li2.innerText = "Paiement comptant : " + document.querySelector('#montantTTCPaiement').value + "€";
      listeCondition.appendChild(li1);
      listeCondition.appendChild(li2);
    }

    if (conditionP.value === "comptant") {
      var _li = document.createElement('li');

      _li.innerHTML = "100% soit :<span class=\"prix\">" + sommeFinale.value + " €</span><span class=\"type\"> Paiement comptant</span>";
      listeCondition.appendChild(_li);
    }

    if (conditionP.value === "30 jours") {
      var _li2 = document.createElement('li');

      _li2.innerHTML = "100% soit :<span class=\"prix\">" + sommeFinale.value + " €</span><span class=\"type\"> Paiement à 30 jours</span>";
      listeCondition.appendChild(_li2);
    }
  });
}

/***/ }),

/***/ "./assets/js/dateInter.js":
/*!********************************!*\
  !*** ./assets/js/dateInter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Mes demandes en cours") {
  (function () {
    var valider = document.querySelectorAll('.btn-primary');
    var date = document.querySelectorAll('.dateInter');
    var message = document.querySelectorAll('.message');

    var _loop = function _loop(i) {
      date[i].addEventListener('change', function () {
        var dateInter = Date.parse(date[i].value);
        fetch('/changerDateInter/' + valider[i].dataset.id, {
          method: 'POST',
          body: dateInter
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          if (response === 0) {
            message[i].innerHTML = "Il n'y a pas d'OTD disponible pour cette date. Essayez une autre date";
          } else {
            message[i].innerHTML = 'Vous avez ' + response + ' OTD(s) disponible(s) pour cette date';
          }
        });
      });
      valider[i].addEventListener('click', function () {
        var dateInter = Date.parse(date[i].value);
        fetch('/validerDateInter/' + valider[i].dataset.id, {
          method: 'POST',
          body: dateInter
        }).then(function () {//document.location.reload();
        });
      });
    };

    for (var i = 0; i < valider.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/dateInterDiag.js":
/*!************************************!*\
  !*** ./assets/js/dateInterDiag.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var moment_moment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! moment/moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment_moment__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(moment_moment__WEBPACK_IMPORTED_MODULE_5__);







if (document.title === "Diagnostics en cours") {
  var btnModals = document.querySelectorAll('.btn-maincolor');
  var heure = document.querySelectorAll('input[type=time]');
  var listeInter = document.querySelectorAll('.listeInter');
  var validerHeure = document.querySelectorAll('.validerHeure');
  var heureChoisie;
  var idInter;
  btnModals.forEach(function (btnModal, index) {
    var valide = true;
    btnModal.addEventListener('click', function () {
      idInter = btnModal.dataset.inter;
      fetch("/retrouverInterDate", {
        body: idInter,
        method: 'POST'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        response.listeInter.forEach(function (reponse, key) {
          var li = document.createElement('li');
          li.classList.add("list-group-item");
          li.innerText = "Intervention n°" + (key + 1) + " prévue de " + reponse.dateDebut + " à " + reponse.dateFin;
          listeInter[index].appendChild(li);
        });
        heure[index].addEventListener('change', function () {
          heureChoisie = Date.parse(btnModal.dataset.date + ' ' + heure[index].value);
          var duree = response.duree * 60 * 1000;
          var heureFin = heureChoisie + duree;
          var limiteDebut = Date.parse(btnModal.dataset.date + " 8:00");
          var limiteFin = Date.parse(btnModal.dataset.date + " 19:00");
          response.listeInter.forEach(function (dateInter, i) {
            if (heureChoisie <= limiteDebut || heureFin >= limiteFin || dateInter.debut * 1000 < heureChoisie || heureChoisie < dateInter.fin * 1000) {
              heure[index].value = "";
              alert("Attention l'horaire ne peut pas être validé");
            }
          });
        });
      });
    });
  });
  validerHeure.forEach(function (btn, i) {
    btn.addEventListener('click', function () {
      fetch("/validerHeure", {
        method: 'post',
        body: JSON.stringify({
          id: idInter,
          temps: heureChoisie
        })
      }).then(function () {
        alert("Votre heure de rendez vous a bien été enregistrée.");
        document.location.reload();
      });
    });
  });
}

/***/ }),

/***/ "./assets/js/demandeur.js":
/*!********************************!*\
  !*** ./assets/js/demandeur.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title == 'Mes infos') {}

/***/ }),

/***/ "./assets/js/departInter.js":
/*!**********************************!*\
  !*** ./assets/js/departInter.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

if (document.title == 'finalisation') {
  var debut = document.getElementById('depart_debut');
  var fin = document.getElementById('depart_depart');
  var bouton = document.getElementById('valider');
  var dateDebut = Date.parse(debut.value);
  fin.addEventListener('change', function () {
    var dateFin = Date.parse(fin.value);

    if (dateDebut > dateFin) {
      fin.style.border = "red solid 1px";
      valider.style.display = "none";
    } else {
      fin.style.border = "none";
      valider.style.display = "block";
    }
  });
}

/***/ }),

/***/ "./assets/js/devis.js":
/*!****************************!*\
  !*** ./assets/js/devis.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Mes factures') {
  var devis = function devis(mois) {
    var premier = new Date(mois.getFullYear(), mois.getMonth(), 1);
    var lastDay = new Date(mois.getFullYear(), mois.getMonth() + 1, 0);
    var post = JSON.stringify({
      debut: premier.toLocaleString('fr-Fr', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      }),
      fin: lastDay.toLocaleString('fr-FR', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      })
    });
    fetch('/recupererDevis', {
      method: 'POST',
      body: post
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      while (zoneDevis.firstChild) {
        zoneDevis.removeChild(zoneDevis.lastChild);
      }

      for (var i = 0; i < reponse.length; i++) {
        var div = document.createElement('div');
        div.classList.add('col-sm-2');
        var img = document.createElement('img');
        img.src = '/css/css_site/img/fichier.png';
        var a = document.createElement('a');
        a.href = '/uploads/devis/' + reponse[i]['nom'];
        a.target = '_blank';
        a.innerText = reponse[i]['nom'];
        a.appendChild(img);
        div.appendChild(a);
        zoneDevis.appendChild(div);
      }
    });
  };

  var date = new Date();
  var zoneDevis = document.querySelector('.zoneDevis');
  var mois = document.querySelector('#moisDevis');
  var suivant = document.querySelector('#suivantDevis');
  var precedent = document.querySelector('#precedentDevis');
  document.addEventListener('DOMContentLoaded', function () {
    devis(date);
    var dateloc = date.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    mois.innerText = dateloc;
  });
  suivant.addEventListener('click', function () {
    var moisSuivant = new Date(date.setMonth(date.getMonth() + 1));
    var dateloc = date.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    mois.innerText = dateloc;
    devis(moisSuivant);
  });
  precedent.addEventListener('click', function () {
    var moisPrecedent = new Date(date.setMonth(date.getMonth() - 1));
    var dateloc = date.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    mois.innerText = dateloc;
    devis(moisPrecedent);
  });
}

/***/ }),

/***/ "./assets/js/dossier.js":
/*!******************************!*\
  !*** ./assets/js/dossier.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Sous dossier') {
  var typeDossier = document.querySelector('#typeDossier');
  var interDrone = document.querySelectorAll('.interDrone');
  var typeInter = document.querySelector('#typeInter');
  var listeinter = document.querySelector('#listeinter');
  var diagTech = document.querySelectorAll('.diagTechnique');
  var btnGenral = document.querySelector('.dossierGeneral');
  var dtech = document.querySelector('#diagTech');
  console.log(diagTech);
  var nom;
  var valider = document.querySelector('.btn-primary');
  var idDossier = document.querySelector('.btn-maincolor').dataset.id;
  typeDossier.addEventListener('change', function () {
    if (typeDossier.value === 'Intervention drone') {
      interDrone[0].style.display = 'block';
      interDrone[1].style.display = 'block';
    } else if (typeDossier.value === 'Diagnostic technique') {
      for (var i = 0; i < diagTech.length; i++) {
        diagTech[i].style.display = 'block';
      }
    } else {
      interDrone[0].style.display = 'none';
      interDrone[1].style.display = 'none';

      for (var _i = 0; _i < diagTech.length; _i++) {
        diagTech[_i].style.display = 'none';
      }
    }
  });
  listeinter.addEventListener('change', function () {
    fetch('/selectTypeInter', {
      method: 'POST',
      body: listeinter.value
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      while (typeInter.firstChild) {
        typeInter.removeChild(typeInter.lastChild);
      }

      for (var i = 0; i < response.length; i++) {
        var option = document.createElement('option');
        option.innerText = response[i].nom;
        option.value = response[i].nom;
        typeInter.appendChild(option);
      }
    });
  });
  valider.addEventListener('click', function () {
    if (typeDossier.value === 'Intervention drone') {
      nom = typeDossier.value + '-' + listeinter.options[listeinter.selectedIndex].getAttribute('data-nom') + '-' + typeInter.value;
    } else if (typeDossier.value === 'Diagnostic technique') {
      nom = typeDossier.value + '-' + dtech.value;
    } else {
      nom = typeDossier.value;
    }

    fetch('/institution/creerSousDossier/' + idDossier, {
      method: 'POST',
      body: nom
    }).then(function () {
      document.location.reload();
    });
  });
  btnGenral.addEventListener('click', function () {
    fetch('/createDossierGenarale/' + btnGenral.dataset.id, {
      method: 'GET'
    }).then(function () {
      document.location.reload();
    });
  });
}

/***/ }),

/***/ "./assets/js/dossierAo.js":
/*!********************************!*\
  !*** ./assets/js/dossierAo.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dropzone */ "./node_modules/dropzone/dist/dropzone.js");
/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dropzone__WEBPACK_IMPORTED_MODULE_2__);




if (document.title == 'Dossier reponse') {
  (function () {
    var drop = document.querySelector('#dropzone');
    var arrayResponse = [];
    var zoneDrop = "<div class='dz-preview dz-file-preview fichier'>\n" + "  <div class='dz-details'>\n" + "\n" + "    <figure>\n" + "      <img data-dz-thumbnail src='/css/css_site/images/fichier104.png'/>\n" + "      <figcaption  class='dz-filename fileIndication' data-dz-name></figcaption>\n" + "      <figcaption class='dz-size fileIndication' data-dz-size></figcaption>\n" + "    </figure>\n" + "\n" + "  </div>\n" + "  <div class='dz-progress'><span class='dz-upload up' data-dz-uploadprogress></span></div>\n" + "  <span class='dz-success-mark'></span>\n" + "  <div class='dz-error-message mess'><span data-dz-errormessage></span></div>\n" + "</div>";
    var dropzone = new dropzone__WEBPACK_IMPORTED_MODULE_2___default.a(drop, {
      url: '/entreprise/dossierAo/' + drop.dataset.id,
      previewTemplate: zoneDrop,
      parallelUploads: 100,
      acceptedFiles: 'application/pdf,application/zip,image/*',
      addRemoveLinks: true,
      dictCancelUpload: "",
      dictRemoveFile: "<img src='/css/css_site/images/supprimer.png'>",
      success: function success(file, response) {
        file.previewElement.lastChild.dataset.dzRemove = "/entreprise/supprimerDossier/" + response;
      },
      removedfile: function removedfile(file) {
        fetch(file.previewElement.lastChild.dataset.dzRemove, {
          method: 'GET'
        }).then(function () {
          var _ref;

          return (_ref = file.previewElement) != null ? _ref.parentNode.removeChild(file.previewElement) : void 0;
        });
      }
    });
    var effacer = document.querySelectorAll('.delete');

    var _loop = function _loop(i) {
      effacer[i].addEventListener('click', function () {
        fetch('/entreprise/dossierAo/' + effacer[i].dataset.id, {
          method: 'GET'
        }).then(function () {
          document.location.reload();
        });
      });
    };

    for (var i = 0; i < effacer.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/dossierGc.js":
/*!********************************!*\
  !*** ./assets/js/dossierGc.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title === 'Ajout type de dossier') {
  /*let input = document.querySelectorAll('input')
  let valider = document.querySelector('.btn-primary')
  let type =[];
  valider.addEventListener('click',()=>{
        for (let i = 0; i < input.length; i++) {
          if (input[i].checked){
              type.push(input[i].value)
          }
      }
      fetch('/institution/creerType-'+valider.dataset.id,{
          method:'POST',
          body : JSON.stringify({type})
      })
          .then(()=>{
              document.location.reload()
          })
  })*/
}

/***/ }),

/***/ "./assets/js/drone.js":
/*!****************************!*\
  !*** ./assets/js/drone.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title == 'Phase 5 enrigister vos drones') {
  var boite = document.querySelector("#choice");
  var form = document.querySelector('form');
  var a = document.createElement('a');
  var button = document.querySelector('.bouton');
  boite.addEventListener('change', function () {
    if (boite.checked) {
      form.style.display = 'none';
      a.classList.add('btn');
      a.classList.add('btn-maincolor2');
      a.href = '/banqueAssurance';
      a.innerHTML = 'Etape suivante';
      button.appendChild(a);
    } else {
      button.removeChild(a);
      form.style.display = 'block';
    }
  });
}

/***/ }),

/***/ "./assets/js/droneInter.js":
/*!*********************************!*\
  !*** ./assets/js/droneInter.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Détails de l'intervention") {
  var validerPrix = document.querySelector('.valid');
  var prixProp = document.querySelector('.prix');
  var message = document.querySelector('.message');
  var ouvrirModale = document.querySelector('.openModal');
  var budgetMax = document.querySelector('.budgetMax');
  var intervention = document.querySelector('.inter');
  var carte = document.querySelector('.carte');
  var map;
  var idInter = intervention.value;
  fetch('/droneInter', {
    method: 'POST',
    body: idInter
  }).then(function (reponse) {
    return reponse.json();
  }).then(function (reponse) {
    map = L.map(carte, {
      center: reponse,
      zoom: 12,
      attributionControl: false,
      zoomControl: false,
      scrollWheelZoom: false,
      keyboard: false,
      doubleClickZoom: false,
      dragging: false
    });
    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
      maxZoom: 18,
      id: 'mapbox/streets-v11',
      tileSize: 512,
      zoomOffset: -1,
      accessToken: 'pk.eyJ1IjoieG1hdGhpZXUxMyIsImEiOiJja2N1aHU2eTAyOGZ2MnJsZjk1bjR0ZHE0In0.-N1CSInz77-O6xViA43KQw'
    }).addTo(map);
    L.marker(reponse, {
      title: "Lieu de votre intervention"
    }).addTo(map);
  });
  prixProp.addEventListener('keyup', function () {
    if (parseFloat(prixProp.value) > parseInt(budgetMax.value)) {
      prixProp.value = budgetMax.value;
    }
  });
  var dateInter = document.querySelector("#dateInter");
  validerPrix.addEventListener('click', function () {
    if (prixProp.value !== "") {
      var confirmer = confirm("Souhaiter vous valider votre proposition tarifaire ?");

      if (confirm) {
        var corps = JSON.stringify({
          idProp: prixProp.dataset.prop,
          prix: prixProp.value,
          dateInter: new Date(dateInter.value).getTime() / 1000
        });
        fetch('/validerPrix', {
          method: 'POST',
          body: corps
        }).then(function (reponse) {
          return reponse.json();
        }).then(function (reponse) {
          ouvrirModale.click();
          message.innerText = reponse;
        });
      }
    } else {
      alert("Veuillez indiquer un prix.");
    }
  });
}

/***/ }),

/***/ "./assets/js/enSavoirPlus.js":
/*!***********************************!*\
  !*** ./assets/js/enSavoirPlus.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title == 'Nos abonnements en details') {
  var type = document.querySelector('.type').dataset.abonnement;
  var collaspe1 = document.querySelector('#collapse1_header > h5>a');
  var collaspe2 = document.querySelector('#collapse2_header > h5>a');
  var collaspe3 = document.querySelector('#collapse3_header > h5>a');
  var collaspe4 = document.querySelector('#collapse4_header > h5>a');

  switch (type) {
    case 'So':
      document.querySelector('#collapse1').classList.add('show');
      collaspe1.setAttribute('aria-expanded', true);
      document.location.href = '#collapse1';
      break;

    case 'Classic':
      document.querySelector('#collapse2').classList.add('show');
      collaspe2.setAttribute('aria-expanded', true);
      document.location.href = '#collapse2';
      break;

    case 'Premium':
      document.querySelector('#collapse3').classList.add('show');
      collaspe3.setAttribute('aria-expanded', true);
      document.location.href = '#collapse3';
      break;

    case 'Infinite':
      document.querySelector('#collapse4').classList.add('show');
      collaspe4.setAttribute('aria-expanded', true);
      document.location.href = '#collapse4';
      break;

    default:
      break;
  }
}

if (document.title == 'Type') {
  var _type = document.querySelector('.type').dataset.type;
  document.querySelector('#' + _type).classList.add('show');
  document.querySelector('#' + _type + '_header>h5>a').setAttribute('aria-expanded', true);
  document.location.href = '#' + _type;
}

/***/ }),

/***/ "./assets/js/enregistrerPaiement.js":
/*!******************************************!*\
  !*** ./assets/js/enregistrerPaiement.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

if (document.title == 'Recevoir un paiement') {
  var bouton = document.querySelector('.btn-outline-maincolor');
  var message = document.querySelector('.messageReussi');
  var p = document.createElement('p');
  p.classList.add('h6');
  p.innerHTML = "La demande de paiement est bien enregistrer. Vous allez être redirigé vers votre page d'accueil";
  bouton.addEventListener('click', function () {
    var contenu = JSON.stringify({
      montant: document.querySelector('.montant').value,
      email: document.querySelector('.email').value,
      profil: bouton.dataset.profil
    });
    fetch('/enregistrerPaiement', {
      method: 'POST',
      body: contenu
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      alert("La demande de paiement est bien enregistrée. Vous allez être redirigé vers votre page d'accueil");
      setTimeout(function () {
        document.location.href = reponse['home'];
      }, 2000);
    });
  });
}

/***/ }),

/***/ "./assets/js/entreprise.js":
/*!*********************************!*\
  !*** ./assets/js/entreprise.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

if (document.title === 'Inscription entreprise') {
  var tva = document.getElementsByName("entreprise[siretTva][assujeti]");
  document.addEventListener('DOMContentLoaded', function () {
    var bouton = document.querySelector('#logo');
    var logo = document.querySelector('#entreprise_logo');
    bouton.addEventListener('click', function () {
      logo.click();
      logo.addEventListener('change', function () {
        bouton.innerHTML = logo.value.replace(/^.*\\/, "");
      });
    });

    var _loop = function _loop(i) {
      tva[i].addEventListener('change', function () {
        if (tva[i].value === '0') {
          document.querySelector('.tva').style.display = 'none';
          document.querySelector('#entreprise_siretTva_tva').removeAttribute('required');
          document.querySelector('#entreprise_siretTva_tva').setAttribute('disabled', 'disabled');
          document.querySelector('#entreprise_siretTva_tva').value = "";
        } else {
          document.querySelector('.tva').style.display = 'block';
          document.querySelector('#entreprise_siretTva_tva').setAttribute('required', 'required');
          document.querySelector('#entreprise_siretTva_tva').removeAttribute('disabled');
        }
      });
    };

    for (var i = 0; i < tva.length; i++) {
      _loop(i);
    }
  });
  var siret = document.querySelector('#entreprise_siretTva_siret');
  siret.addEventListener('keyup', function () {
    if (siret.value.length === 14) {
      fetch('/entreprise/siret', {
        method: 'POST',
        body: siret.value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('#entreprise_adresse_numero').value = response.adresse.numero;
        document.querySelector('#entreprise_adresse_nomVoie').value = response.adresse.nomVoie;
        document.querySelector('#entreprise_adresse_codePostal').value = response.adresse.codePostal;
        document.querySelector('#entreprise_adresse_ville').value = response.adresse.ville;
        document.querySelector('#entreprise_siretTva_tva').value = response.TVA;
      });
    }
  });
}

if (document.title === "Modifier mes informations") {
  console.log('ok');
  var bouton = document.querySelector('#logo');
  var realInput = document.querySelector('.custom-file-input');
  bouton.addEventListener('click', function () {
    realInput.click();
    realInput.addEventListener('change', function () {
      bouton.innerHTML = realInput.value.replace(/^.*\\/, "");
    });
  });
}

/***/ }),

/***/ "./assets/js/envoieMailAdmin.js":
/*!**************************************!*\
  !*** ./assets/js/envoieMailAdmin.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Envoie mail Otd") {
  var paragraphe = [];
  var text = document.querySelectorAll('.paragraphe');
  var valider = document.querySelector('.btn-success');
  var titreMail = document.querySelector('#titre');
  var codePromo = document.querySelector('#codePromo');
  var ancienne = document.querySelector('#ancienne');
  var description = document.querySelector('.description');
  ancienne.addEventListener('change', function () {
    fetch('/administrateur/recupListeMail/' + ancienne.value, {
      method: 'GET'
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      console.log(response);
      titreMail.value = response.titre;
      codePromo.value = response.codePromo;

      for (var i = 0; i < response.contenu.length; i++) {
        text[i].value = response.contenu[i];
      }
    });
  });
  valider.addEventListener('click', function () {
    for (var i = 0; i < text.length; i++) {
      if (text[i].value !== "") {
        paragraphe.push(text[i].value);
      }
    }

    var confirmation = confirm("On envoie les mails ?");

    if (confirmation && description.value !== "") {
      document.querySelector('.dialogAttente').style.display = 'block';
      fetch("/administrateur/mailPartOtd", {
        method: 'POST',
        body: JSON.stringify({
          para: paragraphe,
          titre: titreMail.value,
          code: codePromo.value,
          description: description.value
        })
      }).then(function () {
        paragraphe = [];
        alert("Les mails sont partis");
        document.querySelector('.dialogAttente').style.display = 'none';
      });
    } else {
      alert("Des champs ne sont pas correctement remplis");
    }
  });
}

if (document.title === "Autre envoie") {
  var _valider = document.querySelector('.btn-success');

  var cible = document.querySelector('#cible');

  var _codePromo = document.querySelector('#codePromo');

  var titre = document.querySelector('#titre');
  var contenu = document.querySelectorAll('.paragraphe');

  var _description = document.querySelector('.description');

  var _ancienne = document.querySelector('#ancienne');

  _ancienne.addEventListener('change', function () {
    fetch("/administrateur/recupListeMail/" + _ancienne.value, {
      method: 'GET'
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      titre.value = response.titre;
      _codePromo.value = response.codePromo;

      for (var i = 0; i < response.contenu.length; i++) {
        contenu[i].value = response.contenu[i];
      }
    });
  });

  _valider.addEventListener('click', function () {
    var paragraphe = [];
    var confirmer = confirm('Toi vouloir envoyer tout les mails ?');

    if (confirmer) {
      document.querySelector('.dialogAttente').style.display = 'block';

      if (cible.value !== "" && _description.value !== "") {
        for (var i = 0; i < contenu.length; i++) {
          if (contenu[i].value !== "") {
            paragraphe.push(contenu[i].value);
          }
        }

        fetch("/administrateur/envoieMailAutre", {
          method: 'POST',
          body: JSON.stringify({
            titre: titre.value,
            cible: cible.value,
            code: _codePromo.value,
            content: paragraphe,
            description: _description.value,
            departement: document.querySelector('.departement').value
          })
        }).then(function () {
          document.querySelector('.dialogAttente').style.display = 'none';
          alert("Les mails ont été envoyés !!");
        });
      } else {
        alert("Il faut choisir une cible pour les mails !!");
      }
    }
  });
}

if (document.title === "Envoie mail unique ambassadeur") {
  var mail = document.querySelector('#mail');
  document.querySelector('.btn-success').addEventListener('click', function () {
    if (mail.value !== "") {
      fetch("/administrateur/envoieMailAmbassadeur", {
        method: 'POST',
        body: mail.value
      }).then(function () {
        alert("L'email a été envoyé");
      });
    } else {
      alert("il manque l'adresse mail");
    }
  });
}

if (document.title === "Désabonnement Otd") {
  var _valider2 = document.querySelector('.btn-maincolor');

  var _mail = document.querySelector('#mail');

  _valider2.addEventListener('click', function () {
    if (_mail.value !== "") {
      fetch("desabonnementOtd", {
        method: 'POST',
        body: _mail.value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('.btn-primary').click();
        document.querySelector('.message').innerHTML = response;
      });
    }
  });
}

if (document.title === "Envoie mail journaliste") {
  var _paragraphe = [];

  var _text = document.querySelectorAll('.paragraphe');

  var _valider3 = document.querySelector('.btn-success');

  var _titreMail = document.querySelector('#titre');

  var _codePromo2 = document.querySelector('#codePromo');

  _valider3.addEventListener('click', function () {
    for (var i = 0; i < _text.length; i++) {
      if (_text[i].value !== "") {
        _paragraphe.push(_text[i].value);
      }
    }

    var confirmer = confirm('Faire partir les e-mails ?');

    if (confirmer) {
      document.querySelector('.dialogAttente').style.display = 'block';
      fetch("/administrateur/mailJournaliste", {
        method: 'POST',
        body: JSON.stringify({
          para: _paragraphe,
          titre: _titreMail.value
        })
      }).then(function () {
        _paragraphe = [];
        document.querySelector('.dialogAttente').style.display = 'none';
        alert("Les mails sont partis");
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/envoyerRapport.js":
/*!*************************************!*\
  !*** ./assets/js/envoyerRapport.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");

__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

if (document.title === 'Liste Rapport' || document.title === "Envoyer un rapport d'intervention") {
  (function () {
    "use strict"; // Plugin Constructor

    var TagsInput = function TagsInput(opts) {
      this.options = Object.assign(TagsInput.defaults, opts);
      this.init();
    }; // Initialize the plugin


    TagsInput.prototype.init = function (opts) {
      this.options = opts ? Object.assign(this.options, opts) : this.options;
      if (this.initialized) this.destroy();

      if (!(this.orignal_input = document.getElementById(this.options.selector))) {
        console.error("tags-input couldn't find an element with the specified ID");
        return this;
      }

      this.arr = [];
      this.wrapper = document.createElement('div');
      this.input = document.createElement('input');
      init(this);
      initEvents(this);
      this.initialized = true;
      return this;
    }; // Add Tags


    TagsInput.prototype.addTag = function (string) {
      if (this.anyErrors(string)) return;
      this.arr.push(string);
      var tagInput = this;
      var tag = document.createElement('span');
      tag.className = this.options.tagClass;
      tag.innerText = string;
      var closeIcon = document.createElement('a');
      closeIcon.innerHTML = '&times;'; // delete the tag when icon is clicked

      closeIcon.addEventListener('click', function (e) {
        e.preventDefault();
        var tag = this.parentNode;

        for (var i = 0; i < tagInput.wrapper.childNodes.length; i++) {
          if (tagInput.wrapper.childNodes[i] == tag) tagInput.deleteTag(tag, i);
        }
      });
      tag.appendChild(closeIcon);
      this.wrapper.insertBefore(tag, this.input);
      this.orignal_input.value = this.arr.join(',');
      return this;
    }; // Delete Tags


    TagsInput.prototype.deleteTag = function (tag, i) {
      tag.remove();
      this.arr.splice(i, 1);
      this.orignal_input.value = this.arr.join(',');
      return this;
    }; // Make sure input string have no error with the plugin


    TagsInput.prototype.anyErrors = function (string) {
      if (this.options.max != null && this.arr.length >= this.options.max) {
        console.log('max tags limit reached');
        return true;
      }

      if (!this.options.duplicate && this.arr.indexOf(string) != -1) {
        console.log('duplicate found " ' + string + ' " ');
        return true;
      }

      return false;
    }; // Add tags programmatically


    TagsInput.prototype.addData = function (array) {
      var plugin = this;
      array.forEach(function (string) {
        plugin.addTag(string);
      });
      return this;
    }; // Get the Input String


    TagsInput.prototype.getInputString = function () {
      return this.arr.join(',');
    }; // destroy the plugin


    TagsInput.prototype.destroy = function () {
      this.orignal_input.removeAttribute('hidden');
      delete this.orignal_input;
      var self = this;
      Object.keys(this).forEach(function (key) {
        if (self[key] instanceof HTMLElement) self[key].remove();
        if (key != 'options') delete self[key];
      });
      this.initialized = false;
    }; // Private function to initialize the tag input plugin


    function init(tags) {
      tags.wrapper.append(tags.input);
      tags.wrapper.classList.add(tags.options.wrapperClass);
      tags.orignal_input.setAttribute('hidden', 'true');
      tags.orignal_input.parentNode.insertBefore(tags.wrapper, tags.orignal_input);
    } // initialize the Events


    function initEvents(tags) {
      tags.wrapper.addEventListener('click', function () {
        tags.input.focus();
      });
      tags.input.addEventListener('keydown', function (e) {
        var str = tags.input.value.trim();

        if (!!~[9, 13, 188].indexOf(e.keyCode)) {
          e.preventDefault();
          tags.input.value = "";
          if (str != "") tags.addTag(str);
        }
      });
    } // Set All the Default Values


    TagsInput.defaults = {
      selector: '',
      wrapperClass: 'tags-input-wrapper',
      tagClass: 'tag',
      max: null,
      duplicate: false
    };
    window.TagsInput = TagsInput;
  })();

  var tagInput1 = new TagsInput({
    selector: 'tag-input1',
    duplicate: false,
    max: 10
  });
  var bouton = document.querySelector('.btn-outline-maincolor');
  bouton.addEventListener('click', function () {
    var id = document.querySelector("#idRapport").value;
    var ref = document.querySelector('#refDossier');
    var liste = [];

    if (id) {
      var mails = document.querySelectorAll('.tag');

      for (var i = 0; i < mails.length; i++) {
        liste.push(mails[i].innerText.substring(0, mails[i].innerText.length - 1));
      }

      var content = JSON.stringify({
        email: liste,
        reference: ref.value
      });
      fetch('/receptionMailRapport/' + id, {
        method: 'POST',
        body: content
      }).then(function (response) {
        alert('Le rapport est envoyé');
      });
    } else {
      alert('Selectionnez un rapport');
    }
  });
}

/***/ }),

/***/ "./assets/js/etape1Diag.js":
/*!*********************************!*\
  !*** ./assets/js/etape1Diag.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Nouvelle demande de diagnostics") {
  (function () {
    var id = document.querySelector('input[type=hidden]');
    console.log(id);
    var route;

    if (id) {
      route = "/saveDiag/" + id.value;
      fetch("/recupDiag/" + id.value, {
        method: 'get'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        var typeDiags = document.getElementsByName('action');

        var _iterator = _createForOfIteratorHelper(typeDiags),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var typeDiag = _step.value;

            if (typeDiag.value === response.type) {
              typeDiag.checked = true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var biens = document.getElementsByName('typeBien');

        var _iterator2 = _createForOfIteratorHelper(biens),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var bien = _step2.value;

            if (bien.value == response.bienChoisi) {
              bien.checked = true;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var div = document.createElement('div');
        div.classList.add('col-12', 'mt-5', 'mb-5');
        var p = document.createElement('p');
        p.classList.add('h5');
        p.innerText = "Sélectionnez la taille de votre bien :";
        div.appendChild(p);
        zoneTaille.appendChild(div);
        response.taille.taille.forEach(function (element, key) {
          var div = document.createElement('div');
          div.classList.add('col-sm-4', "col-6");
          var label = document.createElement('label');
          label.classList.add('border-gray', 'text-center', 'zoneTypeBien');
          label.setAttribute('for', 'taille' + key);
          label.innerText = element;
          label.style.background = "none";
          var input = document.createElement('input');
          input.type = "radio";
          input.value = response.taille.id[key];
          input.name = "tailleBien";
          input.id = "taille" + key;
          input.classList.add("inputTypeBien", 'inputTaille');
          input.setAttribute('hidden', 'hidden');
          div.append(input, label);
          zoneTaille.appendChild(div);

          if (response.taille.id[key] == response.tailleChoisie) {
            input.checked = true;
          }
        });
        document.querySelector("#dateInterDiag").value = response.rdv;
      });
    } else {
      route = "/saveDiag";
    }

    var valider = document.querySelector('.btn-maincolor');
    var types = document.getElementsByName("typeBien");
    var zoneTaille = document.querySelector('.zoneTaille');

    var _iterator3 = _createForOfIteratorHelper(types),
        _step3;

    try {
      var _loop = function _loop() {
        var type = _step3.value;
        type.addEventListener('change', function () {
          fetch("/recupeTaille/" + type.value, {
            method: 'GET'
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            while (zoneTaille.firstChild) {
              zoneTaille.removeChild(zoneTaille.lastChild);
            }

            var div = document.createElement('div');
            div.classList.add('col-12', 'mt-5', 'mb-5');
            var p = document.createElement('p');
            p.classList.add('h5');
            p.innerText = "Sélectionnez la taille de votre bien :";
            div.appendChild(p);
            zoneTaille.appendChild(div);
            response.forEach(function (element, key) {
              var div = document.createElement('div');
              div.classList.add('col-sm-4', "col-6");
              var label = document.createElement('label');
              label.classList.add('border-gray', 'text-center', 'zoneTypeBien');
              label.setAttribute('for', 'taille' + key);
              label.innerText = element.taille;
              label.style.background = "none";
              var input = document.createElement('input');
              input.type = "radio";
              input.value = element.id;
              input.name = "tailleBien";
              input.id = "taille" + key;
              input.classList.add("inputTypeBien", 'inputTaille');
              input.setAttribute('hidden', 'hidden');
              div.append(input, label);
              zoneTaille.appendChild(div);
            });
          });
        });
      };

      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    valider.addEventListener('click', function () {
      var taille = document.querySelector('.inputTaille:checked');
      var typeDiag = document.querySelector('.typeDiag:checked');
      var date = document.querySelector("#dateInterDiag");

      if (!taille || !typeDiag) {
        alert("Veuillez compléter votre demande");
      } else {
        fetch(route, {
          method: 'post',
          body: JSON.stringify({
            tailleBien: taille.value,
            type: typeDiag.value,
            dateRdv: date.value
          })
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.location.href = "/etape1-precision/" + response;
        });
      }
    });
  })();
}

if (document.title === "Etape 2 du diagnostic") {
  var id = document.querySelector('input[type=hidden]');
  document.addEventListener('DOMContentLoaded', function () {
    fetch("/recupeEtape2/" + id.value, {
      method: 'get'
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      console.log(response);
      var permis = document.getElementsByName("datePermis");

      var _iterator4 = _createForOfIteratorHelper(permis),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var permi = _step4.value;

          if (permi.value === response.permis) {
            permi.checked = true;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var gazs = document.getElementsByName("dateGaz");

      var _iterator5 = _createForOfIteratorHelper(gazs),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var gaz = _step5.value;

          if (gaz.value === response.gaz) {
            gaz.checked = true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var elecs = document.getElementsByName("dateElec");

      var _iterator6 = _createForOfIteratorHelper(elecs),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var elec = _step6.value;

          if (elec.value === response.elec) {
            elec.checked = true;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    });
  });
  var valider = document.querySelector('.btn-maincolor');
  valider.addEventListener('click', function () {
    var permisConst = document.querySelector('.permis:checked');
    var installGaz = document.querySelector('.installGaz:checked');
    var elecInstall = document.querySelector('.elecInstall:checked');

    if (!permisConst || !installGaz || !elecInstall) {
      alert("Veuillez compléter votre demande");
    } else {
      fetch("/completeDiag/" + valider.dataset.inter, {
        method: 'post',
        body: JSON.stringify({
          amiante: permisConst.dataset.amiante,
          plomb: permisConst.dataset.plomb,
          gaz: installGaz.dataset.gaz,
          elec: elecInstall.dataset.elec,
          ageElec: elecInstall.value,
          ageGaz: installGaz.value,
          permis: permisConst.value
        })
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.location.href = "/etape2-adresse/" + response;
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/factureAdmin.js":
/*!***********************************!*\
  !*** ./assets/js/factureAdmin.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Facture Admin') {
  var Designation = function Designation(designation, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6) {
    this.designation = designation;
    this.ligne1 = ligne1;
    this.ligne2 = ligne2;
    this.ligne3 = ligne3;
    this.ligne4 = ligne4;
    this.ligne5 = ligne5;
    this.ligne6 = ligne6;
  };

  var Ligne = function Ligne(ref, designer, prixUnitVente, montantHors) {
    this.ref = ref;
    this.designer = designer;
    this.nombre = 1;
    this.unitaire = 1;
    this.prixUnitVente = prixUnitVente;
    this.tva = '20%';
    this.montantHors = montantHors;
  };

  var Entreprise = function Entreprise(nom, nomDirigeant, adresse, ville) {
    this.nom = nom;
    this.nomDirigeant = nomDirigeant;
    this.adresse = adresse;
    this.ville = ville;
  };

  var calculerMontant = function calculerMontant() {
    var montantHT = 0;
    var mHT = document.querySelectorAll('.MHT');

    for (var k = 0; k < mHT.length; k++) {
      montantHT += parseFloat(mHT[k].innerHTML);
    }

    document.querySelector('.horstaxe').innerHTML = montantHT;
    document.querySelector('.TVAvaleur').innerHTML = montantHT * 1.2 - montantHT;
    document.querySelector('.ttc').innerHTML = montantHT * 1.2;
  };

  var typeDoc = document.querySelector('#typeDoc');
  var type = document.querySelectorAll('.type');
  typeDoc.addEventListener('change', function () {
    for (var i = 0; i < type.length; i++) {
      type[i].innerHTML = typeDoc.value;
    }
  });
  var liste = [];
  var ajouter = document.querySelector('.ajouter');
  var retirer = document.querySelector('.retirer');
  var table = document.querySelector('.table-facture');
  var listeDesignation = document.querySelectorAll('.ligneDesignation');
  var PuVente = document.querySelector('.Punitaire');
  var montantHt = document.querySelector('.montantHt');
  var referenceFinale = 0;
  var designationIntermediaire = 0;
  var reference = document.querySelector('.optionRef');
  var optionOtd = document.querySelector('.optionOTD');
  var OTD = document.querySelector('.OTD');
  reference.addEventListener('change', function () {
    if (reference.value === 'OTD') {
      OTD.style.display = 'block';
      var _ref = 0;
      optionOtd.addEventListener('change', function () {
        _ref = JSON.parse(optionOtd.value);
        referenceFinale = _ref['ref'];
        designationIntermediaire = _ref['designation'];
      });
    } else {
      OTD.style.display = 'none';
      ref = JSON.parse(reference.value);
      referenceFinale = ref['ref'];
      designationIntermediaire = ref['designation'];
    }
  });
  ajouter.addEventListener('click', function () {
    var tr = document.createElement('tr');
    var tdRef = document.createElement('td');
    tdRef.classList.add('case');
    tdRef.classList.add('inRef');
    tdRef.innerHTML = referenceFinale;
    var tdDesigantion = document.createElement('td');
    tdDesigantion.innerHTML = designationIntermediaire;
    tdDesigantion.classList.add('case');
    tdDesigantion.classList.add('inDesignation');
    var ulDesignation = document.createElement('ul');

    for (var i = 0; i < listeDesignation.length; i++) {
      var li = document.createElement('li');
      li.innerHTML = listeDesignation[i].value;
      ulDesignation.appendChild(li);
    }

    tdDesigantion.appendChild(ulDesignation);
    var tdQuantite = document.createElement('td');
    tdQuantite.innerHTML = 1;
    var tdUnite = document.createElement('td');
    tdUnite.innerHTML = 1;
    var tdPu = document.createElement('td');
    tdPu.innerHTML = PuVente.value;
    var tdTva = document.createElement('td');
    tdTva.innerHTML = '20%';
    var tdMontant = document.createElement('td');
    tdMontant.classList.add('MHT');
    tdMontant.innerHTML = montantHt.value;
    tr.appendChild(tdRef);
    tr.appendChild(tdDesigantion);
    tr.appendChild(tdQuantite);
    tr.appendChild(tdUnite);
    tr.appendChild(tdPu);
    tr.appendChild(tdTva);
    tr.appendChild(tdMontant);
    table.appendChild(tr);
    var Designa = new Designation(designationIntermediaire, listeDesignation[0].value, listeDesignation[1].value, listeDesignation[2].value, listeDesignation[3].value, listeDesignation[4].value, listeDesignation[5].value);
    var line = new Ligne(referenceFinale, Designa, PuVente.value, montantHt.value);
    var mHT = document.querySelectorAll('.MHT');
    liste.push(line);
    var fact = document.querySelectorAll('.fact');

    for (var j = 0; j < fact.length; j++) {
      fact[j].value = '';
    }

    calculerMontant();
  });
  retirer.addEventListener('click', function () {
    table.removeChild(table.lastChild);
    liste.pop();
    calculerMontant();
  });
  var bouton = document.querySelector('.btn-pdf');
  bouton.addEventListener('click', function () {
    var boite = new Entreprise(document.querySelector('#societe').value, document.querySelector('#dirigeant').value, document.querySelector('#adresse').value, document.querySelector('#ville').value);
    var contenu = JSON.stringify({
      objet: liste,
      entreprise: boite,
      dateFact: document.querySelector('.date').value,
      numeroFact: document.querySelector('#numeroFact').value,
      HT: document.querySelector('.horstaxe').innerHTML,
      TVA: document.querySelector('.TVAvaleur').innerHTML,
      TTC: document.querySelector('.ttc').innerHTML,
      type: typeDoc.value
    });

    if (typeDoc.value != null) {
      fetch('/admin/doc/pdf', {
        method: 'POST',
        body: contenu
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        if (typeDoc.value == 'devis') {
          window.open('/uploads/devisAdmin/' + reponse + '.pdf', '_blank');
        } else {
          window.open('/uploads/factureAdmin/' + reponse + '.pdf', '_blank');
        }
      });
    } else {
      alert('Choisissez le type de document produit');
    }
  });
}

/***/ }),

/***/ "./assets/js/factureInsti.js":
/*!***********************************!*\
  !*** ./assets/js/factureInsti.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Vos factures') {
  var facture = function facture(mois) {
    var premier = new Date(mois.getFullYear(), mois.getMonth(), 1);
    var lastDay = new Date(mois.getFullYear(), mois.getMonth() + 1, 0);
    var post = JSON.stringify({
      debut: premier.toLocaleString('fr-Fr', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      }),
      fin: lastDay.toLocaleString('fr-FR', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      })
    });
    fetch('/retrouveFactureInsti', {
      method: 'POST',
      body: post
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      console.log(reponse);

      while (zoneFacture.firstChild) {
        zoneFacture.removeChild(zoneFacture.lastChild);
      }

      for (var i = 0; i < reponse.facture.length; i++) {
        var div = document.createElement('div');
        div.classList.add('col-sm-2');
        var a = document.createElement('a');
        var figure = document.createElement('figure');
        var img = document.createElement('img');
        var figcaption = document.createElement('figcaption');
        img.src = '/css/css_site/img/fichier.png';
        figcaption.innerText = reponse.facture[i];
        a.href = '/uploads/factureInsti/' + reponse.facture[i];
        a.target = '_blank';
        figure.appendChild(img);
        figure.appendChild(figcaption);
        a.appendChild(figure);
        div.appendChild(a);
        zoneFacture.appendChild(div);
      }
    });
  };

  console.log('ok');
  var datum = new Date();
  var zoneFacture = document.querySelector('.zoneFacture');
  var zonedate = document.querySelector('.mois');
  var suivant = document.querySelector('.next');
  var precedent = document.querySelector('.preview');
  facture(datum);
  var dateloc = datum.toLocaleString('fr-Fr', {
    month: 'long',
    year: 'numeric'
  });
  zonedate.innerHTML = dateloc;
  suivant.addEventListener('click', function () {
    var moisSuivant = new Date(datum.setMonth(datum.getMonth() + 1));
    var dateloc = datum.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    zonedate.innerHTML = dateloc;

    while (zoneFacture.firstChild) {
      zoneFacture.removeChild(zoneFacture.lastChild);
    }

    facture(moisSuivant);
  });
  precedent.addEventListener('click', function () {
    var moisPreceden = new Date(datum.setMonth(datum.getMonth() - 1));
    var dateloc = datum.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    zonedate.innerHTML = dateloc;

    while (zoneFacture.firstChild) {
      zoneFacture.removeChild(zoneFacture.lastChild);
    }

    facture(moisPreceden);
  });
}

/***/ }),

/***/ "./assets/js/factures.js":
/*!*******************************!*\
  !*** ./assets/js/factures.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Mes factures') {
  var facture = function facture(mois) {
    var premier = new Date(mois.getFullYear(), mois.getMonth(), 1);
    var lastDay = new Date(mois.getFullYear(), mois.getMonth() + 1, 0);
    var post = JSON.stringify({
      debut: premier.toLocaleString('fr-Fr', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      }),
      fin: lastDay.toLocaleString('fr-FR', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      })
    });
    fetch('/entreprise/recuperer', {
      method: 'POST',
      body: post
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      console.log(zoneFacture);

      while (zoneFacture.firstChild) {
        zoneFacture.removeChild(zoneFacture.lastChild);
      }

      for (var i = 0; i < reponse.length; i++) {
        var div = document.createElement('div');
        div.classList.add('col-sm-2');
        var figure = document.createElement('figure');
        var figureC = document.createElement('figcaption');
        var img = document.createElement('img');
        img.src = '/css/css_site/img/fichier.png';
        var a = document.createElement('a');
        a.href = reponse[i].lien + reponse[i].nom;
        a.target = '_blank';
        figureC.innerText = reponse[i].nom;
        figure.appendChild(img);
        figure.appendChild(figureC);
        a.appendChild(figure);
        div.appendChild(a);
        zoneFacture.appendChild(div);
      }
    });
  };

  var datum = new Date();
  var zoneFacture = document.querySelector('.zoneFacture');
  document.addEventListener('DOMContentLoaded', function () {
    facture(datum);
  });
  var dateloc = datum.toLocaleString('fr-Fr', {
    month: 'long',
    year: 'numeric'
  });
  document.getElementById('mois').innerText = dateloc;
  document.getElementById('suivant').addEventListener('click', function () {
    var suivant = new Date(datum.setMonth(datum.getMonth() + 1));
    var dateloc = datum.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    document.getElementById('mois').innerText = dateloc;
    var node = document.getElementById('facture');
    facture(suivant);
  });
  document.getElementById('precedent').addEventListener('click', function () {
    var precedent = new Date(datum.setMonth(datum.getMonth() - 1));
    var dateloc = datum.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    document.getElementById('mois').innerText = dateloc;
    var node = document.getElementById('facture');
    facture(precedent);
  });
}

/***/ }),

/***/ "./assets/js/finAbonnement.js":
/*!************************************!*\
  !*** ./assets/js/finAbonnement.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

var mail = document.querySelectorAll('.mail');

var _loop = function _loop(i) {
  mail[i].addEventListener('click', function () {
    var id = mail[i].getAttribute('data-identifiant');
    fetch('/admin/envoieMail', {
      method: 'POST',
      body: id
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      document.location.reload(true);
    });
  });
};

for (var i = 0; i < mail.length; i++) {
  _loop(i);
}

var fin = document.querySelectorAll('.termine');

var _loop2 = function _loop2(_i) {
  var identifiant = fin[_i].getAttribute('data-identifiant');

  fin[_i].addEventListener('click', function () {
    fetch('/admin/terminerAbonnement/', {
      method: 'POST',
      body: identifiant
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      document.location.reload(true);
    });
  });
};

for (var _i = 0; _i < fin.length; _i++) {
  _loop2(_i);
}

/***/ }),

/***/ "./assets/js/forum.js":
/*!****************************!*\
  !*** ./assets/js/forum.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Thèmes') {
  (function () {
    var bouton = document.querySelector('.btn-outline-success');
    var theme = document.querySelector('#theme');
    bouton.addEventListener('click', function () {
      fetch('/admin/ajouterTheme', {
        method: 'POST',
        body: theme.value
      }).then(function () {
        document.location.reload();
      });
    });
    var supprimer = document.querySelectorAll('.btn-outline-danger');

    var _loop = function _loop(i) {
      supprimer[i].addEventListener('click', function () {
        var id = supprimer[i].dataset.theme;
        fetch('/admin/supprimerTheme/' + id, {
          method: 'GET'
        }).then(function () {
          document.location.reload();
        });
      });
    };

    for (var i = 0; i < supprimer.length; i++) {
      _loop(i);
    }
  })();
}

if (document.title === 'Problèmes') {
  (function () {
    var button = document.querySelector('.btn-maincolor3');
    console.log(button);
    button.addEventListener('click', function () {
      var cat = document.querySelector('#cat').value;
      var sujet = document.querySelector("#titre").value;
      fetch('/creerSujet/' + button.dataset.categorie, {
        method: 'POST',
        body: JSON.stringify({
          message: cat,
          titre: sujet
        })
      }).then(function () {
        document.location.reload();
      });
    });
    var supprimer = document.querySelectorAll('.delete');

    var _loop2 = function _loop2(i) {
      supprimer[i].addEventListener('click', function () {
        fetch('/admin/supprimerCat/' + supprimer[i].dataset.cat, {
          method: 'GET'
        }).then(function () {
          document.location.reload();
        });
      });
    };

    for (var i = 0; i < supprimer.length; i++) {
      _loop2(i);
    }
  })();
}

if (document.title === 'Liste Reponse') {
  (function () {
    var traiterMessage = function traiterMessage(indice, bouton) {
      var zone = document.querySelectorAll('.modal-body');
      fetch('/admin/validerReponse/' + bouton[indice].dataset.reponse, {
        method: 'POST',
        body: bouton[indice].dataset.action
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response === 'ok') {
          while (zone[indice].firstChild) {
            zone[indice].removeChild(zone[indice].lastChild);
          }

          zone[indice].classList.remove('border');
        }
      });
    };

    var valider = document.querySelectorAll('.btn-success');
    var supprimer = document.querySelectorAll('.btn-warning');

    var _loop3 = function _loop3(i) {
      valider[i].addEventListener('click', function () {
        traiterMessage(i, valider);
      });
      supprimer[i].addEventListener('click', function () {
        traiterMessage(i, supprimer);
      });
    };

    for (var i = 0; i < valider.length; i++) {
      _loop3(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/horairesAgent.js":
/*!************************************!*\
  !*** ./assets/js/horairesAgent.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/core/locales/fr */ "./node_modules/@fullcalendar/core/locales/fr.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fullcalendar/daygrid */ "./node_modules/@fullcalendar/daygrid/main.js");
/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fullcalendar/timegrid */ "./node_modules/@fullcalendar/timegrid/main.js");
/* harmony import */ var _fullcalendar_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fullcalendar/list */ "./node_modules/@fullcalendar/list/main.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.js");









if (document.title === 'Créer planning') {
  var idAgent = document.querySelector('#idAgent');
  document.addEventListener('DOMContentLoaded', function () {
    var calendarEl = document.getElementById('planning');
    var couleur = document.querySelector('#couleur');
    var intitule = document.querySelector('#intitule');
    var ouiJour = document.querySelector('#ouiJour');
    var nonJour = document.querySelector('#nonJour');
    var action = document.querySelector('.action');
    var agent = document.querySelector('#agent');
    var alerte = document.querySelector("#alertPanel");
    var bgAlert = document.querySelector('#overlay');
    var valider = document.querySelector('.btn-outline-danger');
    var annuler = document.querySelector('.btn-outline-success');

    function dataEvent() {
      if (ouiJour.checked === true) {
        action.dataset.event = '{"title":"' + intitule.value + ' ' + agent.value + '","duration":"24:00","id":"' + intitule.value + '","backgroundColor":"' + couleur.value + '"}';
      }

      if (nonJour.checked === true) {
        action.dataset.event = '{"title":"' + intitule.value + ' ' + agent.value + '","duration":"00:30","id":"' + intitule.value + '","backgroundColor":"' + couleur.value + '"}';
      }
    }

    couleur.addEventListener('change', function () {
      action.style.backgroundColor = couleur.value;
      dataEvent();
    });
    intitule.addEventListener('keyup', function () {
      action.innerHTML = intitule.value;
      dataEvent();
    });
    ouiJour.addEventListener('change', function () {
      dataEvent();
    });
    nonJour.addEventListener('change', function () {
      dataEvent();
    });
    var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__["Calendar"](calendarEl, {
      plugins: [_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_4__["default"], _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_5__["default"], _fullcalendar_list__WEBPACK_IMPORTED_MODULE_6__["default"], _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_7__["default"]],
      initialView: 'timeGridWeek',
      locale: _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_3___default.a,
      height: 600,
      aspectRatio: 3.5,
      events: '/recupererPlanning/' + idAgent.value,
      views: {
        timeGrid: {
          visibleRange: {
            start: "5:00:00",
            end: "20:00:00"
          },
          businessHours: {
            daysOfWeek: [1, 2, 3, 4, 5],
            startTime: '05:00',
            endTime: '20:00'
          },
          hiddenDays: [6, 0],
          slotDuration: '00:30:00'
        }
      },
      droppable: true,
      editable: true,
      headerToolbar: {
        start: 'prev,next',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek'
      },
      timeZone: 'locale',
      allDaySlot: false,
      eventClick: function eventClick(info) {
        alerte.style.display = 'block';
        bgAlert.style.display = 'block';
        valider.addEventListener('click', function () {
          info.event.remove();
          alerte.style.display = 'none';
          bgAlert.style.display = 'none';
        });
        annuler.addEventListener('click', function () {
          alerte.style.display = 'none';
          bgAlert.style.display = 'none';
        });
      }
    });
    calendar.render();
    new _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_7__["Draggable"](action);
    document.querySelector('.btn-maincolor').addEventListener('click', function () {
      fetch('/planningAgent/' + idAgent.value, {
        method: 'POST',
        body: JSON.stringify(calendar.getEvents())
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        alert('Vos changements ont été pris en compte .');
      });
    });
  });
}

/***/ }),

/***/ "./assets/js/infoTech.js":
/*!*******************************!*\
  !*** ./assets/js/infoTech.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Phase 2 de votre inscription' || document.title === 'Modifiez vos information techniques') {
  (function () {
    var envoieInterSalarie = function envoieInterSalarie(url, id) {
      fetch(url, {
        method: 'POST',
        body: id
      });
    };

    var listInter = document.querySelectorAll('.listeInter');
    var inter = document.querySelector('.listeInter');
    var perimetre = document.querySelector('#periInter');
    var bouton = document.querySelector('.btn-prs');

    if (listInter.length === 0) {
      listInter = document.querySelectorAll('.interOdi');
    }

    if (!inter) {
      inter = document.querySelector(".interOdi");
    }

    document.addEventListener('DOMContentLoaded', function () {
      fetch('/recupererInter', {
        method: 'POST',
        body: JSON.stringify({
          id: inter.dataset.salarie,
          type: inter.dataset.type
        })
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        for (var k = 0; k < reponse.length; k++) {
          for (var j = 0; j < listInter.length; j++) {
            if (reponse[k] == listInter[j].value) {
              listInter[j].checked = true;
            }
          }
        }
      });
    });

    var _loop = function _loop(i) {
      listInter[i].addEventListener('click', function () {
        var contenu = JSON.stringify({
          idSalarie: listInter[i].dataset.salarie,
          idInter: listInter[i].value,
          type: listInter[[i]].dataset.type
        });

        if (listInter[i].checked === true) {
          envoieInterSalarie('/ajoutTypeInterSalarie', contenu);
        }

        if (listInter[i].checked === false) {
          envoieInterSalarie('/removeTypeInterSalarie', contenu);
        }
      });
    };

    for (var i = 0; i < listInter.length; i++) {
      _loop(i);
    }

    perimetre.addEventListener('keyup', function () {
      var corps = JSON.stringify({
        distance: perimetre.value,
        idsalarie: perimetre.dataset.salarie
      });
      envoieInterSalarie('/distanceInter', corps);
    });
    var honneur = document.querySelector('#honneur');

    if (honneur) {
      honneur.addEventListener('change', function () {
        fetch('/validerHonneur', {
          method: "GET"
        });
      });
    }

    bouton.addEventListener('click', function (e) {
      if (honneur) {
        if (honneur.checked) {
          fetch('/distance', {
            method: 'POST',
            body: perimetre.dataset.salarie
          }).then(function (reponse) {
            return reponse.json();
          }).then(function (reponse) {
            if (reponse['perimetre'] === false) {
              var _alert = confirm("Le perimètre d'intervention n'est pas correctement renseigné.Vous ne pourrez pas être proposé pour une mission");

              if (_alert === false) {
                document.location.href = '/continuer/inscription/intervention/';
              } else if (_alert === true && reponse['aerien'] === true) {
                document.location.href = '/licence/' + perimetre.dataset.salarie;
              }
            } else if (reponse['perimetre'] === true && reponse['aerien'] === true) {
              if (document.title === "Modifiez vos information techniques") {
                document.location.href = "/entreprise/changementValidé";
              } else {
                document.location.href = '/licence/' + perimetre.dataset.salarie;
              }
            } else if (reponse['perimetre'] === true && reponse['aerien'] === false && reponse['odi'] === false) {
              if (document.title === "Modifiez vos information techniques") {
                document.location.href = "/entreprise/changementValidé";
              } else {
                document.location.href = '/entreprise/tauxHoraire/';
              }
            } else if (reponse['perimetre'] === true && reponse['odi'] === true) {
              document.location.href = "/entreprise/rappelInter";
            }
          });

          if (document.title === "Modifiez vos information techniques") {
            document.location.href = "/entreprise/changementValidé";
          } else {
            document.location.href = '/entreprise/tauxHoraire/';
          }
        } else {
          alert('Veuillez cocher la déclaration');
        }
      } else {
        for (var _i = 0; _i < listInter.length; _i++) {
          if (listInter[_i].checked) {
            fetch('/distance', {
              method: 'POST',
              body: perimetre.dataset.salarie
            }).then(function (reponse) {
              return reponse.json();
            }).then(function (reponse) {
              if (reponse['perimetre'] === false) {
                var _alert2 = confirm("Le perimètre d'intervention n'est pas correctement renseigné.Vous ne pourrez pas être proposé pour une mission");

                if (_alert2 === false) {
                  document.location.href = '/continuer/inscription/intervention/';
                } else if (_alert2 === true && reponse['aerien'] === true) {
                  document.location.href = '/licence/' + perimetre.dataset.salarie;
                }
              } else if (reponse['perimetre'] === true && reponse['aerien'] === true) {
                if (document.title === "Modifiez vos information techniques") {
                  document.location.href = "/entreprise/changementValidé";
                } else {
                  document.location.href = '/licence/' + perimetre.dataset.salarie;
                }
              } else if (reponse['perimetre'] === true && reponse['aerien'] === false && reponse['odi'] === false) {
                if (document.title === "Modifiez vos information techniques") {
                  document.location.href = "/entreprise/changementValidé";
                } else {
                  document.location.href = '/entreprise/tauxHoraire/';
                }
              } else if (reponse['perimetre'] === true && reponse['odi'] === true) {
                document.location.href = "/entreprise/rappelInter";
              }
            });
          } else {
            if (document.title === "Modifiez vos information techniques") {
              document.location.href = "/entreprise/changementValidé";
            } else {
              document.location.href = '/entreprise/tauxHoraire/';
            }
          }
        }
      }
    });
  })();
}

if (document.title === 'Licence') {
  var numero = document.querySelector('.numeroLicence');
  var password = document.querySelector(".passwordAT");
  var identifiantAT = document.querySelector('.identifiantAT');
  var realLicence = document.querySelector('#realLicence');
  var buttonLicence = document.querySelector('#licence');
  var buttonJustificatif = document.querySelector('#justificatif');
  var realJustificatif = document.querySelector('.justificatifAT');
  var dateValidite = document.querySelector('.validite');
  var exploitant = document.querySelector('#exploitant');
  var date = new Date();
  buttonLicence.addEventListener('click', function () {
    realLicence.click();
    realLicence.addEventListener('change', function () {
      buttonLicence.innerHTML = realLicence.files[0]['name'];
    });
  });
  dateValidite.addEventListener('change', function () {
    if (Date.parse(dateValidite.value) < date.getTime()) {
      dateValidite.value = date.getFullYear() + "-" + date.getMonth() + "-" + date.getDay();
      console.log(date.getFullYear() + "-" + date.getUTCMonth() + "-" + date.getDay());
    }
  });
  buttonJustificatif.addEventListener('click', function () {
    realJustificatif.click();
    realJustificatif.addEventListener('change', function () {
      buttonJustificatif.innerHTML = realJustificatif.files[0]['name'];
    });
  });
  var valider = document.querySelector('.btn-maincolor');
  var form = new FormData();
  valider.addEventListener('click', function () {
    if (dateValidite.value != null && realJustificatif.files[0]) {
      if (realLicence.files[0] && numero.value != "" && exploitant.value != "") {
        if (realLicence.files[0].type === 'application/pdf') {
          form.append('fichier', realLicence.files[0]);
          form.append('numero', numero.value);
          form.append('password', password.value);
          form.append('identifiant', identifiantAT.value);
          form.append('salarie', valider.dataset.salarie);
          form.append('exploitant', exploitant.value);
          form.append('validite', dateValidite.value);
          form.append('justificatif', realJustificatif.files[0]);
          fetch('/Enregistrerlicence', {
            method: 'POST',
            body: form
          }).then(function () {
            document.location.href = '/entreprise/tauxHoraire/';
          });
        } else {
          alert('La licence doit être sous un format PDF');
        }
      } else {
        alert('Veillez enregistrer votre licence DGAC ainsi que son numéro');
      }
    } else {
      alert('Veuillez renseigner votre justificatif de formation Alpha Tango ainsi que sa date de validité ');
    }
  });
}

/***/ }),

/***/ "./assets/js/inscriSal.js":
/*!********************************!*\
  !*** ./assets/js/inscriSal.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Inscription salarie") {
  (function () {
    var mission = document.querySelector('.mission');
    var odi = document.querySelector('.odi');
    var valeurOdi = document.querySelector('#ajoutersalarie_salarie');
    var missionCopie = document.querySelector('#ajoutersalarie_mission');
    var pack = document.querySelector('#ajoutersalarie_pack');
    var tafif = document.querySelector('#ajoutersalarie_tarif');
    var ajouts = document.getElementsByName("ajoutersalarie[copier]");

    var _iterator = _createForOfIteratorHelper(ajouts),
        _step;

    try {
      var _loop = function _loop() {
        var ajout = _step.value;
        ajout.addEventListener('change', function () {
          if (ajout.value === "Oui") {
            missionCopie.checked = true;
            missionCopie.setAttribute('required', 'required');
            mission.style.display = 'block';
            odi.style.display = 'block';
            valeurOdi.setAttribute('required', 'required');
          } else {
            missionCopie.checked = false;
            pack.checked = false;
            tafif.checked = false;
            mission.style.display = 'none';
            odi.style.display = 'none';
            valeurOdi.removeAttribute('required');
            missionCopie.removeAttribute('required');
          }
        });
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    missionCopie.addEventListener('change', function () {
      if (!missionCopie.checked) {
        pack.checked = false;
        tafif.checked = false;
      }
    });
    tafif.addEventListener('change', function () {
      if (tafif.checked) {
        missionCopie.checked = true;
      }
    });
    pack.addEventListener('change', function () {
      if (pack.checked) {
        missionCopie.checked = true;
      }
    });
  })();
}

/***/ }),

/***/ "./assets/js/inscriptionCoPro.js":
/*!***************************************!*\
  !*** ./assets/js/inscriptionCoPro.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Inscrition syndicat de copropriétés") {
  // Recherche de l'abonnement coppriete
  var prixAbo = document.querySelector('.prixAbo');
  var utlisateur = document.querySelector('.utlisateur');
  fetch("/abonnementCoPro", {
    method: 'GET'
  }).then(function (response) {
    return response.json();
  }).then(function (response) {
    prixAbo.innerHTML = response.ht + " € HT (" + response.ttc + " € TTC)";
    utlisateur.innerHTML = response.utilisateur;
  }); //Retourne les information de la société à travers son numéro de SIREN
  // code promotionnel

  var codePromo = document.querySelector('#demandeur_infoCodeProm_0');
  codePromo.addEventListener('change', function () {
    if (codePromo.checked) {
      document.querySelector('.codePrm').style.display = 'block';
    } else {
      document.querySelector('.codePrm').style.display = 'none';
    }
  });
  var verfier = document.querySelector('.btn-sm');
  var cp = document.querySelector("#demandeur_cpAmbassadeur");
  verfier.addEventListener('click', function () {
    var code = document.querySelector('#demandeur_codePromo');
    fetch("/verifcation/codePromo", {
      method: 'POST',
      body: JSON.stringify({
        profil: 'Syndicat de co-propriété',
        code: code.value,
        cp: null
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      document.querySelector('#btn-promo').click();
      var zoneAbo = document.querySelector('.resultAboCoPro');

      if (response.existe === 'promo') {
        document.querySelector('.messagePromo').innerText = "Votre code promotionnel vous permet de bénéficier de " + response.remise + "%" + " sur l'abonnement suivant : " + response.abonnement;
        document.querySelector('.validerCodePromo').addEventListener('click', function () {
          while (zoneAbo.firstChild) {
            zoneAbo.removeChild(zoneAbo.lastChild);
          }

          var pAbonnement = document.createElement('p');
          pAbonnement.classList.add('rappelAbo');
          pAbonnement.innerHTML = "Coût de l'abonnement mensuel : " + response.prix + ' € HT ' + '(' + Math.round(response.prix * 1.2) + ' € TTC)';
          var pUtilisateur = document.createElement('p');
          pUtilisateur.innerHTML = "Utilisateur(s) : " + response.utilisateur;
          pUtilisateur.classList.add('rappelAbo');
          var pAvert = document.createElement('p');
          zoneAbo.appendChild(pUtilisateur);
          zoneAbo.appendChild(pAbonnement);
          zoneAbo.appendChild(pAvert);
        });
      } else if (response.existe === 'ambassadeur') {
        if (response.possible) {
          document.querySelector('.messagePromo').innerHTML = "<p class='h5'>Ce code vous donne accès au statut ambassadeur de DIAG-DRONE</p>" + "<p class='h5'>Vous bénéficiez de l'abonnement " + response.abonnement + " au prix de" + response.prix + " € HT avec " + response.utilisateur + " utilisateur(s)</p> " + "<p class='h5'>La durée de votre abonnement est de " + response.duree + " mois non reconductible</p>";
          document.querySelector('.validerCodePromo').addEventListener('click', function () {
            while (zoneAbo.firstChild) {
              zoneAbo.removeChild(zoneAbo.lastChild);
            }

            var pAbonnement = document.createElement('p');
            pAbonnement.classList.add('rappelAbo');
            pAbonnement.innerHTML = "Coût de l'abonnement : " + response.prix + ' € HT ' + '(' + Math.round(response.prix * 1.2) + ' € TTC)';
            var pUtilisateur = document.createElement('p');
            pUtilisateur.innerHTML = "Utilisateur(s) : " + response.utilisateur;
            pUtilisateur.classList.add('rappelAbo');
            var pAvert = document.createElement('p');
            pAvert.classList.add('rappelAbo');
            zoneAbo.appendChild(pUtilisateur);
            zoneAbo.appendChild(pAbonnement);
            zoneAbo.appendChild(pAvert);
          });
        } else {
          document.querySelector('.messagePromo').innerHTML = "<p class='h5'>Tout les statuts ambassadeur pour votre département ont été definis.</p>" + "<p class='h5'>DIAG DRONE vous remercie.</p>";
          document.querySelector('.btn-secondary').addEventListener('click', function () {
            code.value = "";
          });
        }
      } else {
        document.querySelector('.messagePromo').innerText = "Le code promotionnel renseigné n'existe pas";
        document.querySelector('.validerCodePromo').style.display = 'none';
        document.querySelector('.btn-secondary').addEventListener('click', function () {
          code.value = "";
        });
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/inscriptionProBtp.js":
/*!****************************************!*\
  !*** ./assets/js/inscriptionProBtp.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Inscription Pro-Btp") {
  (function () {
    var changeButton = function changeButton(idButton, realId) {
      var button = document.getElementById(idButton);
      var realFile = document.getElementById(realId);
      button.addEventListener('click', function () {
        realFile.click();
        realFile.addEventListener('change', function () {
          button.innerHTML = realFile.files[0]['name'];
        });
      });
    };

    changeButton("logo", "entreprise_tp_logo");
    var logo = document.querySelector('#entreprise_tp_logo');
    var assujetis = document.getElementsByName("entreprise_tp[siretTva][assujeti]");

    var _loop = function _loop(i) {
      assujetis[i].addEventListener('change', function () {
        if (assujetis[i].value === "1") {
          document.querySelector('.tva').style.display = 'block';
          document.querySelector('#entreprise_tp_siretTva_tva').setAttribute('required', 'required');
          document.querySelector('#entreprise_tp_siretTva_tva').removeAttribute('disabled');
        } else {
          document.querySelector('.tva').style.display = 'none';
          document.querySelector('#entreprise_tp_siretTva_tva').setAttribute('disabled', 'disabled');
          document.querySelector('#entreprise_tp_siretTva_tva').removeAttribute('required');
          document.querySelector('#entreprise_tp_siretTva_tva').value = "";
        }
      });
    };

    for (var i = 0; i < assujetis.length; i++) {
      _loop(i);
    }

    var siret = document.querySelector('#entreprise_tp_siretTva_siret');
    siret.addEventListener('keyup', function () {
      if (siret.value.length === 14) {
        fetch('/entreprise/siret', {
          method: 'POST',
          body: siret.value
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.querySelector('#entreprise_tp_adresse_numero').value = response.adresse.numero;
          document.querySelector('#entreprise_tp_adresse_nomVoie').value = response.adresse.nomVoie;
          document.querySelector('#entreprise_tp_adresse_codePostal').value = response.adresse.codePostal;
          document.querySelector('#entreprise_tp_adresse_ville').value = response.adresse.ville;
          document.querySelector('#entreprise_tp_siretTva_tva').value = response.TVA;
        });
      }
    });
    var abonnementPub = document.getElementsByName('entreprise_tp[abonnementPub]');

    var _loop2 = function _loop2(_i) {
      abonnementPub[_i].addEventListener('change', function () {
        if (abonnementPub[_i].value === 'oui') {
          document.querySelector('.btnPresentation').click();
          document.querySelector('.pub').style.display = 'block';
          document.querySelector('#entreprise_tp_proBtp_distanceInter').setAttribute('required', 'required');
        } else {
          document.querySelector('.pub').style.display = 'none';
          document.querySelector('#entreprise_tp_proBtp_distanceInter').removeAttribute('required');
          document.querySelector('#entreprise_tp_proBtp_distanceInter').setAttribute('disbaled', 'disbaled');

          if (document.querySelector('#entreprise_tp_proBtp_bandeauPub')) {
            document.querySelector('#entreprise_tp_proBtp_bandeauPub').removeAttribute('required');
          }
        }
      });
    };

    for (var _i = 0; _i < abonnementPub.length; _i++) {
      _loop2(_i);
    }

    var abonnementProBtp = document.querySelector("#entreprise_tp_proBtp_abonnement");
    var autreVille = document.getElementsByName('entreprise_tp[proBtp][departZoneInter]');
    var carte;
    var btnCarte = document.querySelector('.btnCarte');
    var cartePremium = document.querySelector('#cartePremium');
    var liste = [];
    var distanceInterPremium = document.querySelector('#formControlRange');
    abonnementProBtp.addEventListener('change', function () {
      if (document.querySelector('#entreprise_tp_proBtp_departZoneInter_1').checked === true && document.querySelector('#entreprise_tp_proBtp_villeDepart').value === "") {
        alert('Veuillez choisir une ville de départ');
        abonnementProBtp.options.selectedIndex = 0;
      } else {
        var travaux = document.getElementsByName("entreprise_tp[proBtp][travaux][]");

        for (var _i2 = 0; _i2 < travaux.length; _i2++) {
          if (travaux[_i2].checked === true) {
            liste.push(travaux[_i2].value);
          }
        }

        var possible = abonnementProBtp.options[abonnementProBtp.selectedIndex].dataset.possible;
        var adresse;
        var cercle;
        var distance = document.querySelectorAll('.distance');

        if (possible === "premium") {
          btnCarte.click();
          var newVille = document.querySelector('#entreprise_tp_proBtp_villeDepart').value;

          if (newVille !== "") {
            adresse = newVille;
          } else {
            adresse = document.querySelector('#entreprise_tp_adresse_numero').value + " " + document.querySelector('#entreprise_tp_adresse_nomVoie').value + " " + document.querySelector('#entreprise_tp_adresse_codePostal').value + " " + document.querySelector('#entreprise_tp_adresse_ville').value;
          }

          fetch("/localisationInscriptionProBtp", {
            method: 'POST',
            body: adresse
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            fetch('/localisationPremiumProBtp', {
              method: 'POST',
              body: JSON.stringify(liste)
            }).then(function (reponse) {
              return reponse.json();
            }).then(function (reponse) {
              if (carte !== undefined) {
                carte.remove();
              }

              var myIcon = L.icon({
                iconUrl: "\\css\\css_site\\img\\iconePerso.png",
                iconSize: [45, 45],
                popupAnchor: [-3, -76],
                shadowSize: [68, 95],
                shadowAnchor: [22, 94]
              });
              carte = L.map(cartePremium, {
                center: response,
                zoom: 8,
                attributionControl: false,
                zoomControl: false,
                scrollWheelZoom: false,
                keyboard: false,
                doubleClickZoom: false,
                dragging: true
              });
              L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                maxZoom: 20,
                id: 'mapbox/streets-v11',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'pk.eyJ1IjoieG1hdGhpZXUxMyIsImEiOiJja2N1aHU2eTAyOGZ2MnJsZjk1bjR0ZHE0In0.-N1CSInz77-O6xViA43KQw'
              }).addTo(carte);

              for (var _i3 = 0; _i3 < reponse.length; _i3++) {
                L.circle([reponse[_i3].coordonee[0], reponse[_i3].coordonee[1]], reponse[_i3].rayon * 1000, {
                  color: "#FF4200",
                  opacity: 0.5
                }).addTo(carte);
                L.marker([reponse[_i3].coordonee[0], reponse[_i3].coordonee[1]]).addTo(carte);
              }

              L.marker(response, {
                icon: myIcon,
                title: "Votre position"
              }).addTo(carte);
              distanceInterPremium.addEventListener('change', function () {
                distance[0].innerText = distanceInterPremium.value;
                distance[1].innerText = distanceInterPremium.value;

                if (cercle !== undefined) {
                  carte.removeLayer(cercle);
                }

                cercle = L.circle(response, distanceInterPremium.value * 1000, {
                  color: "#0067FF",
                  opacity: 0.5
                });
                cercle.removeFrom(carte);

                if (distanceInterPremium.value !== "") {
                  cercle.addTo(carte);
                }
              });
            });
          });
        }

        if (possible === 'classique') {
          document.querySelector('.distanceFinaleInter').innerText = "100";
          document.querySelector("#entreprise_tp_proBtp_distanceInter").max = 100;
        }
      }
    });
    var choixVille = document.querySelector('.villeDepart');
    var ville = document.querySelector('#entreprise_tp_proBtp_villeDepart');
    var list = document.querySelector('#cities');
    ville.addEventListener('keyup', function () {
      while (list.firstChild) {
        list.removeChild(list.lastChild);
      }

      if (ville.value.length >= 3) {
        fetch("https://geo.api.gouv.fr/communes?nom=" + ville.value + "&fields=nom&format=json&geometry=centre", {
          method: 'GET'
        }).then(function (reponse) {
          return reponse.json();
        }).then(function (reponse) {
          for (var _i4 = 0; _i4 < reponse.length; _i4++) {
            var option = document.createElement('option');
            option.value = reponse[_i4].nom;
            option.innerHTML = reponse[_i4].nom;
            list.appendChild(option);
            ville.click();
          }
        });
      }
    });

    var _loop3 = function _loop3(_i5) {
      autreVille[_i5].addEventListener('change', function (e) {
        if (autreVille[_i5].value === "non") {
          choixVille.style.display = 'block';
          document.querySelector('#entreprise_tp_proBtp_villeDepart').setAttribute('required', 'required');
        } else {
          choixVille.style.display = 'none';
          document.querySelector('#entreprise_tp_proBtp_villeDepart').removeAttribute('required');
          document.querySelector('#entreprise_tp_proBtp_villeDepart').value = "";
        }
      });
    };

    for (var _i5 = 0; _i5 < autreVille.length; _i5++) {
      _loop3(_i5);
    }

    var demandeAbo = document.getElementsByName('demandeAbo');

    var _loop4 = function _loop4(_i6) {
      demandeAbo[_i6].addEventListener('change', function () {
        if (demandeAbo[_i6].value === 'non') {
          document.querySelector('.basculerAbo').style.display = 'block';
          document.querySelector('.distanceSouscrit').innerText = 0;
        } else {
          document.querySelector('.basculerAbo').style.display = 'none';
          document.querySelector('#entreprise_tp_proBtp_distanceInter').value = distanceInterPremium.value;
          document.querySelector('.distanceSouscrit').innerText = distanceInterPremium.value;
          document.querySelector('#distanceFinaleInter').innerText = 30;
          document.querySelector('#entreprise_tp_proBtp_distanceInter').max = 30;
        }
      });
    };

    for (var _i6 = 0; _i6 < demandeAbo.length; _i6++) {
      _loop4(_i6);
    }

    var basculer = document.getElementsByName('basculer');

    var _loop5 = function _loop5(_i7) {
      basculer[_i7].addEventListener('change', function () {
        if (basculer[_i7].value === 'non') {
          document.querySelector('.refus').style.display = 'block';
          abonnementProBtp.options.selectedIndex = 0;
        } else {
          document.querySelector('.refus').style.display = 'none';
          document.querySelector('#entreprise_tp_proBtp_distanceInter').value = distanceInterPremium.value;
          document.querySelector('.distanceSouscrit').innerText = distanceInterPremium.value;
          document.querySelector('#distanceFinaleInter').innerText = 100;
          document.querySelector('#entreprise_tp_proBtp_distanceInter').max = 100;
          abonnementProBtp.options.selectedIndex = 1;
        }
      });
    };

    for (var _i7 = 0; _i7 < basculer.length; _i7++) {
      _loop5(_i7);
    }

    document.querySelector("#entreprise_tp_proBtp_distanceInter").addEventListener('change', function () {
      document.querySelector('.distanceSouscrit').innerText = document.querySelector("#entreprise_tp_proBtp_distanceInter").value;
    });
  })();
}

/***/ }),

/***/ "./assets/js/inter.js":
/*!****************************!*\
  !*** ./assets/js/inter.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === 'Détails intervention') {
  var oui;
  var non;

  (function () {
    document.addEventListener('DOMContentLoaded', function () {
      var intemperies = document.getElementsByName("inter_etape3[intemperie][]");
      var choixTravaux = document.getElementsByName("inter_etape3[travaux][]");
      var inter = document.querySelector('form').dataset.inter;
      fetch("/recupInfoEtape4/" + inter, {
        method: 'get'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response.budget !== null) {
          document.querySelector('.budgetInter').style.display = 'block';
          document.querySelector('#inter_etape3_budgetInter_montant').setAttribute('required', 'required');
          document.querySelector('#inter_etape3_budgetInter_montant').value = response.budget;
          document.querySelector('#inter_etape3_besoinBudget_0').checked = true;
        }

        if (response.photo !== null) {
          document.querySelector('.nbrePhotoInter').style.display = "block";
          document.querySelector('#inter_etape3_nbrePhoto').setAttribute('required', 'required');
          document.querySelector("#inter_etape3_photoOnly").checked = true;
        }

        if (response.video !== null) {
          document.querySelector('.nbreVideoInter').style.display = "block";
          document.querySelector('#inter_etape3_nbreVideo').setAttribute('required', 'required');
          document.querySelector("#inter_etape3_videoOnly").checked = true;
        }

        console.log(response);

        if (response.intemperie.intemperie.length > 0) {
          document.getElementById('intemperie').style.display = 'block';
          document.getElementById('inter_etape3_intemp_0').checked = true;

          var _iterator = _createForOfIteratorHelper(response.intemperie.intemperie),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var intemp = _step.value;

              for (var i = 0; i < intemperies.length; i++) {
                if (intemp == intemperies[i].value) {
                  intemperies[i].checked = true;
                } else {
                  document.querySelector('#inter_etape3_autreIntemp').value = intemp;
                }
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        if (response.intemperie.date[0] !== null) {
          var date = response.intemperie.date[0].split("/");
          document.querySelector('#inter_etape3_dateIntemperie').value = date[2] + "-" + date[1] + "-" + date[0];
        }

        if (response.travaux.length > 0) {
          var _iterator2 = _createForOfIteratorHelper(response.travaux),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var travail = _step2.value;

              for (var _i = 0; _i < choixTravaux.length; _i++) {
                if (travail == choixTravaux[_i].value) {
                  choixTravaux[_i].checked = true;
                }
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      });
    });
    document.querySelector('#inter_etape3_dateIntemperie').addEventListener('change', function () {
      console.log(document.querySelector('#inter_etape3_dateIntemperie').value);
    });
    var realPhoto = document.querySelector('#inter_etape3_photos');
    var fakeButton = document.querySelector('.boutonRemplace');
    var infoFichier = document.querySelector('.infoFichier');
    fakeButton.addEventListener('click', function () {
      realPhoto.click();
      realPhoto.addEventListener('change', function () {
        if (realPhoto.files.length > 5) {
          alert("Nous autorisons 5 photos maximums");
          realPhoto.value = "";
        } else {
          infoFichier.innerHTML = realPhoto.files.length + ' photos ajouté(es)';
        }
      });
    });
    oui = document.getElementById('inter_etape3_intemp_0');
    non = document.getElementById('inter_etape3_intemp_1');
    var element1 = document.getElementById('ajout1');
    var element2 = document.getElementById('ajout2');
    oui.addEventListener('click', function () {
      document.getElementById('intemperie').style.display = 'block';
      element1.classList.add('col-sm-2');
      element2.classList.add('col-sm-2');
    });
    non.addEventListener('click', function () {
      document.getElementById('intemperie').style.display = 'none';
      element1.classList.remove('col-sm-2');
      element2.classList.remove('col-sm-2');
    });
    var budgetDemande = document.getElementsByName("inter_etape3[besoinBudget]");
    var budget = document.querySelector('#inter_etape3_budgetInter_montant');

    var _loop = function _loop(i) {
      budgetDemande[i].addEventListener('change', function () {
        if (budgetDemande[i].value === 'Oui') {
          document.querySelector('.budgetInter').style.display = 'block';
          budget.setAttribute('required', 'required');
        } else {
          document.querySelector('.budgetInter').style.display = 'none';
          budget.removeAttribute('required');
        }
      });
    };

    for (var i = 0; i < budgetDemande.length; i++) {
      _loop(i);
    }

    var nbrePhoto = document.querySelector("#inter_etape3_photoOnly");
    var nbreVideo = document.querySelector("#inter_etape3_videoOnly");
    var nbreVideoDemande = document.querySelector('#inter_etape3_nbreVideo');
    nbrePhoto.addEventListener('change', function () {
      if (nbrePhoto.checked) {
        document.querySelector('.nbrePhotoInter').style.display = "block";
        document.querySelector('#inter_etape3_nbrePhoto').setAttribute('required', 'required');
      } else {
        document.querySelector('.nbrePhotoInter').style.display = "none";
        document.querySelector('#inter_etape3_nbrePhoto').removeAttribute('required');
      }
    });
    nbreVideo.addEventListener('change', function () {
      if (nbreVideo.checked) {
        document.querySelector('.nbreVideoInter').style.display = "block";
        nbreVideoDemande.setAttribute('required', 'required');
      } else {
        document.querySelector('.nbreVideoInter').style.display = "none";
        nbreVideoDemande.removeAttribute('required');
      }
    });
    nbreVideoDemande.addEventListener('keyup', function () {
      if (nbreVideoDemande.value > nbreVideoDemande.max) {
        nbreVideoDemande.value = nbreVideoDemande.max;
      }
    });
  })();
}

if (document.title === 'Nouvelle demande') {
  (function () {
    var listeinter = document.querySelectorAll('.listeinter');
    var ajout = document.querySelector('.type');
    var code = document.querySelector('.codeSyndic');

    var _loop2 = function _loop2(i) {
      listeinter[i].addEventListener('change', function () {
        if (listeinter[i].value !== 'diag') {
          while (ajout.hasChildNodes() === true) {
            ajout.removeChild(ajout.firstChild);
          }

          var corps = JSON.stringify({
            idListe: listeinter[i].value,
            idInter: listeinter[i].dataset.inter
          });
          fetch('/selectionListeinter', {
            method: 'POST',
            body: corps
          }).then(function (reponse) {
            return reponse.json();
          }).then(function (reponse) {
            document.querySelector('.titre2').innerHTML = "Précisez votre type d'intervention";
            reponse.liste.forEach(function (inter) {
              var div = document.createElement('div');
              var label = document.createElement('label');
              var input = document.createElement('input');
              input.type = 'radio';
              input.name = 'typeInter';
              input.id = 'typeInter_' + inter.id + reponse['raccourci'];
              input.classList.add('typeInters');
              input.value = inter.id;
              input.dataset.inter = reponse.idInter;
              label.classList.add('h6');
              label.setAttribute('for', input.id); //label.innerHTML = inter.nom

              div.classList.add('col-sm-4');
              div.classList.add('text-center');
              div.classList.add('interType');
              div.appendChild(input);
              div.appendChild(label);
              ajout.appendChild(div);
            });

            for (var j = 0; j < listeinter.length; j++) {
              listeinter[j].dataset.inter = reponse.idInter;
            }

            var typeInters = document.querySelectorAll('.typeInters');

            var _loop3 = function _loop3(k) {
              typeInters[k].addEventListener('change', function () {
                var zoneBouton = document.querySelector('.boutton');

                while (zoneBouton.firstChild) {
                  zoneBouton.removeChild(zoneBouton.lastChild);
                }

                var contenu = JSON.stringify({
                  idIntervention: typeInters[k].dataset.inter,
                  idTypeInter: typeInters[k].value
                });
                fetch('/selectionTypeinter', {
                  method: 'POST',
                  body: contenu
                }).then(function (reponse) {
                  return reponse.json();
                }).then(function (reponse) {
                  var a = document.createElement('a');
                  a.classList.add('btn');
                  a.classList.add('btn-maincolor');
                  a.classList.add('text-white');
                  a.classList.add('right');
                  a.innerHTML = 'Page suivante';

                  if (code) {
                    a.href = '/etape2/' + reponse + '/' + code.value;
                  } else {
                    a.href = '/etape2/' + reponse;
                  }

                  zoneBouton.appendChild(a);
                });
              });
            };

            for (var k = 0; k < typeInters.length; k++) {
              _loop3(k);
            }
          });
        } else {
          document.location.href = "/createDiag";
        }
      });
    };

    for (var i = 0; i < listeinter.length; i++) {
      _loop2(i);
    }
  })();
}

if (document.title === 'Demande d\'intervention (phase 1)') {
  var typeBien = document.querySelector('#intervention_typeDeBien');
  typeBien.addEventListener('change', function () {
    if (typeBien.value === 'Autre') {
      document.querySelector('.autreBien').style.display = 'block';
    } else {
      document.querySelector('.autreBien').style.display = 'none';
    }
  });
}

/***/ }),

/***/ "./assets/js/interInstitutionnel.js":
/*!******************************************!*\
  !*** ./assets/js/interInstitutionnel.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (document.title == 'Intervention institutionnel') {
  var choixTemps = function choixTemps(duree) {
    fetch('/institutionnel/recuperer/listeInter', {
      method: 'POST',
      body: duree
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      console.log(reponse);

      for (var i = 0; i < reponse.length; i++) {
        while (corps.firstChild) {
          corps.removeChild(corps.lastChild);
        }

        var liste = reponse[i];
        var tr = document.createElement('tr');

        for (var j = 0; j < liste['inter'].length; j++) {
          var element = liste['inter'][j];
          console.log(element);
          console.log(_typeof(liste['inter'][0]));

          var _td = document.createElement('td');

          var span = document.createElement('p');
          span.innerHTML = element;

          _td.appendChild(span);

          tr.appendChild(_td);
        }

        var td = document.createElement('td');

        if (liste['result']["result"] == true) {
          var button = document.createElement('a');
          button.classList.add('btn');
          button.classList.add('btn-maincolor');
          button.classList.add('reserverOtd');
          button.href = '/creerInterInsti/' + liste.tipi.listeInter + '/' + liste.tipi.typeInter + '/' + liste.tipi.date + '/' + liste.tipi.otd + '/' + liste.tipi.ville + '/' + liste.tipi.codeP;
          button.innerText = 'Réserver cet OTD';
          td.appendChild(button);
        } else {
          var _span = document.createElement('span');

          _span.classList.add('h6');

          _span.innerHTML = "Cet OTD n'est plus disponible pour cette date";
          td.appendChild(_span);
        }

        tr.appendChild(td);
        corps.appendChild(tr);
      }

      var reserverOtd = document.querySelectorAll(".reserverOtd");

      var _loop = function _loop(_i) {
        reserverOtd[_i].addEventListener('click', function (e) {
          e.preventDefault();
          document.querySelector('#modalInterInsti').style.display = 'block';
          document.querySelector("#continuer").addEventListener('click', function () {
            document.location.href = reserverOtd[_i].href;
          });
          document.querySelector('#close-modal').addEventListener('click', function () {
            document.querySelector("modalInterInsti").style.display = "none";
          });
        });
      };

      for (var _i = 0; _i < reserverOtd.length; _i++) {
        _loop(_i);
      }
    });
  };

  var temps = document.querySelector('#duree');
  var corps = document.querySelector('.corpsTable');
  document.addEventListener('DOMContentLoaded', function () {
    choixTemps('P7D');
  });
  temps.addEventListener('change', function () {
    while (corps.lastChild) {
      corps.removeChild(corps.lastChild);
    }

    choixTemps(temps.value);
  });
}

if (document.title == 'Nouvelle Intervention institutionnel') {
  (function () {
    var button = document.querySelector('.boutonRemplace');
    var realInput = document.querySelector('.custom-file-input');
    button.addEventListener('click', function () {
      realInput.click();
      realInput.addEventListener('change', function () {
        console.log(realInput.files.length);
        button.innerHTML = realInput.files.length + ' fichier(s) selectionné(s)';
      });
    });
    var radio = document.getElementsByName('inter_insti[intemp]');
    var intemp = document.querySelectorAll('.intempInsti');

    var _loop2 = function _loop2(i) {
      var element = radio[i];
      element.addEventListener('change', function () {
        if (element.value == 'Oui') {
          console.log('ok');

          for (var j = 0; j < intemp.length; j++) {
            var elementIntemp = intemp[j];
            elementIntemp.style.display = 'block';
          }
        } else {
          for (var k = 0; k < intemp.length; k++) {
            var elementNonIntemp = intemp[k];
            elementNonIntemp.style.display = 'none';
          }
        }
      });
    };

    for (var i = 0; i < radio.length; i++) {
      _loop2(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/interrapide.js":
/*!**********************************!*\
  !*** ./assets/js/interrapide.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title === "Demande d'intervention (phase 1)") {
  console.log('ok');
  var possible = document.querySelector('.possible');

  if (possible && possible.value === 'true') {
    (function () {
      var decollage = document.getElementsByName("intervention[decollage]");
      var retract = document.getElementsByName('intervention[renoncementDelaiRetract]');
      console.log(retract);

      var _loop = function _loop(i) {
        decollage[i].addEventListener('change', function () {
          if (decollage[i].value === 'Oui') {
            if (retract.length > 0) {
              for (var j = 0; j < retract.length; j++) {
                retract[i].addEventListener('change', function () {
                  if (retract[i].value === "1") {
                    document.querySelector('.modalMess').click();
                  }
                });
              }
            } else {
              document.querySelector('.modalMess').click();
            }
          }
        });
      };

      for (var i = 0; i < decollage.length; i++) {
        _loop(i);
      }
    })();
  }
}

/***/ }),

/***/ "./assets/js/interventionPerso.js":
/*!****************************************!*\
  !*** ./assets/js/interventionPerso.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == "Créer une intervention") {
  var inter = function inter() {
    var form = new FormData();
    form.append('idDrone', drone.value);
    form.append('idListeInter', listeInter.value);
    form.append('idTypeInter', type.value);
    form.append('date', Date.parse(date.value) / 1000);
    form.append('precision', precision.value);
    form.append('idSalarie', bouton.dataset.salarie);

    for (var i = 0; i < adresse.length; i++) {
      form.append(adresse[i].dataset.identifiant, adresse[i].value);
    }

    if (civilite[0].checked) {
      genre = civilite[0].value;
    } else {
      genre = civilite[1].value;
    }

    form.append(civilite[0].dataset.identifiant, genre);
    form.append(civilite[2].dataset.identifiant, civilite[2].value);
    form.append(civilite[3].dataset.identifiant, civilite[3].value);

    if (ouiIntemp.checked) {
      for (var _i = 0; _i < typeIntemp.length; _i++) {
        if (typeIntemp[_i].checked) {
          intemp.push([typeIntemp[_i].value]);
        }
      }

      if (autre.value !== "") {
        intemp.push([autre.value]);
      }

      form.append('dateIntemp', Date.parse(dateIntemp.value) / 1000);
      form.append('intemperie', intemp);
    }

    fetch('/enregistrerInter', {
      method: 'POST',
      body: form
    }).then(function (reponse) {
      if (reponse) {
        document.location.href = '/mes interventions';
      }
    });
  };

  var listeInter = document.querySelector('.listeinter');
  var type = document.querySelector('.typeInter');
  var bouton = document.querySelector('.btn-maincolor');
  var adresse = document.querySelectorAll('.adresses');
  var precision = document.querySelector('.precision');
  var date = document.querySelector('.Date');
  var drone = document.querySelector('.drone');
  var civilite = document.querySelectorAll('.civilite');
  var typeIntemp = document.querySelectorAll('.intemp');
  var ouiIntemp = document.querySelector("#ouiIntemp");
  var nonItemp = document.querySelector('#nonIntemp');
  var dateIntemp = document.querySelector('#dateItemp');
  var autre = document.querySelector('#autre');
  var genre;
  var intemp = [];
  ouiIntemp.addEventListener('click', function () {
    document.querySelector('.typeintemp').style.display = 'flex';
  });
  nonItemp.addEventListener('click', function () {
    document.querySelector('.typeintemp').style.display = 'none';
  });
  listeInter.addEventListener('change', function () {
    fetch('/preciserInter', {
      method: 'POST',
      body: listeInter.value
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      while (type.firstChild) {
        type.removeChild(type.lastChild);
      }

      for (var key in reponse) {
        var option = document.createElement('option');

        if (reponse.hasOwnProperty(key)) {
          var element = reponse[key];
          option.value = element['id'];
          option.innerText = element['nom'];
          type.appendChild(option);
        }
      }
    });
  });
  bouton.addEventListener('click', function () {
    if (listeInter.dataset.nom == 'interventions aériennes') {
      if (drone.value) {
        inter();
      } else {
        alert('Veuillez renseignez le type de drone utilisé');
      }
    } else {
      inter();
    }
  });
}

/***/ }),

/***/ "./assets/js/interventionRealise.js":
/*!******************************************!*\
  !*** ./assets/js/interventionRealise.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === 'Interventions réalisées') {
  var facture = function facture(mois) {
    var premier = new Date(mois.getFullYear(), mois.getMonth(), 1);
    var lastDay = new Date(mois.getFullYear(), mois.getMonth() + 1, 0);
    var post = JSON.stringify({
      debut: premier.toLocaleString('fr-Fr', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      }),
      fin: lastDay.toLocaleString('fr-FR', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      })
    });
    fetch("/findInter", {
      method: 'POST',
      body: post
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      while (tbody.firstChild) {
        tbody.removeChild(tbody.lastChild);
      }

      var _iterator = _createForOfIteratorHelper(response),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var responseElement = _step.value;
          var divDate = document.createElement('div');
          divDate.classList.add('col-4');
          divDate.classList.add('text-dark');
          divDate.classList.add("tableAccueil");
          divDate.innerHTML = responseElement.date;
          tbody.appendChild(divDate);
          var divInter = document.createElement('div');
          divInter.classList.add('col-4');
          divInter.classList.add('text-dark');
          divInter.classList.add("tableAccueil");
          divInter.innerHTML = responseElement.type + '<br>' + responseElement.liste;
          tbody.appendChild(divInter);
          var divAdresse = document.createElement('div');
          divAdresse.classList.add('col-4');
          divAdresse.classList.add('text-dark');
          divAdresse.classList.add("tableAccueil");
          divAdresse.innerHTML = responseElement.adresse.numero + ' ' + responseElement.adresse.voie + '<br>' + responseElement.adresse.cp + ' ' + responseElement.adresse.ville;
          tbody.appendChild(divAdresse);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
  };

  var date = new Date();
  var zoneDate = document.querySelector('.mois');
  zoneDate.innerHTML = date.toLocaleString('fr-Fr', {
    month: 'long',
    year: 'numeric'
  });
  var suivant = document.querySelector('.suiv');
  var precedent = document.querySelector('.prec');
  var tbody = document.querySelector('.reponseInter');
  suivant.addEventListener('click', function () {
    var moisSuivant = new Date(date.setMonth(date.getMonth() + 1));
    zoneDate.innerHTML = moisSuivant.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    facture(moisSuivant);
  });
  precedent.addEventListener('click', function () {
    var moisSuivant = new Date(date.setMonth(date.getMonth() - 1));
    zoneDate.innerHTML = moisSuivant.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    facture(moisSuivant);
  });
}

/***/ }),

/***/ "./assets/js/kyc.js":
/*!**************************!*\
  !*** ./assets/js/kyc.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

if (document.title === 'Creation compte MangoPay') {
  var chargeFile = function chargeFile(nomBouton, nomRealInput) {
    nomBouton.addEventListener('click', function () {
      nomRealInput.click();
      nomRealInput.addEventListener('change', function () {
        nomBouton.innerHTML = nomRealInput.files[0].name;
      });
    });
  };

  var boutonKbis = document.querySelector('#boutonKbis');
  var boutonIdentite = document.querySelector('#boutonIdentite');
  var boutonStatut = document.querySelector('#boutonStatut');
  var realInputKbis = document.querySelector('#kbis');
  var realInputStatut = document.querySelector('#statut');
  var realInputIdentitte = document.querySelector('#identite');
  var dateNaissance = document.querySelector('#dateNaissance');
  var lieuNaissance = document.querySelector('#lieuNaissance');
  var button = document.querySelector('.btn-maincolor');
  chargeFile(boutonKbis, realInputKbis);

  if (boutonStatut) {
    chargeFile(boutonStatut, realInputStatut);
  }

  chargeFile(boutonIdentite, realInputIdentitte);
  button.addEventListener('click', function () {
    var form = new FormData();
    form.append('identite', realInputIdentitte.files[0]);

    if (boutonStatut) {
      form.append('statut', realInputStatut.files[0]);
    }

    form.append('kbis', realInputKbis.files[0]);
    form.append('naissance', dateNaissance.value);
    form.append('lieu', lieuNaissance.value);
    document.querySelector('.btn-primary').click();
    fetch('/loadKyc', {
      method: 'POST',
      body: form
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      if (response['reponse'] === 'ok') {
        alert('Les documents ont bien été envoyés.');
        document.location.href = '/entreprise';
      } else {
        document.querySelector('.btn-secondary').click();
        document.querySelector('.message').innerHTML = response;
        setTimeout(function () {
          document.location.href = '/entreprise';
        }, 1000);
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/listeFactureAdmin.js":
/*!****************************************!*\
  !*** ./assets/js/listeFactureAdmin.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Liste des factures') {
  var facture = function facture(choixdate, lien, dossier, listeFacture, moisDoc) {
    moisDoc.innerHTML = choixdate.toLocaleString('fr-Fr', {
      month: 'long',
      year: 'numeric'
    });
    var premier = new Date(choixdate.getFullYear(), choixdate.getMonth(), 1);
    var lastDay = new Date(choixdate.getFullYear(), choixdate.getMonth() + 1, 0);
    var post = JSON.stringify({
      debut: premier.toLocaleString('fr-Fr', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      }),
      fin: lastDay.toLocaleString('fr-FR', {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric'
      })
    });
    fetch(lien, {
      method: 'POST',
      body: post
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      for (var i = 0; i < reponse.length; i++) {
        var a = document.createElement("a");
        var img = document.createElement("img");
        var div = document.createElement("div");
        var span = document.createElement("span");
        span.textContent = reponse[i];
        div.classList.add("col-sm-2");
        a.href = dossier + reponse[i] + '.pdf';
        a.target = "_blank";
        img.src = '/css/css_admin/img/pdf.png';
        a.appendChild(img);
        a.appendChild(span);
        div.appendChild(a);
        listeFacture.appendChild(div);
      }
    });
  };

  var date = new Date();
  var mois = document.querySelector('.date');
  var liste = document.querySelector('.liste');
  var dateDevis = document.querySelector('.dateDevis');
  var listeDevis = document.querySelector('.devis');
  var suivant = document.querySelector('.suivant');
  var precedent = document.querySelector('.precedent');
  var suivantDevis = document.querySelector('.moisApres');
  var precedentDevis = document.querySelector('.moisAvant');
  document.addEventListener("DOMContentLoaded", function () {
    var dossier = '/uploads/factureAdmin/';
    var lien = '/admin/retourListe';
    var lienDevis = '/admin/listeDevis';
    var dossierDevis = 'uploads/devisAdmin/';
    facture(date, lien, dossier, liste, mois);
    facture(date, lienDevis, dossierDevis, listeDevis, dateDevis);
  }); //Facture

  suivant.addEventListener('click', function () {
    var moisApres = new Date(date.setMonth(date.getMonth() + 1));
    var dossier = '/uploads/factureAdmin/';
    var lien = '/admin/retourListe';
    facture(moisApres, lien, dossier, liste, mois);

    while (liste.firstChild) {
      liste.removeChild(liste.lastChild);
    }
  });
  precedent.addEventListener('click', function () {
    var moisAvant = new Date(date.setMonth(date.getMonth() - 1));
    var lien = '/admin/retourListe';
    var dossier = '/uploads/factureAdmin/';
    facture(moisAvant, lien, dossier, liste, mois);

    while (liste.firstChild) {
      liste.removeChild(liste.lastChild);
    }
  }); //Devis

  suivantDevis.addEventListener('click', function () {
    var moisApres = new Date(date.setMonth(date.getMonth() + 1));
    var lienDevis = '/admin/listeDevis';
    var dossierDevis = '/uploads/devisAdmin/';
    facture(moisApres, lienDevis, dossierDevis, listeDevis, dateDevis);

    while (listeDevis.firstChild) {
      listeDevis.removeChild(listeDevis.lastChild);
    }
  });
  precedentDevis.addEventListener('click', function () {
    var moisAvant = new Date(date.setMonth(date.getMonth() - 1));
    var lienDevis = '/admin/listeDevis';
    var dossierDevis = '/uploads/devisAdmin/';
    facture(moisAvant, lienDevis, dossierDevis, listeDevis, dateDevis);

    while (listeDevis.firstChild) {
      listeDevis.removeChild(listeDevis.lastChild);
    }
  });
}

/***/ }),

/***/ "./assets/js/listeImmeuble.js":
/*!************************************!*\
  !*** ./assets/js/listeImmeuble.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === 'Demande accès') {
  var valider = document.querySelector('.btn-maincolor');
  var ville = document.querySelector('#ville');
  var aClass = 'btn';
  var aClass2 = 'btn-success';
  var tdClass = 'color-dark';
  var tdClass2 = 'text-center';
  var tbody = document.querySelector('.corps');
  valider.addEventListener('click', function () {
    fetch('/syndic/listeImmeuble', {
      method: 'POST',
      body: ville.value
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      var _iterator = _createForOfIteratorHelper(response),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var responseElement = _step.value;
          var tr = document.createElement('tr');
          var tdNom = document.createElement('td');
          tdNom.innerText = responseElement.nom;
          tdNom.classList.add(tdClass);
          tdNom.classList.add(tdClass2);
          var tdAdresse = document.createElement('td');
          tdAdresse.innerHTML = responseElement.adresse;
          tdAdresse.classList.add(tdClass);
          tdAdresse.classList.add(tdClass2);
          var tdLien = document.createElement('td');
          var button = document.createElement('a');
          button.innerText = "Demander l'accès à l'interface";
          button.href = "/syndic/demande access/" + responseElement.identifiant;
          button.classList.add(aClass);
          button.classList.add(aClass2);
          tdLien.classList.add(tdClass2);
          tdLien.appendChild(button);
          tr.appendChild(tdNom);
          tr.appendChild(tdAdresse);
          tr.appendChild(tdLien);
          tbody.appendChild(tr);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/listeInterVille.js":
/*!**************************************!*\
  !*** ./assets/js/listeInterVille.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Recherche par ville') {
  var bouton = document.querySelector('.btn-maincolor');
  var ville = document.querySelector('.ville');
  var zoneR = document.querySelector('.distance');
  var temps = document.querySelector("#delai");
  var tbody = document.querySelector('tbody');
  bouton.addEventListener('click', function () {
    var contenu = JSON.stringify({
      lieu: ville.value,
      distance: zoneR.value,
      delai: temps.value
    });
    fetch('/institution/listeInter/ville', {
      method: 'POST',
      body: contenu
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      while (tbody.firstChild) {
        tbody.removeChild(tbody.lastChild);
      }

      for (var i = 0; i < response.length; i++) {
        var rep = response[i];
        var tr = document.createElement('tr');
        tr.classList.add('color-dark');
        var tdDate = document.createElement('td');
        tdDate.innerHTML = rep.inter[0];
        tr.appendChild(tdDate);
        var tdlieu = document.createElement('td');
        tdlieu.innerHTML = rep.inter[1];
        tr.appendChild(tdlieu);
        var tdinter = document.createElement('td');
        tdinter.innerHTML = rep.inter[2];
        tdLien = document.createElement('td');

        if (rep.result.result == true) {
          var a = document.createElement('a');
          a.classList.add('btn');
          a.classList.add('btn-maincolor');
          a.classList.add('modalInterGc');
          a.innerHTML = 'OTD disponible le ' + rep.result.date;
          a.style.color = 'black';
          a.href = '/creerInterInsti/' + rep.tipi.listeInter + '/' + rep.tipi.typeInter + '/' + rep.tipi.date + '/' + rep.tipi.otd + '/' + rep.tipi.ville + '/' + rep.tipi.codeP;
          tdLien.appendChild(a);
        } else {
          tdLien.innerHTML = 'OTD indisponible';
        }

        tr.appendChild(tdinter);
        tr.appendChild(tdLien);
        tbody.appendChild(tr);
      }

      var validerInter = document.querySelectorAll('.modalInterGc');

      var _loop = function _loop(_i) {
        validerInter[_i].addEventListener('click', function (e) {
          e.preventDefault();
          console.log(validerInter[_i].href);
          document.querySelector('#modalInterInsti').style.display = 'block';
          document.querySelector('#continuer').addEventListener('click', function () {
            document.location.href = validerInter[_i].href;
          });
          document.querySelector('#close-modal').addEventListener('click', function () {
            document.querySelector('#modalInterInsti').style.display = 'none';
          });
        });
      };

      for (var _i = 0; _i < validerInter.length; _i++) {
        _loop(_i);
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/listeMairie.js":
/*!**********************************!*\
  !*** ./assets/js/listeMairie.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == "Liste Mairie") {
  var bouton = document.querySelector('.btn-maincolor4');
  var button = document.querySelector('.btn-warning');
  bouton.addEventListener('click', function () {
    /* let adresse = "https://etablissements-publics.api.gouv.fr/v3/departements/" + departement.value + "/mairie";
     fetch(adresse, {
         method: 'GET',
        })
         .then((reponse) => {
             return reponse.json()
         })
         .then((reponse) => {
             for (const key in reponse.features) {
                 if (reponse.features.hasOwnProperty(key)) {
                     const element = reponse.features[key];
                        console.log(element.properties.email);
                    }
             }
            })*/
    fetch('/admin/envoyerVille', {
      method: 'GET'
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      console.log(reponse);
    });
  });
  button.addEventListener('click', function () {
    fetch('/admin/envoyerVille', {
      method: 'GET'
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      console.log(reponse);
    });
  });
}

/***/ }),

/***/ "./assets/js/map.js":
/*!**************************!*\
  !*** ./assets/js/map.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Liste entreprises') {
  document.addEventListener('DOMContentLoaded', function () {
    fetch('/administrateur/marker', {
      method: 'GET'
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      JSON.stringify(response);
      var script = document.createElement('script');
      script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyB7MwwRvn0FLxtVv6GRuUEo3QDgPDMQkWU&callback=initMap';
      script.defer = true;
      script.async = true;

      window.initMap = function () {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {
            lat: 46.9,
            lng: 2.43896484375
          },
          zoom: 6,
          mapTypeControl: true,
          scrollwheel: false,
          zoomControl: false
        });

        for (var i = 0; i < response.length; i++) {
          var myLatlng = new google.maps.LatLng(response[i][0], response[i][1]);
          var marker = new google.maps.Marker({
            position: myLatlng,
            map: map
          });
        }
      };

      document.head.appendChild(script);
    });
  });
}

/***/ }),

/***/ "./assets/js/message.js":
/*!******************************!*\
  !*** ./assets/js/message.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

if (document.title == 'Espace administrateur Envoyer message') {
  document.getElementById('admin_message_selectionDestinataire').addEventListener('change', function () {
    if (document.getElementById('admin_message_selectionDestinataire').value == 3) {
      document.getElementById('mail').style.display = 'block';
      document.getElementById('destinataire').classList.replace('col-lg-12', 'col-lg-6');
      document.getElementById('admin_message_mail').setAttribute('required', true);
    }

    if (document.getElementById('admin_message_selectionDestinataire').value != 3) {
      document.getElementById('mail').style.display = 'none';
      document.getElementById('destinataire').classList.replace('col-lg-6', 'col-lg-12');
      document.getElementById('admin_message_mail').removeAttribute('required');
    }
  });
}

/***/ }),

/***/ "./assets/js/messageEntreprise.js":
/*!****************************************!*\
  !*** ./assets/js/messageEntreprise.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Lire un message') {
  document.getElementById('repondre').addEventListener('click', function () {
    document.getElementById('reponse').style.display = 'block';
  });
  document.getElementById('fermer').addEventListener('click', function () {
    document.getElementById('reponse').close();
  }); //fonctionnalite marquer comme lu

  var adresse = document.getElementById('chemin');
  chemin.addEventListener('click', function (e) {
    e.preventDefault();
    fetch(adresse.href, {
      method: 'GET',
      headers: new Headers()
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      JSON.stringify(response);

      if (response.reponse) {
        adresse.style.display = 'none';
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/meteo.js":
/*!****************************!*\
  !*** ./assets/js/meteo.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'localisation intervention') {
  var ville = document.querySelector('#adresse_ville');
  var numero = document.querySelector('#adresse_numero');
  var cp = document.querySelector('#adresse_codePostal');
  var rue = document.querySelector('#adresse_nomVoie');
  var idInter = document.querySelector('.btn-maincolor').dataset.inter;
  var explication = document.querySelectorAll('.explication');
  ville.addEventListener('change', function () {
    var content = JSON.stringify({
      numeroVoie: numero.value,
      nomVoie: rue.value,
      codePostal: cp.value,
      nomVille: ville.value,
      inter: idInter
    });
    fetch('/meteo', {
      method: 'POST',
      body: content
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      explication[0].innerHTML = "Le risque de pluie est de " + reponse['pluie'] + "%";
      explication[1].innerHTML = "Le vent soufflera à " + reponse['vent'] + " km/h avec des rafales à " + reponse['ventRafale'] + " km/h";
      explication[2].innerHTML = "La température sera de " + reponse['temperature'] + "°";
    });
  });
}

/***/ }),

/***/ "./assets/js/meteoInter.js":
/*!*********************************!*\
  !*** ./assets/js/meteoInter.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Météo pour mes interventions') {
  (function () {
    var interventions = document.querySelectorAll('input[type=hidden]');
    var temps = document.querySelectorAll('.temp');
    var temperature = document.querySelectorAll('.tempe');
    var vent = document.querySelectorAll('.wind');

    var _loop = function _loop(i) {
      fetch('/retournMeteo/' + interventions[i].value, {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        temps[i].innerHTML = response[0].temps;
        temperature[i].innerHTML = response[0].temp + ' C°';
        vent[i].innerHTML = 'Vent moyen : ' + response[0].vent + ' km/h <br> ' + 'Rafales : ' + response[0].rafale + ' km/h';
      });
    };

    for (var i = 0; i < interventions.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/missionAdminOdi.js":
/*!**************************************!*\
  !*** ./assets/js/missionAdminOdi.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Modifier et ajouter des missions") {
  var missions = document.querySelectorAll(".missionAdmin");
  var oldFamilles = document.querySelectorAll(".oldFamille");
  var zoneSousFamille = document.querySelector('.zoneSousFamille');
  var validerMissions = document.querySelectorAll('.btn-success');
  var actifs = document.querySelectorAll('.actif');

  var _iterator = _createForOfIteratorHelper(missions),
      _step;

  try {
    var _loop = function _loop() {
      var mission = _step.value;
      mission.addEventListener('keyup', function () {
        fetch("/administrateur/modifierMission/" + mission.dataset.mission, {
          method: 'post',
          body: mission.value
        });
      });
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = _createForOfIteratorHelper(validerMissions),
      _step2;

  try {
    var _loop2 = function _loop2() {
      var validerMission = _step2.value;
      validerMission.addEventListener('click', function () {
        var listeTaille = [];
        var typeMission;
        var mission = document.querySelector(validerMission.dataset.mission);
        var tailles = document.querySelectorAll(validerMission.dataset.taille);
        var types = document.querySelectorAll(validerMission.dataset.type);

        var _iterator4 = _createForOfIteratorHelper(types),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var type = _step4.value;

            if (type.checked) {
              typeMission = type.value;
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        var _iterator5 = _createForOfIteratorHelper(tailles),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var taille = _step5.value;

            if (taille.checked === false) {
              listeTaille.push(taille.value);
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        fetch("/administrateur/validerMission", {
          method: 'post',
          body: JSON.stringify({
            mission: mission.value,
            type: typeMission,
            taille: listeTaille
          })
        });
      });
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var _iterator3 = _createForOfIteratorHelper(actifs),
      _step3;

  try {
    var _loop3 = function _loop3() {
      var actif = _step3.value;
      actif.addEventListener('change', function () {
        fetch("/administrateur/activerMission", {
          method: "post",
          body: JSON.stringify({
            id: actif.value,
            act: actif.dataset.actif
          })
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          actif.dataset['actif'] = response;
        });
      });
    };

    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      _loop3();
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}

/***/ }),

/***/ "./assets/js/modalAdmin.js":
/*!*********************************!*\
  !*** ./assets/js/modalAdmin.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Espace administrateur Lire messsage') {
  document.getElementById('repondre').addEventListener('click', function () {
    document.getElementById('reponse').style.display = 'block';
  });
  document.getElementById('reponse').addEventListener('click', function () {
    document.getElementById('reponse').close();
  }); //fonctionnalite marquer comme lu

  var adresse = document.getElementById('chemin');
  chemin.addEventListener('click', function (e) {
    e.preventDefault();
    fetch(adresse.href, {
      method: 'GET',
      headers: new Headers()
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      JSON.stringify(response);

      if (response.reponse) {
        adresse.style.display = 'none';
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/modalInscription.js":
/*!***************************************!*\
  !*** ./assets/js/modalInscription.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title == 'Phase 2 de votre inscription' || document.title == 'Phase 3 choix abonnement' || document.title == 'Phase 4 choix des tarifs' || document.title == 'Phase 5 choix des tarifs' || document.title == 'Phase 6 de votre inscription') {
  document.addEventListener('DOMContentLoaded', function () {
    var phase2 = document.querySelector('.modal');
    var fermer = document.querySelector('.btn-secondary');
    phase2.style.display = 'block';
    fermer.addEventListener('click', function () {
      phase2.style.display = 'none';
    });
  });
}

/***/ }),

/***/ "./assets/js/modfiInfoInsti.js":
/*!*************************************!*\
  !*** ./assets/js/modfiInfoInsti.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Modifier mes infos') {
  (function () {
    var validerMail = document.querySelector('.modifEmail');
    var validerPassword = document.querySelector('.modifPassword');
    var validetTel = document.querySelector('.modifTelephone');
    var validerLogo = document.querySelector('.validerLogo');
    var validerAdresse = document.querySelector('.validerAdresse');
    var validerBandeau = document.querySelector('.validerBandeau');
    var validerSite = document.querySelector('.modifSite');
    var validerDistance = document.querySelector('.modifDistance');
    var validerTravaux = document.querySelector('.validerTravaux');
    var travaux = document.querySelectorAll('.checkPerso');
    validerMail.addEventListener('click', function () {
      fetch('/modifChamp/email', {
        method: 'POST',
        body: document.querySelector('#mail').value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('.closeMail').click();
        document.querySelector('.email').innerText = response;
      });
    });
    validerPassword.addEventListener('click', function () {
      fetch('/modifChamp/password', {
        method: 'POST',
        body: document.querySelector('#password').value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('.closePassword').click();
        document.querySelector('.password').innerText = response;
      });
    });
    validetTel.addEventListener('click', function () {
      fetch('/modifChamp/telephone', {
        method: 'POST',
        body: document.querySelector('#telephone').value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('.closeTelephone').click();
        document.querySelector('.telephone').innerText = response;
      });
    });

    if (validerDistance) {
      validerDistance.addEventListener('click', function () {
        fetch('/modifChamp/distanceInter', {
          method: 'POST',
          body: document.querySelector('#distanceInter').value
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.querySelector('.closeDistance').click();
          document.querySelector('.distance').innerText = response;
        });
      });
    }

    if (validerSite) {
      validerSite.addEventListener('click', function () {
        fetch('/modifChamp/siteWeb', {
          method: 'POST',
          body: document.querySelector('#siteWeb').value
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.querySelector('.closeSite').click();
          document.querySelector('.modifSite').innerText = response;
        });
      });
    }

    if (validerBandeau) {
      validerBandeau.addEventListener('click', function () {
        var bandeau = document.querySelector('#bandeauPub');
        var contenu = new FormData();
        contenu.append('bandeau', bandeau.files[0]);
        fetch('/modifChamp/bandeau', {
          method: 'POST',
          body: contenu
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.querySelector('.closeBandeau').click();
          document.querySelector('.modifBandeau').innerText = response;
        });
      });
    }

    validerLogo.addEventListener('click', function () {
      var logo = document.querySelector('#logoInsti');
      var contenu = new FormData();
      contenu.append('logo', logo.files[0]);
      fetch('/modifChamp/logoInsti', {
        method: 'POST',
        body: contenu
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('.closeLogo').click();
        document.querySelector('.modifLogo').innerText = response;
      });
    });
    validerAdresse.addEventListener('click', function () {
      var contenu = JSON.stringify({
        numero: document.querySelector('#numero').value,
        voie: document.querySelector('#rue').value,
        cp: document.querySelector('#cp').value,
        ville: document.querySelector('#ville').value
      });
      fetch('/modifChamp/adresse', {
        method: 'POST',
        body: contenu
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('.closeAdresse').click();
        var adresseModif = document.querySelectorAll('.adresseModif');
        adresseModif[0].innerText = response.numero;
        adresseModif[1].innerText = response.voie;
        adresseModif[2].innerText = response.cp;
        adresseModif[3].innerText = response.ville;
      });
    });
    validerTravaux.addEventListener('click', function () {
      document.location.reload();
    });

    var _loop = function _loop(i) {
      travaux[i].addEventListener('change', function () {
        if (travaux[i].checked) {
          raison = "ajout";
        } else {
          raison = "retrait";
        }

        fetch("/modifier/ChangeTravaux", {
          method: 'POST',
          body: JSON.stringify({
            id: travaux[i].value,
            changement: raison
          })
        });
      });
    };

    for (var i = 0; i < travaux.length; i++) {
      _loop(i);
    }

    document.addEventListener('DOMContentLoaded', function () {
      fetch("/modifier/recupererTravaux", {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        for (var _i = 0; _i < response.length; _i++) {
          for (var j = 0; j < travaux.length; j++) {
            if ("id" + response[_i] === travaux[j].id) {
              travaux[j].checked = true;
            }
          }
        }
      });
    });
  })();
}

/***/ }),

/***/ "./assets/js/modifBanqueGc.js":
/*!************************************!*\
  !*** ./assets/js/modifBanqueGc.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Changer mes coordonnées bancaires") {
  var iban = document.querySelector('#iban').value;
  var bic = document.querySelector('#bic').value;
  var adresse = document.querySelector('#adresse').value;
  var nomBanque = document.querySelector('#nom').value;
  var valider = document.querySelector('.btn-maincolor');
  valider.addEventListener('click', function () {
    console.log(iban.length);
    var body = JSON.stringify({
      iban: iban,
      bic: bic,
      adresse: adresse,
      nom: nomBanque
    });

    if (iban.length === 27) {
      fetch('/modifRouteGc', {
        body: body,
        method: 'POST'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response === 'non valide') {
          alert('Numéro iban inchangé');
        } else {
          document.location.href = "/sepa";
        }
      });
    } else {
      alert("Numéro iban invalide");
    }
  });
}

/***/ }),

/***/ "./assets/js/modifBanqueOtd.js":
/*!*************************************!*\
  !*** ./assets/js/modifBanqueOtd.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Changer banque") {
  var bouton = document.querySelector('.btn-maincolor');
  var textArea = document.querySelector('textarea');
  bouton.addEventListener('click', function () {
    var confimer = confirm("Souhaitez vous envoyer votre demande ?");

    if (confimer) {
      fetch("/validerModifBanqueOtd", {
        method: 'POST',
        body: textArea.value
      }).then(function (response) {
        alert('Votre demande bien été enregistrée');
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/modifierInfoDemandeur.js":
/*!********************************************!*\
  !*** ./assets/js/modifierInfoDemandeur.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Mes informations') {
  var validerAdresse = document.querySelector('.validerAdresse');
  var validerTva = document.querySelector('.validerTva');
  var validerSiret = document.querySelector('.validerSiret');
  var numero = document.querySelector('#numero');
  var voie = document.querySelector('#voie');
  var cp = document.querySelector('#cp');
  var ville = document.querySelector('#ville');
  var validerTel = document.querySelector('.validerTelephone');
  validerAdresse.addEventListener('click', function () {
    if (voie.value !== "" && cp.value !== "" && ville.value !== "") {
      var contenu = JSON.stringify({
        num: numero.value,
        rue: voie.value,
        code: cp.value,
        city: ville.value
      });
      fetch("/modifierAdresseDemandeur", {
        method: 'POST',
        body: contenu
      }).then(function () {
        document.location.reload();
      });
    }
  });
  validerTel.addEventListener('click', function () {
    var numero = document.querySelector('#telephone');

    if (numero.value.length === 10) {
      fetch("/modifTelDemandeur", {
        method: 'POST',
        body: numero.value
      }).then(function () {
        document.location.reload();
      });
    }
  });

  if (validerTva) {
    validerTva.addEventListener('click', function () {
      var confirmer = confirm("Souhiatez vous enregister ce nouveau numéro de TVA intracommunautaire ?");

      if (confirmer) {
        fetch("/modifTvaDemandeur", {
          method: 'post',
          body: document.querySelector("#tva").value
        }).then(function () {
          document.location.reload();
        });
      }
    });
  }

  if (validerSiret) {
    validerSiret.addEventListener('click', function () {
      var confirmer = confirm("Souhaitez vous enregister ce nouveau numéro de SIRET ?");

      if (confirmer) {
        fetch("/modifSiretDemandeur", {
          method: 'post',
          body: document.querySelector('#siret').value
        }).then(function () {
          document.location.reload();
        });
      }
    });
  }
}

/***/ }),

/***/ "./assets/js/modifierLicence.js":
/*!**************************************!*\
  !*** ./assets/js/modifierLicence.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Modifier licence") {
  var changeButton = function changeButton(idFakeButton, idRealButton) {
    document.getElementById(idFakeButton).addEventListener('click', function () {
      console.log(idFakeButton);
      document.getElementById(idRealButton).click();
      document.getElementById(idRealButton).addEventListener('change', function () {
        document.getElementById(idFakeButton).innerText = document.getElementById(idRealButton).files[0]['name'];
      });
    });
  };

  var envoieFile = function envoieFile(file) {
    file.addEventListener('change', function () {
      var content = new FormData();
      content.append('fichier', file.files[0]);
      content.append('salarie', document.querySelector('#salarie').value);
      fetch("/saveFile/" + file.dataset.type, {
        method: 'POST',
        body: content
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response === "catt") {
          if (exploitant.value != "" && numeroLicence.value != "") {
            document.querySelector('#dsac').value = true;
          }
        }

        if (response === "alpha") {
          if (dateExpi.value !== "") {
            document.querySelector("#catt").value = true;
          }
        }
      });
    });
  };

  var envoieNumero = function envoieNumero(donnee) {
    donnee.addEventListener('keyup', function () {
      fetch("/saveNumberLicence/" + donnee.dataset.type, {
        method: "POST",
        body: JSON.stringify({
          id: document.querySelector('#salarie').value,
          donnee: donnee.value
        })
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        if (reponse === "aptitutde" || reponse === "exploitant") {
          if (licence.files[0] && exploitant.value !== "" && numeroLicence.value !== "") {
            document.querySelector("#dsac").value = true;
          }
        }
      });
    });
  };

  changeButton("licence", "realLicence");
  changeButton("justificatif", "realJustificatif");
  var licence = document.querySelector('#realLicence');
  var justificatif = document.querySelector("#realJustificatif");
  var exploitant = document.querySelector("#exploitant");
  var numeroLicence = document.querySelector('#numeroLicence');
  var dateExpi = document.querySelector(".validite");
  dateExpi.addEventListener('change', function () {
    fetch("/saveNumberLicence/" + dateExpi.dataset.type, {
      method: "POST",
      body: JSON.stringify({
        id: document.querySelector('#salarie').value,
        donnee: dateExpi.value
      })
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      if (reponse === "validite") {
        if (justificatif.file[0]) {
          document.querySelector("#catt").value = true;
        }
      }
    });
  });
  envoieFile(licence);
  envoieFile(justificatif);
  envoieNumero(numeroLicence);
  envoieNumero(exploitant);
  document.querySelector('.btn-maincolor').addEventListener('click', function () {
    console.log(document.querySelector('#catt').value === "true" && document.querySelector("#dsac").value === 'true');

    if (document.querySelector('#catt').value === "true" && document.querySelector("#dsac").value === 'true') {
      document.location.href = "/entreprise/changementValidé";
    } else {
      var confirmation = confirm("Toutes les informations ne sont pas renseignées. Souhaitez vous quitter?");

      if (confirmation) {
        document.location.href = "/entreprise";
      }
    }
  });
}

/***/ }),

/***/ "./assets/js/newLienActivation.js":
/*!****************************************!*\
  !*** ./assets/js/newLienActivation.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Compte non activé') {
  var button = document.querySelector('.btn-maincolor');
  button.addEventListener('click', function () {
    fetch("/nouveauLienActivation", {
      method: 'GET'
    }).then(function () {
      document.querySelector('.message').innerHTML = "Un nouveau lien d'activation vient de vous être envoyé .";
    });
  });
}

/***/ }),

/***/ "./assets/js/notam.js":
/*!****************************!*\
  !*** ./assets/js/notam.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === 'Notam') {
  var notam = function notam(contenu, zoom) {
    fetch('/listeNotam', {
      method: 'POST',
      body: null
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      carteNotam = L.map(carte, {
        center: [46.227638, 2.213749],
        zoom: 6,
        attributionControl: false,
        zoomControl: false,
        scrollWheelZoom: false,
        keyboard: false,
        doubleClickZoom: false,
        dragging: true
      });
      L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        maxZoom: 20,
        id: 'mapbox/streets-v11',
        tileSize: 512,
        zoomOffset: -1,
        accessToken: 'pk.eyJ1IjoieG1hdGhpZXUxMyIsImEiOiJja2N1aHU2eTAyOGZ2MnJsZjk1bjR0ZHE0In0.-N1CSInz77-O6xViA43KQw'
      }).addTo(carteNotam);

      for (var i = 0; i < response.zone.Situation.BordureS.Bordure.length; i++) {
        var bordure = response.zone.Situation.BordureS.Bordure[i].Geometrie.split('\n');
        array.push(bordure);
      }

      for (var _i = 0; _i < response.zone.Situation.HelistationS.Helistation.length; _i++) {
        var coord = [parseFloat(response.zone.Situation.HelistationS.Helistation[_i].Latitude), parseFloat(response.zone.Situation.HelistationS.Helistation[_i].Longitude)];
        var myIcon = L.icon({
          iconUrl: '\\css\\css_site\\img\\helliport.png',
          iconSize: [15, 15],
          popupAnchor: [-3, -76],
          shadowSize: [68, 95],
          shadowAnchor: [22, 94]
        });
        L.marker(coord, {
          icon: myIcon,
          title: response.zone.Situation.HelistationS.Helistation[_i].Nom
        }).addTo(carteNotam);
      }

      for (var _i2 = 0; _i2 < response.zone.Situation.ObstacleS.Obstacle.length; _i2++) {
        var icone = void 0;
        var nom = void 0;
        var _coord = [parseFloat(response.zone.Situation.ObstacleS.Obstacle[_i2].Latitude), parseFloat(response.zone.Situation.ObstacleS.Obstacle[_i2].Longitude)];
        var type = response.zone.Situation.ObstacleS.Obstacle[_i2].TypeObst;

        switch (response.zone.Situation.ObstacleS.Obstacle[_i2].TypeObst) {
          case 'Eolienne(s)':
            icone = '\\css\\css_site\\img\\eolienne.png';
            nom = 'Eolienne(s)';
            break;

          case 'Mât':
            icone = '\\css\\css_site\\img\\mat.png';
            nom = 'Mât';
            break;

          case "Château d'eau":
            icone = '\\css\\css_site\\img\\chateau.png';
            nom = "Château d'eau";
            break;

          case "Pylône":
            icone = '\\css\\css_site\\img\\pylone.png';
            nom = "Pylône";
            break;

          case "Grue":
            icone = '\\css\\css_site\\img\\grue.png';
            nom = "Grue";
            break;

          case 'Câble':
            icone = '\\css\\css_site\\img\\cable.png';
            nom = 'Câble';
            break;

          case 'Cheminée':
            icone = '\\css\\css_site\\img\\cheminee.png';
            nom = 'Cheminée';
            break;

          case 'Bâtiment':
            icone = '\\css\\css_site\\img\\batiment.png';
            nom = 'Bâtiment';
            break;

          case 'Tour':
            icone = '\\css\\css_site\\img\\tour.png';
            nom = 'Tour';
            break;

          case 'Centrale thermique':
            icone = '\\css\\css_site\\img\\centrale.png';
            nom = 'Centrale thermique';
            break;

          case 'Silo':
            icone = '\\css\\css_site\\img\\silo.png';
            nom = 'Silo';
            break;

          case 'Antenne':
            icone = '\\css\\css_site\\img\\antenne.png';
            nom = 'Antenne';
            break;

          case 'Torchère':
            icone = '\\css\\css_site\\img\\torchere.png';
            nom = 'Torchère';
            break;

          case 'Derrick':
            icone = '\\css\\css_site\\img\\derrick.png';
            nom = 'Derrick';
            break;

          case 'Treillis métallique':
            icone = '\\css\\css_site\\img\\treillis.png';
            nom = 'Treillis métallique';
            break;

          case 'Terril':
            icone = '\\css\\css_site\\img\\terril.png';
            nom = 'Terril';
            break;

          case 'Phare marin':
            icone = '\\css\\css_site\\img\\phare.png';
            nom = 'Phare marin';
            break;

          case 'Pile de pont':
            icone = '\\css\\css_site\\img\\pile.png';
            nom = 'Pile de pont';
            break;

          case 'Portique':
            icone = '\\css\\css_site\\img\\portique.png';
            nom = 'Portique';
            break;

          case 'Eglise':
            icone = '\\css\\css_site\\img\\eglise.png';
            nom = 'Eglise';
            break;
        }

        var _myIcon = L.icon({
          iconUrl: icone,
          iconSize: [15, 15],
          popupAnchor: [-3, -76],
          shadowSize: [68, 95],
          shadowAnchor: [22, 94]
        });

        L.marker(_coord, {
          icon: _myIcon,
          title: response.zone.Situation.ObstacleS.Obstacle[_i2].Combien + ' ' + type
        }).addTo(carteNotam);
      }

      var _iterator = _createForOfIteratorHelper(array),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var responseElement = _step.value;
          var table2 = [];

          var _iterator2 = _createForOfIteratorHelper(responseElement),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var responseElementElement = _step2.value;
              var net = responseElementElement.split(',');
              table2.push([parseFloat(net[0]), parseFloat(net[1])]);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          var zone2 = L.polyline(table2, {
            color: 'red'
          });
          zone2.addTo(carteNotam);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
  };

  var carte = document.querySelector('.carte');
  var carteNotam;
  var recherche = document.querySelector('#loupe');
  var adresse = document.querySelector("#rechercheAdresse");
  var array = [];
  var notams = document.querySelector('.notam');
  document.addEventListener('DOMContentLoaded', function () {
    carteNotam = L.map(carte, {
      center: [46.227638, 2.213749],
      zoom: 6,
      attributionControl: false,
      zoomControl: false,
      scrollWheelZoom: false,
      keyboard: false,
      doubleClickZoom: false,
      dragging: true
    });
    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
      maxZoom: 20,
      id: 'mapbox/streets-v11',
      tileSize: 512,
      zoomOffset: -1,
      accessToken: 'pk.eyJ1IjoieG1hdGhpZXUxMyIsImEiOiJja2N1aHU2eTAyOGZ2MnJsZjk1bjR0ZHE0In0.-N1CSInz77-O6xViA43KQw'
    }).addTo(carteNotam);
  });
  recherche.addEventListener('click', function () {
    while (carte.lastChild) {
      carte.removeChild(carte.lastChild);
    }

    carteNotam.remove();
    fetch('/listeNotam', {
      method: 'POST',
      body: adresse.value
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      carteNotam = L.map(carte, {
        center: response.coord,
        zoom: 12,
        attributionControl: false,
        zoomControl: false,
        scrollWheelZoom: false,
        keyboard: false,
        doubleClickZoom: false,
        dragging: true
      });
      L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        maxZoom: 16,
        id: 'mapbox/streets-v11',
        tileSize: 512,
        zoomOffset: -1,
        accessToken: 'pk.eyJ1IjoieG1hdGhpZXUxMyIsImEiOiJja2N1aHU2eTAyOGZ2MnJsZjk1bjR0ZHE0In0.-N1CSInz77-O6xViA43KQw'
      }).addTo(carteNotam);

      for (var i = 0; i < response.zone.Situation.BordureS.Bordure.length; i++) {
        var bordure = response.zone.Situation.BordureS.Bordure[i].Geometrie.split('\n');
        array.push(bordure);
      }

      for (var _i3 = 0; _i3 < response.zone.Situation.HelistationS.Helistation.length; _i3++) {
        var coord = [parseFloat(response.zone.Situation.HelistationS.Helistation[_i3].Latitude), parseFloat(response.zone.Situation.HelistationS.Helistation[_i3].Longitude)];
        var myIcon = L.icon({
          iconUrl: '\\css\\css_site\\img\\helliport.png',
          iconSize: [50, 50],
          popupAnchor: [-3, -76],
          shadowSize: [68, 95],
          shadowAnchor: [22, 94]
        });
        L.marker(coord, {
          icon: myIcon,
          title: response.zone.Situation.HelistationS.Helistation[_i3].Nom
        }).addTo(carteNotam);
      }

      for (var _i4 = 0; _i4 < response.zone.Situation.ObstacleS.Obstacle.length; _i4++) {
        var icone = void 0;
        var test = void 0;
        var _coord2 = [parseFloat(response.zone.Situation.ObstacleS.Obstacle[_i4].Latitude), parseFloat(response.zone.Situation.ObstacleS.Obstacle[_i4].Longitude)];
        var type = response.zone.Situation.ObstacleS.Obstacle[_i4].TypeObst;

        switch (response.zone.Situation.ObstacleS.Obstacle[_i4].TypeObst) {
          case 'Eolienne(s)':
            icone = '\\css\\css_site\\img\\eolienne.png';
            test = 'Eolienne(s)';
            break;

          case 'Mât':
            icone = '\\css\\css_site\\img\\mat.png';
            test = 'Mât';
            break;

          case "Château d'eau":
            icone = '\\css\\css_site\\img\\chateau.png';
            test = "Château d'eau";
            break;

          case "Pylône":
            icone = '\\css\\css_site\\img\\pylone.png';
            test = "Pylône";
            break;

          case "Grue":
            icone = '\\css\\css_site\\img\\grue.png';
            test = "Grue";
            break;

          case 'Câble':
            icone = '\\css\\css_site\\img\\cable.png';
            test = 'Câble';
            break;

          case 'Cheminée':
            icone = '\\css\\css_site\\img\\cheminee.png';
            test = 'Cheminée';
            break;

          case 'Bâtiment':
            icone = '\\css\\css_site\\img\\batiment.png';
            test = 'Bâtiment';
            break;

          case 'Tour':
            icone = '\\css\\css_site\\img\\tour.png';
            test = 'Tour';
            break;

          case 'Centrale thermique':
            icone = '\\css\\css_site\\img\\centrale.png';
            test = 'Centrale thermique';
            break;

          case 'Silo':
            icone = '\\css\\css_site\\img\\silo.png';
            test = 'Silo';
            break;

          case 'Antenne':
            icone = '\\css\\css_site\\img\\antenne.png';
            test = 'Antenne';
            break;

          case 'Torchère':
            icone = '\\css\\css_site\\img\\torchere.png';
            test = 'Torchère';
            break;

          case 'Derrick':
            icone = '\\css\\css_site\\img\\derrick.png';
            test = 'Derrick';
            break;

          case 'Treillis métallique':
            icone = '\\css\\css_site\\img\\treillis.png';
            test = 'Treillis métallique';
            break;

          case 'Terril':
            icone = '\\css\\css_site\\img\\terril.png';
            test = 'Terril';
            break;

          case 'Phare marin':
            icone = '\\css\\css_site\\img\\phare.png';
            test = 'Phare marin';
            break;

          case 'Pile de pont':
            icone = '\\css\\css_site\\img\\pile.png';
            test = 'Pile de pont';
            break;

          case 'Portique':
            icone = '\\css\\css_site\\img\\portique.png';
            test = 'Portique';
            break;

          case 'Eglise':
            icone = '\\css\\css_site\\img\\eglise.png';
            test = 'Eglise';
            break;
        }

        var _myIcon2 = L.icon({
          iconUrl: icone,
          iconSize: [50, 50],
          popupAnchor: [-3, -76],
          shadowSize: [68, 95],
          shadowAnchor: [22, 94]
        });

        L.marker(_coord2, {
          icon: _myIcon2,
          title: response.zone.Situation.ObstacleS.Obstacle[_i4].Combien + ' ' + type
        }).addTo(carteNotam);
      }

      var _iterator3 = _createForOfIteratorHelper(array),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var responseElement = _step3.value;
          var table2 = [];

          var _iterator4 = _createForOfIteratorHelper(responseElement),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var responseElementElement = _step4.value;
              var net = responseElementElement.split(',');
              table2.push([parseFloat(net[0]), parseFloat(net[1])]);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          var zone2 = L.polyline(table2, {
            color: 'red'
          });
          zone2.addTo(carteNotam);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var longNet = [];
      var re = /[\n]/;
      var re2 = /[,\n]/;
      var z = 0;
      /* for (const re2Element of response.interdit) {
           let test=[]
           z++
           if(re2Element.length>2){
                 for (let i = 0; i < re2Element.length; i++) {
                     test.push(re2Element[i].split(','))
                   }
               let table3=[]
               for(testElement of test){
                   table3.push([parseFloat(testElement[0]),parseFloat(testElement[1])]);
                 }
               let zone3 = L.polyline(table3,{color:'red'})
               console.log(zone3);
               zone3.addTo(carteNotam)
           }
         }*/

      var important = [];
      var nomPer = [];

      for (var _i5 = 0; _i5 < response.notam.length; _i5++) {
        console.log(response.notam[_i5].properties.minimumFL > 12);

        if (response.notam[_i5].properties.countryCode !== 'FRA') {
          nomPer.push(response.notam[_i5].properties);
        } else if (response.notam[_i5].properties.affectedFIR === 'FIR') {
          nomPer.push(response.notam[_i5].properties);
        } else if (parseInt(response.notam[_i5].properties.minimumFL) > 12) {
          nomPer.push(response.notam[_i5].properties);
        } else {
          important.push(response.notam[_i5].properties);
        }
      }

      var zoneImportant = document.querySelector('.important');
      var zoneNonPer = document.querySelector('.nonPer');

      for (var _i6 = 0, _nomPer = nomPer; _i6 < _nomPer.length; _i6++) {
        var nonPerElement = _nomPer[_i6];
        addElementIntable(zoneNonPer, nonPerElement);
      }

      for (var _i7 = 0, _important = important; _i7 < _important.length; _i7++) {
        var IMPORTANT = _important[_i7];
        addElementIntable(zoneImportant, IMPORTANT);
      }

      function addElementIntable(tbody, element) {
        var tr = document.createElement('tr');
        var tdDate = document.createElement('td');
        tdDate.classList.add('text-dark');
        tdDate.innerText = element.effectiveStart;
        var tdFin = document.createElement('td');
        tdFin.classList.add('text-dark');
        tdFin.innerText = element.effectiveEnd;
        var tdLocation = document.createElement('td');
        tdLocation.classList.add('text-dark');
        tdLocation.innerText = element.location;
        var tdAlt = document.createElement('td');
        tdAlt.classList.add('text-dark');
        tdAlt.innerHTML = 'Minimum : ' + element.minimumFL * 30 + "m <br>Maximum : " + element.maximumFL * 30 + "m";
        tdAlt.style.fontSize = '0.8em';
        var tdText = document.createElement('td');
        tdText.classList.add('text-dark');
        tdText.innerText = element.text;
        tdText.style.fontSize = '0.75em';
        tr.appendChild(tdDate);
        tr.appendChild(tdFin);
        tr.appendChild(tdLocation);
        tr.appendChild(tdAlt);
        tr.appendChild(tdText);
        tbody.appendChild(tr);
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/oubliepswd.js":
/*!*********************************!*\
  !*** ./assets/js/oubliepswd.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Mot de passe oublié') {
  var bouton = document.querySelector('.btn-pswd');
  bouton.addEventListener('click', function () {
    var mail = document.getElementById('mail');
    fetch('/verifyMail', {
      method: 'POST',
      body: mail.value
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      if (reponse == 'trouve') {
        document.location.href = '/bonmail';
      } else {
        document.querySelector('.message').innerHTML = "L'adresse email n'existe pas";
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/packAdminOdi.js":
/*!***********************************!*\
  !*** ./assets/js/packAdminOdi.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Create Pack ODI") {
  var nom = document.querySelector("#nomPack");
  var typeBien = document.querySelectorAll('.typeBien');
  var missions = document.querySelectorAll('.missionAdmin');
  var valider = document.querySelector('.validerPack');
  valider.addEventListener('click', function () {
    var confirmer = confirm("On valide le pack ?");
    var listeBienExclu = [];
    var listeMission = [];

    if (confirmer) {
      var _iterator = _createForOfIteratorHelper(missions),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var mission = _step.value;

          if (mission.checked) {
            listeMission.push(mission.value);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = _createForOfIteratorHelper(typeBien),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var bien = _step2.value;

          if (bien.checked === false) {
            listeBienExclu.push(bien.value);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    fetch("/administrateur/savePack", {
      method: 'post',
      body: JSON.stringify({
        nomPack: nom.value,
        bien: listeBienExclu,
        mission: listeMission
      })
    }).then(function () {
      alert("Le pack a été enregistrés");
      document.location.reload();
    });
  });
}

/***/ }),

/***/ "./assets/js/packEntreprise.js":
/*!*************************************!*\
  !*** ./assets/js/packEntreprise.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Pack entreprise") {
  var packs = document.querySelectorAll('.packOdi');
  var selectionner = document.querySelectorAll('button.btn-maincolor');
  var retirer = document.querySelectorAll('button.btn-danger');
  packs.forEach(function (pack, index) {
    return pack.addEventListener('change', function () {
      console.log(pack);

      if (pack.checked) {
        fetch("/entreprise/souscrirePack/" + pack.dataset.salarie, {
          method: 'POST',
          body: pack.value
        }).then(function () {
          selectionner[index].style.display = "none";
          retirer[index].style.display = "block";
        });
      } else {
        fetch('/entreprise/retirerPack/' + pack.dataset.salarie, {
          method: 'POST',
          body: pack.value
        }).then(function () {
          selectionner[index].style.display = "block";
          retirer[index].style.display = "none";
        });
      }
    });
  });
}

if (document.title === "Modifier mes packs") {
  var deleteMission = function deleteMission(supprimer, index, listeMission) {
    var elementListe = document.querySelectorAll('.missionModifie');
    supprimer.addEventListener('click', function () {
      var liste = elementListe[index].parentNode;
      var confirmer = confirm("Souhaitez vous supprimer cette missions de votre pack ?");

      if (confirmer) {
        fetch("/entreprise/supprimerMissionPack", {
          method: "POST",
          body: JSON.stringify({
            idMission: elementListe[index].dataset.value,
            idPack: liste.dataset.pack
          })
        }).then(function () {
          liste.removeChild(elementListe[index]);

          for (var i = 0; i < typeFamille.length; i++) {
            if (typeFamille[i].dataset.type === elementListe[index].dataset.type) {
              var divTete = document.createElement('div');
              divTete.classList.add("col-md-4", "col-sm-6", "col-12", "mt-4", "typeMission");
              var divRow = document.createElement('div');
              divRow.classList.add('row');
              var divInput = document.createElement("div");
              divInput.classList.add('col-1');
              var input = document.createElement('input');
              input.classList.add("inputMission");
              input.setAttribute('data-pack', liste.dataset.pack);
              input.value = elementListe[index].dataset.value;
              input.type = "checkbox";
              divInput.appendChild(input);
              var divLabel = document.createElement('div');
              divLabel.classList.add('col-11');
              var label = document.createElement('label');
              console.log(elementListe[index].innerHTML.split('<button>'));
              var contenu = elementListe[index].innerText.split('\n');
              label.innerText = contenu[0];
              divLabel.appendChild(label);
              divRow.appendChild(divInput);
              divRow.appendChild(divLabel);
              divTete.appendChild(divRow);
              typeFamille[i].appendChild(divTete);
            }
          }

          alert("La mission a bien été supprimée");
          missions = document.querySelectorAll('.inputMission');
          listeMission = document.querySelectorAll(".listeMissionPack");
          missions.forEach(function (mission, i) {
            addMission(mission, i, listeMission);
          });
        });
      }
    });
  };

  var addMission = function addMission(mission, i, listeMission) {
    var typeMission = document.querySelectorAll('.typeMission');
    mission.addEventListener('change', function () {
      if (mission.checked) {
        fetch("/entreprise/ajouterMission", {
          method: 'POST',
          body: JSON.stringify({
            idPack: mission.dataset.pack,
            idMission: mission.value
          })
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          var _iterator = _createForOfIteratorHelper(listeMission),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var lMission = _step.value;

              if (lMission.dataset.pack === mission.dataset.pack) {
                var li = document.createElement('li');
                li.innerText = response.mission + " ";
                li.classList.add("missionModifie");
                li.setAttribute('data-type', response.typeDiag);
                li.setAttribute("data-value", response.id);
                var button = document.createElement('button');
                button.classList.add("deleteMission");
                button.setAttribute("data-toggle", "tooltip");
                button.setAttribute("data-placement", "top");
                button.setAttribute("title", "Supprimer");
                button.innerText = "X";
                li.appendChild(button);
                lMission.appendChild(li);
                console.log(typeMission[i]);
                typeMission[i].parentNode.removeChild(typeMission[i]);
                supprimers = document.querySelectorAll(".deleteMission");
                listeMission = document.querySelectorAll(".listeMissionPack"); //Déplacer la suppression en dehors de la future fonction

                typeMission = document.querySelectorAll('.typeMission');
                supprimers.forEach(function (supprimer, index) {
                  return deleteMission(supprimer, index, listeMission);
                });
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        });
      }
    });
  };

  var supprimers = document.querySelectorAll(".deleteMission");
  var typeFamille = document.querySelectorAll('.typeFamille');
  var missions = document.querySelectorAll('.inputMission');
  var listeMission = document.querySelectorAll(".listeMissionPack");
  supprimers.forEach(function (supprimer, index) {
    return deleteMission(supprimer, index, listeMission);
  });
  missions.forEach(function (mission, i) {
    addMission(mission, i, listeMission);
  });
}

/***/ }),

/***/ "./assets/js/packSupAdmin.js":
/*!***********************************!*\
  !*** ./assets/js/packSupAdmin.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Pack supplémentaire grand compte") {
  var changeInfoPack = function changeInfoPack(nomChange) {
    var _loop = function _loop(i) {
      nomChange[i].addEventListener('keyup', function () {
        switch (nomChange) {
          case nomPack:
            {
              type = 'nom';
              break;
            }

          case prixPack:
            {
              type = 'prixPack';
              break;
            }

          case userPack:
            {
              type = 'userPack';
              break;
            }
        }

        var content = JSON.stringify({
          typeChange: type,
          id: idPack[i].dataset.id,
          valeur: nomChange[i].value
        });
        fetch("/administrateur/modifPack", {
          method: 'POST',
          body: content
        });
      });
    };

    for (var i = 0; i < nomChange.length; i++) {
      _loop(i);
    }
  };

  var newNom = document.querySelector('.newNom');
  var newUser = document.querySelector('.newUser');
  var newPrix = document.querySelector('.newPrix');
  var profil = document.querySelector('#profil');
  var type = document.querySelector('#type');
  var valider = document.querySelector('.btn-outline-success');
  valider.addEventListener('click', function () {
    var alerte = confirm("Est ce que tout les champs sont remplis ?");

    if (alerte) {
      var content = JSON.stringify({
        type: type.value,
        profil: profil.value,
        prix: newPrix.value,
        user: newUser.value,
        nom: newNom.value
      });
      fetch("/administrateur/newPAckGc", {
        method: 'POST',
        body: content
      }).then(function () {
        alert('Le nouveau pack est enregistré.');
        document.location.reload();
      });
    }
  }); //modification d'un pack

  var idPack = document.querySelectorAll('.idPack');
  var nomPack = document.querySelectorAll('.nomPack');
  var prixPack = document.querySelectorAll('.prixPack');
  var userPack = document.querySelectorAll('.userPack');
  changeInfoPack(nomPack);
  changeInfoPack(prixPack);
  changeInfoPack(userPack);
}

if (document.title === "Packs supplémentaires institution") {
  var _changeInfoPack = function _changeInfoPack(nomChange) {
    var _loop2 = function _loop2(i) {
      nomChange[i].addEventListener('keyup', function () {
        switch (nomChange) {
          case _nomPack:
            {
              _type = 'nom';
              break;
            }

          case _prixPack:
            {
              _type = 'prixPack';
              break;
            }

          case _userPack:
            {
              _type = 'userPack';
              break;
            }

          case limiteBPack:
            {
              _type = 'limiteBPack';
              break;
            }

          case limiteHPack:
            {
              _type = 'limiteHPack';
              break;
            }
        }

        var content = JSON.stringify({
          typeChange: _type,
          id: _idPack[i].dataset.id,
          valeur: nomChange[i].value
        });
        fetch("/administrateur/changePackInsti", {
          method: 'POST',
          body: content
        });
      });
    };

    for (var i = 0; i < nomChange.length; i++) {
      _loop2(i);
    }
  };

  var _newNom = document.querySelector('.newNom');

  var _newUser = document.querySelector('.newUser');

  var _newPrix = document.querySelector('.newPrix');

  var newProfil = document.querySelector('#newProfil');
  var newLimiteH = document.querySelector('.newlimiteH');
  var newLimiteB = document.querySelector('.newlimiteB');

  var _valider = document.querySelector('.btn-success');

  newProfil.addEventListener('change', function () {
    if (newProfil.value !== 'insti') {
      newLimiteH.value = 0;
      newLimiteB.value = 0;
      newLimiteB.setAttribute('disabled', 'disabled');
      newLimiteH.setAttribute('disabled', 'disabled');
    } else {
      newLimiteB.removeAttribute('disabled');
      newLimiteH.removeAttribute('disabled');
    }
  });

  _valider.addEventListener('click', function () {
    var content = JSON.stringify({
      nom: _newNom.value,
      user: _newUser.value,
      prix: _newPrix.value,
      profil: newProfil.value,
      limiteH: newLimiteH.value,
      limiteB: newLimiteB.value
    });
    var alerte = confirm("Est ce que tout les champs sont correctement remplis ?");

    if (alerte) {
      fetch("/administrateur/newPackInsti", {
        method: 'POST',
        body: content
      }).then(function () {
        alert("Le pack est enregistré , il est disponible immédiatement pour les institutionnels");
        document.location.reload();
      });
    }
  }); //Modofication des Pack existants


  var _idPack = document.querySelectorAll('.idpack');

  var _nomPack = document.querySelectorAll('.nomPack');

  var _prixPack = document.querySelectorAll('.prixPack');

  var _userPack = document.querySelectorAll('.userPack');

  var limiteBPack = document.querySelectorAll('.limiteBPack');
  var limiteHPack = document.querySelectorAll('.limiteHPack');

  var _type;

  _changeInfoPack(_nomPack);

  _changeInfoPack(_prixPack);

  _changeInfoPack(_userPack);

  _changeInfoPack(limiteBPack);

  _changeInfoPack(limiteHPack);
}

/***/ }),

/***/ "./assets/js/paiementHdd.js":
/*!**********************************!*\
  !*** ./assets/js/paiementHdd.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Effectuer un paiement') {
  (function () {
    var prenom = document.querySelector('#prenom');
    var nom = document.querySelector('#nom');
    var valider = document.querySelector('.btn-outline-maincolor');
    var email = document.querySelector('#Email');
    var inputUser = document.querySelector('.idUser');
    var cardType = document.getElementsByName('typeCard');
    valider.addEventListener('click', function () {
      var contenu = JSON.stringify({
        'name': nom.value,
        'firstName': prenom.value,
        'mail': email.value
      });
      fetch('/createMangoUser', {
        method: 'POST',
        body: contenu
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response) {
          inputUser.value = response.Id;
          document.querySelector('.infoPaiement').style.display = 'block';
        }
      });
    });

    var _loop = function _loop(i) {
      cardType[i].addEventListener('change', function () {
        if (cardType[i].checked) {
          var corps = JSON.stringify({
            'user': inputUser.value,
            'carte': cardType[i].value,
            'idPaiement': inputUser.dataset.paiement
          });
          fetch('/createCardHdd', {
            method: 'POST',
            body: corps
          }).then(function (reponse) {
            return reponse.json();
          }).then(function (reponse) {
            console.log(reponse);
            document.querySelector("#accessKeyRef").value = reponse.AccessKey;
            document.querySelector('#data').value = reponse.PreregistrationData;
            var button = document.createElement('button');
            button.classList.add('btn');
            button.type = 'submit';
            button.classList.add('btn-maincolor');
            button.innerHTML = 'Valider';
            document.querySelector('.zoneBouton').appendChild(button);
          });
        }
      });
    };

    for (var i = 0; i < cardType.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/paiementInsti.js":
/*!************************************!*\
  !*** ./assets/js/paiementInsti.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Paiement institutionnel') {
  var accord = document.querySelector('#accord');
  var zoneBouton = document.querySelector('.zoneBouton');
  var a = document.createElement('a');
  a.classList.add('btn');
  a.classList.add('btn-maincolor');
  a.innerHTML = 'Valider';
  a.href = '/insti/' + accord.dataset.inter;
  document.addEventListener('DOMContentLoaded', function () {
    fetch('/chercherCgu', {
      method: 'POST',
      body: accord.dataset.inter
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      if (reponse == 'existe') {
        accord.checked = true;
        zoneBouton.appendChild(a);
      }
    });
  });
  accord.addEventListener('change', function () {
    if (accord.checked) {
      fetch('/cgu', {
        method: 'POST',
        body: accord.dataset.inter
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        if (reponse == 'ok') {
          zoneBouton.appendChild(a);
        }
      });
    } else {
      fetch('/refus', {
        method: 'POST',
        body: accord.dataset.inter
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        if (reponse == 'ok') {
          while (zoneBouton.firstChild) {
            zoneBouton.removeChild(zoneBouton.lastChild);
          }
        }
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/paiment.js":
/*!******************************!*\
  !*** ./assets/js/paiment.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'paiement' || document.title === "Paiement diagnostic") {
  (function () {
    var accord = document.querySelector('#accord');
    var zoneBouton = document.querySelector('.bouton-submit');
    var button = document.createElement('button');
    var typePaiement = document.getElementsByName('typeCard');
    var accessKeyRef = document.querySelector('#accessKeyRef');
    var data = document.querySelector('#data');
    button.type = 'submit';
    button.classList.add('btn');
    button.classList.add('btn-maincolor');
    button.innerText = 'valider';
    document.addEventListener('DOMContentLoaded', function () {
      fetch('/chercherCgu', {
        method: 'POST',
        body: accord.dataset.inter
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        if (reponse === 'existe') {
          accord.checked = true;
          zoneBouton.appendChild(button);
          button.addEventListener('click', function (e) {
            if (data.value.length !== 0 && accessKeyRef.value.length !== 0) {
              document.getElementById('formulaire').submit();
            } else {
              e.preventDefault();
              alert('Choisisssez votre type de carte (Visa , Mastercard , Maestro ou virement bancaire)');
            }
          });
        }
      });
    });
    accord.addEventListener('change', function () {
      if (accord.checked) {
        fetch('/cgu', {
          method: 'POST',
          body: accord.dataset.inter
        }).then(function (reponse) {
          return reponse.json();
        }).then(function (reponse) {
          if (reponse === 'ok') {
            zoneBouton.appendChild(button);
            button.addEventListener('click', function (e) {
              if (data.value.length !== 0 && accessKeyRef.value.length !== 0) {
                document.getElementById('formulaire').submit();
              } else {
                e.preventDefault();
                alert('Choisisssez votre type de carte (Visa , Mastercard , Maestro ou virement bancaire)');
              }
            });
          }
        });
      } else {
        fetch('/refus', {
          method: 'POST',
          body: accord.dataset.inter
        }).then(function (reponse) {
          return reponse.json();
        }).then(function (reponse) {
          if (reponse === 'ok') {
            while (zoneBouton.firstChild) {
              zoneBouton.removeChild(zoneBouton.lastChild);
            }
          }
        });
      }
    });
    var form = document.querySelector('form');

    var _loop = function _loop(i) {
      typePaiement[i].addEventListener('change', function () {
        if (typePaiement[i].checked) {
          if (typePaiement[i].value === 'virement') {
            console.log(typePaiement[i].dataset.typeinter);
            var contenu = JSON.stringify({
              'idInter': typePaiement[i].dataset.inter,
              'typeInter': typePaiement[i].dataset.type,
              'interType': typePaiement[i].dataset.typeinter
            });
            fetch('/creerVirement', {
              method: 'POST',
              body: contenu
            }).then(function (response) {
              return response.json();
            }).then(function (response) {
              form.style.display = 'none';
              document.querySelector('.virement').style.display = 'block';
              document.querySelector('.titulaire').innerHTML = response.PaymentDetails.BankAccount.OwnerName;
              document.querySelector('.numero').innerHTML = response.PaymentDetails.BankAccount.Details.IBAN;
              document.querySelector('.bic').innerHTML = response.PaymentDetails.BankAccount.Details.BIC;
              document.querySelector('.adresse').innerHTML = response.PaymentDetails.BankAccount.OwnerAddress.AddressLine1 + ' ' + response.PaymentDetails.BankAccount.OwnerAddress.PostalCode + ' ' + response.PaymentDetails.BankAccount.OwnerAddress.City;
              document.querySelector('.refVirement').innerHTML = response.PaymentDetails.WireReference;
            });
          } else {
            document.querySelector('.virement').style.display = 'none';
            form.style.display = 'block';
            fetch('/creerCarte', {
              method: 'POST',
              body: typePaiement[i].value
            }).then(function (reponse) {
              return reponse.json();
            }).then(function (reponse) {
              document.getElementById('formulaire').action = reponse['carte']['CardRegistrationURL'];
              document.querySelector('#accessKeyRef').value = reponse['carte']['AccessKey'];
              document.querySelector('#data').value = reponse['carte']['PreregistrationData'];
            });
          }
        }
      });
    };

    for (var i = 0; i < typePaiement.length; i++) {
      _loop(i);
    }
  })();
}

if (document.title === 'Paiement cerfa') {
  (function () {
    var typePaiement = document.getElementsByName('typeCard');
    var form = document.querySelector('form');
    var zoneBouton = document.querySelector('.bouton-submit');
    var button = document.createElement('button');
    var zoneWallet = document.querySelector('.montantWallet');
    var zoneMontant = document.querySelector('.montant');
    button.classList.add('btn');
    button.classList.add('btn-maincolor');
    button.innerHTML = 'Payer';

    var _loop2 = function _loop2(i) {
      typePaiement[i].addEventListener('change', function () {
        if (typePaiement[i].value == 'WALLET') {
          form.style.display = 'none';
          zoneWallet.style.display = 'block';
          fetch('/recupererWallet', {
            method: 'GET'
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            zoneMontant.innerHTML = response.Balance.Amount + ' €';
          });
        } else {
          form.style.display = 'block';
          zoneWallet.style.display = 'none';
          fetch('/creationCarteCerfa', {
            method: 'POST',
            body: typePaiement[i].value
          }).then(function (reponse) {
            return reponse.json();
          }).then(function (reponse) {
            zoneBouton.appendChild(button);
            document.querySelector('#accessKeyRef').value = reponse['AccessKey'];
            document.querySelector('#data').value = reponse['PreregistrationData'];
          });
        }
      });
    };

    for (var i = 0; i < typePaiement.length; i++) {
      _loop2(i);
    }
  })();
}

if (document.title === "Validation Paiement") {
  var agent = navigator.userAgent;
  var java = window.navigator.javaEnabled();
  var language = navigator.language;
  var hauteur = window.screen.availHeight;
  var largeur = window.screen.availWidth;
  var couleur = window.screen.colorDepth;
  var offset = new Date().getTimezoneOffset();
  var infoPaiement = document.querySelector('#data');
  var idInter = document.querySelector('#inter');
  var type = document.querySelector('#type');
  var uuid = document.querySelector('#uuid');
  document.addEventListener('DOMContentLoaded', function () {
    var content = JSON.stringify({
      userAgent: agent,
      javaActif: java,
      langage: language,
      width: hauteur,
      height: largeur,
      color: couleur,
      timeZone: offset,
      data: infoPaiement.value,
      inter: idInter.value,
      typeInter: type.value,
      uuid: uuid.value
    });
    fetch('/validerPaiement', {
      method: 'POST',
      body: content
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      document.location.href = response;
    });
  });
}

if (document.title === 'Traitement paiement HDD') {
  var _agent = navigator.userAgent;

  var _java = window.navigator.javaEnabled();

  var _language = navigator.language;
  var _hauteur = window.screen.availHeight;
  var _largeur = window.screen.availWidth;
  var _couleur = window.screen.colorDepth;

  var _offset = new Date().getTimezoneOffset();

  var _infoPaiement = document.querySelector('#data');

  var paiement = document.querySelector('#id');
  document.addEventListener('DOMContentLoaded', function () {
    var content = JSON.stringify({
      userAgent: _agent,
      javaActif: _java,
      langage: _language,
      width: _hauteur,
      height: _largeur,
      color: _couleur,
      timeZone: _offset,
      data: _infoPaiement.value,
      paiement: paiement.value
    });
    fetch('/terminerPaiementHdd', {
      method: 'POST',
      body: content
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      document.location.href = response;
    });
  });
}

/***/ }),

/***/ "./assets/js/part.js":
/*!***************************!*\
  !*** ./assets/js/part.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === 'Inscription') {
  var retourAbonnement = function retourAbonnement(nombre, route, profil) {
    var body = JSON.stringify({
      hab: nombre,
      prof: profil
    });
    fetch(route, {
      body: body,
      method: 'POST'
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      var zoneAbo = document.querySelector('.resultAbonnement');
      document.querySelector('#prixAbo').innerHTML = response.prix + ' € HT ' + '(' + Math.round(response.ttc * 100) / 100 + ' € TTC)';
      document.querySelector('#utilisateur').innerHTML = response.user;
      document.querySelector('#btnAboI').click();

      while (zoneAbo.firstChild) {
        zoneAbo.removeChild(zoneAbo.lastChild);
      }

      var pAbonnement = document.createElement('p');
      pAbonnement.classList.add('rappelAbo');
      pAbonnement.innerHTML = "Coût de l'abonnement : " + response.prix + ' € HT ' + '(' + Math.round(response.ttc * 100) / 100 + ' € TTC)';
      var pUtilisateur = document.createElement('p');
      pUtilisateur.innerHTML = "Utilisateur(s) : " + response.user;
      pUtilisateur.classList.add('rappelAbo');
      zoneAbo.appendChild(pUtilisateur);
      zoneAbo.appendChild(pAbonnement);
      zoneAbo.style.background = "#FFDD00";
    });
  };

  var btnInsti = document.querySelector('#btnInsti');
  var dem = document.getElementById('demandeur_profil');
  var btnGc = document.querySelector('#btnGc');
  var habitant;
  var codePRm = document.querySelector('#demandeur_infoCodeProm_0');
  var zoneCodePRomo = document.querySelector('.codePrm');

  if (codePRm) {
    codePRm.addEventListener('click', function () {
      if (codePRm.checked) {
        zoneCodePRomo.style.display = 'block';
      } else {
        zoneCodePRomo.style.display = 'none';
      }
    });
  }

  var type = document.querySelector('.d-inline').dataset.type;

  if (type !== 'institutionnel' && type !== 'Grand compte') {
    dem.addEventListener('change', function () {
      if (dem.value === '1') {
        document.querySelector('.siret').style.display = 'none';
        document.querySelector('.tva').style.display = 'none';
        document.querySelector('#demandeur_siretTva_siret').removeAttribute('required');
        document.querySelector('#demandeur_siretTva_tva').removeAttribute('required');
        document.querySelector('.nomPro').style.display = 'none';
        document.querySelector('#demandeur_nom').removeAttribute('required');
      }

      if (dem.value !== '1') {
        document.querySelector('.siret').style.display = 'block';
        document.querySelector('.tva').style.display = 'block';
        document.querySelector('.nomPro').style.display = 'block';
        document.querySelector('#demandeur_siretTva_siret').setAttribute('required', 'required');
        document.querySelector('#demandeur_siretTva_siret').setAttribute('required', 'required');
        document.querySelector('#demandeur_nom').setAttribute('required', 'required');

        if (dem.value === '3') {
          btnInsti.click();
        }

        if (dem.value == 2 || dem.value == 4 || dem.value == 5 || dem.value == 6 || dem.value == 7 || dem.value == 9 || dem.value == 10 || dem.value == 11 || dem.value == 12 || dem.value == 13) {
          btnGc.click();
        }
      }
    });
  } else {
    document.querySelector('.siret').style.display = 'block';
    document.querySelector('.tva').style.display = 'block';

    if (type === 'institutionnel') {
      var route = "/abonnementInsitution";
      var insitution = document.querySelector('#demandeur_profilInsti');
      var nom = document.querySelector('#demandeur_nom');
      insitution.addEventListener('change', function () {
        if (insitution.value === 'Commune' || insitution.value === 'Communauté de communes' || insitution.value === 'Département') {
          document.querySelector('#population').style.display = 'block';
        } else {
          document.querySelector('#population').style.display = 'none';
        }

        if (insitution.value === 'Communauté de communes') {
          var listeNom = document.querySelector('#communauteCom');
          nom.addEventListener('keyup', function () {
            if (nom.value.length >= 3) {
              fetch('/trouverCom', {
                method: 'POST',
                body: nom.value
              }).then(function (response) {
                return response.json();
              }).then(function (response) {
                while (listeNom.lastChild) {
                  listeNom.removeChild(listeNom.firstChild);
                }

                var _iterator = _createForOfIteratorHelper(response),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var responseElement = _step.value;
                    var option = document.createElement('option');
                    option.innerText = responseElement;
                    listeNom.appendChild(option);
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              });
            }
          });
        }

        if (insitution.value === 'Région') {
          retourAbonnement(500006, route, 'insti');
        } else if (insitution.value === 'Communautés religieuses' || insitution.value === 'Établissement public' || insitution.value === "Société d'Économie Mixte" || insitution.value === "Société Coopérative d'Intérêt Collectif") {
          retourAbonnement(0, route, insitution.value);
        } else {
          document.querySelector('#demandeur_habitant').addEventListener('change', function () {
            var habitant = document.querySelector('#demandeur_habitant').value;
            retourAbonnement(habitant, route, 'insti');
          });
        }
      });
    }

    if (type === 'Grand compte') {
      var gc = document.querySelector("#demandeur_profilGc");
      gc.addEventListener('change', function () {
        if (gc.value === 'Syndic de co-propriété') {
          document.location.href = '/inscription syndic de co-propriété';
        }

        if (gc.value === "Syndicat de co-propriété") {
          document.location.href = "/syndicatCorpoprietes";
        }

        if (gc.value === "Entreprise BTP et autres") {
          document.location.href = "/inscriptionProBtp/gc";
        }
      });
      var user = document.querySelector('#demandeur_utilisateur');
      var _route = "/abonnementGc";
      user.addEventListener('change', function () {
        var content = JSON.stringify({
          profil: gc.value,
          utlisateur: user.value
        });
        fetch(_route, {
          method: 'POST',
          body: content
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          var zoneAbo = document.querySelector('.resultAbonnement');
          document.querySelector('#prixAbo').innerHTML = response.prix * 1.2 + ' € TTC ' + '(' + response.prix + ' € HT)';
          document.querySelector('#utilisateur').innerHTML = response.user;
          document.querySelector('#btnAboI').click();

          while (zoneAbo.firstChild) {
            zoneAbo.removeChild(zoneAbo.lastChild);
          }

          var pAbonnement = document.createElement('p');
          pAbonnement.classList.add('rappelAbo');
          pAbonnement.innerHTML = "Coût de l'abonnement : " + response.prix * 1.2 + ' € TTC ' + '(' + response.prix + ' € HT)' + " par mois";
          var pUtilisateur = document.createElement('p');
          pUtilisateur.innerHTML = "Utilisateur(s) : " + response.user;
          pUtilisateur.classList.add('rappelAbo');
          zoneAbo.appendChild(pUtilisateur);
          zoneAbo.appendChild(pAbonnement);
          zoneAbo.style.background = "#FFDD00";
        });
      });
    }
  }

  var cp = document.querySelector("#demandeur_cpAmbassadeur");

  if (type === 'Grand compte') {
    //Verification code promotionnel
    document.querySelector('.btn-sm').addEventListener('click', function () {
      var utilisateur = document.querySelector('#demandeur_utilisateur');
      var profil = document.querySelector('#demandeur_profilGc');
      var code = document.querySelector('#demandeur_codePromo');

      if (profil.value != "" && utilisateur.value != "" && code.value != "" && cp.value != "") {
        fetch("/verifcation/codePromo", {
          method: 'POST',
          body: JSON.stringify({
            profil: profil.value,
            code: code.value,
            cp: cp.value
          })
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.querySelector('#btn-promo').click();
          var zoneAbo = document.querySelector('.resultAbonnement');

          if (response.existe === 'promo') {
            document.querySelector('.messagePromo').innerText = "Votre code promotionnel vous permet de bénéficier de " + response.remise + "%" + " sur l'abonnement suivant : " + response.abonnement;
            document.querySelector('.validerCodePromo').addEventListener('click', function () {
              while (zoneAbo.firstChild) {
                zoneAbo.removeChild(zoneAbo.lastChild);
              }

              var pAbonnement = document.createElement('p');
              pAbonnement.classList.add('rappelAbo');
              pAbonnement.innerHTML = "Coût de l'abonnement : " + response.prix + ' € HT ' + '(' + Math.round(response.prix * 1.2) + ' € TTC)';
              var pUtilisateur = document.createElement('p');
              pUtilisateur.innerHTML = "Utilisateur(s) : " + response.utilisateur;
              pUtilisateur.classList.add('rappelAbo');
              var pAvert = document.createElement('p');
              pAvert.classList.add('rappelAbo');
              pAvert.innerHTML = "Tout changement dans le code promotionnel , votre profil ou le nombre d'utlisateur peut entraîner un changement d'effet du code promotionnel voire son non fonctionnement";
              zoneAbo.appendChild(pUtilisateur);
              zoneAbo.appendChild(pAbonnement);
              zoneAbo.appendChild(pAvert);
            });
          } else if (response.existe === 'ambassadeur') {
            if (response.possible) {
              document.querySelector('.messagePromo').innerHTML = "<p class='h5'>Ce code vous donne accès au statut ambassadeur de DIAG-DRONE</p>" + "<p class='h5'>Vous bénéficiez de l'abonnement " + response.abonnement + " au prix de" + response.prix + " € HT avec " + response.utilisateur + " utilisateur(s)</p> " + "<p class='h5'>La durée de votre abonnement est de " + response.duree + " mois non reconductible</p>";
              document.querySelector('.validerCodePromo').addEventListener('click', function () {
                while (zoneAbo.firstChild) {
                  zoneAbo.removeChild(zoneAbo.lastChild);
                }

                var pAbonnement = document.createElement('p');
                pAbonnement.classList.add('rappelAbo');
                pAbonnement.innerHTML = "Coût de l'abonnement : " + response.prix + ' € HT ' + '(' + Math.round(response.prix * 1.2) + ' € TTC)';
                var pUtilisateur = document.createElement('p');
                pUtilisateur.innerHTML = "Utilisateur(s) : " + response.utilisateur;
                pUtilisateur.classList.add('rappelAbo');
                var pAvert = document.createElement('p');
                pAvert.classList.add('rappelAbo');
                pAvert.innerHTML = "Tout changement dans le code promotionnel , votre profil ou le nombre d'utlisateur peut entraîner un changement d'effet du code promotionnel voire son non fonctionnement";
                zoneAbo.appendChild(pUtilisateur);
                zoneAbo.appendChild(pAbonnement);
                zoneAbo.appendChild(pAvert);
              });
            } else {
              document.querySelector('.messagePromo').innerHTML = "<p class='h5'>Tout les statuts ambassadeur pour votre département ont été definis.</p>" + "<p class='h5'>DIAG DRONE vous remercie.</p>";
              document.querySelector('.btn-secondary').addEventListener('click', function () {
                code.value = "";
              });
            }
          } else {
            document.querySelector('.messagePromo').innerText = "Le code promotionnel renseigné n'existe pas";
            document.querySelector('.validerCodePromo').style.display = 'none';
            document.querySelector('.btn-secondary').addEventListener('click', function () {
              code.value = "";
            });
          }
        });
      }
    });
  }

  if (type === 'institutionnel') {
    var _habitant = document.querySelector('#demandeur_habitant');

    var habitantR;
    var profil = document.querySelector('#demandeur_profilInsti');
    var verifier = document.querySelector('.btn-sm');
    var code = document.querySelector('#demandeur_codePromo');
    verifier.addEventListener('click', function () {
      if (profil.value != "" && code.value != "" && cp.value != "") {
        if (profil.value === 'Région' && _habitant.value === "") {
          habitantR = 5000007;
        } else if ((profil.value !== 'Commune' || profil.value !== 'Communauté de communes' || profil.value !== 'Département') && _habitant.value === "") {
          habitantR = 0;
        } else {
          habitantR = _habitant.value;
        }

        var content = JSON.stringify({
          habitant: habitantR,
          code: code.value,
          cp: cp.value
        });
        fetch("/verification/codePromoInsti", {
          method: 'POST',
          body: content
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.querySelector('#btn-promo').click();
          var zoneAbo = document.querySelector('.resultAbonnement');

          if (response.existe === 'promo') {
            document.querySelector('.messagePromo').innerText = "Votre code promotionnel vous permet de bénéficier de " + response.remise + "%" + " sur l'abonnement suivant : " + response.abonnement;
            document.querySelector('.validerCodePromo').addEventListener('click', function () {
              while (zoneAbo.firstChild) {
                zoneAbo.removeChild(zoneAbo.lastChild);
              }

              var pAbonnement = document.createElement('p');
              pAbonnement.classList.add('rappelAbo');
              pAbonnement.innerHTML = "Coût de l'abonnement : " + response.prix + ' € HT ' + '(' + Math.round(response.prix * 1.2) + ' € TTC)';
              var pUtilisateur = document.createElement('p');
              pUtilisateur.innerHTML = "Utilisateur(s) : " + response.utilisateur;
              pUtilisateur.classList.add('rappelAbo');
              var pAvert = document.createElement('p');
              pAvert.classList.add('rappelAbo');
              pAvert.innerHTML = "Tout changement dans le code promotionnel , votre profil ou le nombre d'habitant peut entraîner un changement d'effet du code promotionnel voire son non fonctionnement";
              zoneAbo.appendChild(pUtilisateur);
              zoneAbo.appendChild(pAbonnement);
              zoneAbo.appendChild(pAvert);
            });
          } else if (response.existe === 'ambassadeur') {
            if (response.possible) {
              document.querySelector('.messagePromo').innerHTML = "<p class='h5'>Ce code vous donne accès au statut ambassadeur de DIAG-DRONE</p>" + "<p class='h5'>Vous bénéficiez de l'abonnement " + response.abonnement + " au prix de" + response.prix + " € HT avec " + response.utilisateur + " utilisateur(s)</p> " + "<p class='h5'>La durée de votre abonnement est de " + response.duree + " mois non reconductible</p>";
              document.querySelector('.validerCodePromo').addEventListener('click', function () {
                while (zoneAbo.firstChild) {
                  zoneAbo.removeChild(zoneAbo.lastChild);
                }

                var pAbonnement = document.createElement('p');
                pAbonnement.classList.add('rappelAbo');
                pAbonnement.innerHTML = "Coût de l'abonnement : " + response.prix + ' € HT ' + '(' + Math.round(response.prix * 1.2) + ' € TTC)';
                var pUtilisateur = document.createElement('p');
                pUtilisateur.innerHTML = "Utilisateur(s) : " + response.utilisateur;
                pUtilisateur.classList.add('rappelAbo');
                var pAvert = document.createElement('p');
                pAvert.classList.add('rappelAbo');
                pAvert.innerHTML = "Tout changement dans le code promotionnel , votre profil ou le nombre d'habitant peut entraîner un changement d'effet du code promotionnel voire son non fonctionnement";
                zoneAbo.appendChild(pUtilisateur);
                zoneAbo.appendChild(pAbonnement);
                zoneAbo.appendChild(pAvert);
              });
            } else {
              document.querySelector('.messagePromo').innerHTML = "<p class='h5'>Tout les statuts ambassadeur pour votre département ont été definis.</p>" + "<p class='h5'>DIAG DRONE vous remercie.</p>";
              document.querySelector('.btn-secondary').addEventListener('click', function () {
                code.value = "";
              });
            }
          } else {
            document.querySelector('.messagePromo').innerText = "Le code promotionnel renseigné n'existe pas";
            document.querySelector('.validerCodePromo').style.display = 'none';
            document.querySelector('.btn-secondary').addEventListener('click', function () {
              code.value = "";
            });
          }
        });
      } else {
        alert("Veuillez compléter tout les champs");
      }
    });
  }

  var siren = document.querySelector('#demandeur_siretTva_siret');
  siren.addEventListener('keyup', function () {
    if (siren.value.length === 14) {
      fetch('/entreprise/siret', {
        method: 'POST',
        body: siren.value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('#demandeur_adresse_numero').value = response.adresse.numero;
        document.querySelector('#demandeur_adresse_nomVoie').value = response.adresse.nomVoie;
        document.querySelector('#demandeur_adresse_codePostal').value = response.adresse.codePostal;
        document.querySelector('#demandeur_cpAmbassadeur').value = response.adresse.codePostal;
        document.querySelector('#demandeur_adresse_ville').value = response.adresse.ville;
        document.querySelector('#demandeur_siretTva_tva').value = response.TVA;
        document.querySelector('#demandeur_nom').value = response.nom;
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/partenaireProBtp.js":
/*!***************************************!*\
  !*** ./assets/js/partenaireProBtp.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Nos partenaires") {
  var cp = document.querySelector('#cp');
  var city = document.querySelector('#ville');
  var intervention = document.querySelector('#interventionBtp');
  cp.addEventListener('keyup', function () {
    if (cp.value.length === 5) {
      fetch("https://geo.api.gouv.fr/communes?codePostal=" + cp.value + "&fields=codesPostaux&format=json&geometry=centre", {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        while (city.firstChild) {
          city.removeChild(city.lastChild);
        }

        var _iterator = _createForOfIteratorHelper(response),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var ville = _step.value;
            var option = document.createElement('option');
            option.innerText = ville.nom;
            option.value = ville.nom;
            city.appendChild(option);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  });
  intervention.addEventListener('change', function () {
    var tbody = document.querySelector('.proBtp');

    if (city.value !== "") {
      var content = JSON.stringify({
        ville: city.value,
        cp: cp.value,
        inter: intervention.value
      });
      fetch("/rechercheProBtpAccueil", {
        method: 'POST',
        body: content
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response === 'non') {
          document.querySelector('.btnAlerte').click();
        } else {
          while (tbody.firstChild) {
            tbody.removeChild(tbody.lastChild);
          }

          for (var i = 0; i < response.length; i++) {
            var tr = document.createElement('tr');
            var tdLogo = document.createElement('td');
            console.log('ok');
            tdLogo.classList.add('text-center');

            if (response[i].logo) {
              var img = document.createElement('img');
              tdLogo.appendChild(img);
            }

            tr.appendChild(tdLogo);
            var tdNom = document.createElement('td');
            tdNom.classList.add('text-center');
            tdNom.innerText = response[i].nom;
            tr.appendChild(tdNom);
            var tdLien = document.createElement('td');
            tdLien.classList.add('text-center');
            var a = document.createElement('a');
            a.href = "/contacterPro/" + response[i].boss;
            a.classList.add('btn');
            a.classList.add('btn-maincolor');
            a.innerText = 'Contacter';
            tdLien.appendChild(a);
            tr.appendChild(tdLien);
            tbody.appendChild(tr);
          }
        }
      });
    }
  });
}

if (document.title === "Contacter Pro-Btp") {
  var expediateur = document.querySelector("#expediteur");
  var pro = document.querySelector('input[type=hidden]');
  var contenu = document.querySelector('textarea');
  var titre = document.querySelector('#titre');
  var envoyer = document.querySelector('.btnEnvoie');
  envoyer.addEventListener('click', function () {
    var content = JSON.stringify({
      expe: expediateur.value,
      proBtp: pro.value,
      message: contenu.value,
      titre: titre.value
    });
    fetch("/envoieMailProBtp", {
      method: 'POST',
      body: content
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      if (response === 'ok') {
        document.querySelector('.fermerAlert').click();
        document.querySelector('.btnModalMail').click();
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/payout.js":
/*!*****************************!*\
  !*** ./assets/js/payout.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

if (document.title == 'Consulter mon solde') {
  var bouton = document.querySelector('.btn-maincolor');
  var montant = document.querySelector('#retraitMontant');
  var zoneMessage = document.querySelector('.message');
  bouton.addEventListener('click', function () {
    fetch('/effectuerRetrait', {
      method: 'POST',
      body: montant.value
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      var p = document.createElement('p');
      p.classList.add('h5');
      p.innerHTML = response;
      zoneMessage.appendChild(p);
      setTimeout(function () {
        document.location.reload();
      }, 5000);
    });
  });
}

/***/ }),

/***/ "./assets/js/planningOtd.js":
/*!**********************************!*\
  !*** ./assets/js/planningOtd.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/core/locales/fr */ "./node_modules/@fullcalendar/core/locales/fr.js");
/* harmony import */ var _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/daygrid */ "./node_modules/@fullcalendar/daygrid/main.js");
/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/timegrid */ "./node_modules/@fullcalendar/timegrid/main.js");
/* harmony import */ var _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fullcalendar/list */ "./node_modules/@fullcalendar/list/main.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.js");







if (document.title === 'Planning OTD' || document.title === 'Planning ODI') {
  var route;

  if (document.title === "Planning OTD") {
    route = "/planningAllOtd";
  } else {
    route = "/planningAllOdi";
  }

  var calendrier = document.querySelector('#calendrier');
  document.addEventListener('DOMContentLoaded', function () {
    var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"](calendrier, {
      plugins: [_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__["default"], _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_3__["default"], _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__["default"], _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_5__["default"]],
      initialView: 'dayGridMonth',
      locale: _fullcalendar_core_locales_fr__WEBPACK_IMPORTED_MODULE_1___default.a,
      height: 1200,
      aspectRatio: 2.5,
      editable: false,
      views: {
        listDay: {
          buttonText: "Aujourd'hui"
        },
        listWeek: {
          buttonText: 'Semaine'
        },
        listMonth: {
          buttonText: 'Mois'
        }
      },
      events: route,
      headerToolbar: {
        left: 'prev,next',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      timeZone: 'locale',
      allDaySlot: false,
      slotDuration: '00:30:00'
    });
    calendar.render();
  });
}

/***/ }),

/***/ "./assets/js/posterSujet.js":
/*!**********************************!*\
  !*** ./assets/js/posterSujet.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Categories') {
  var bouton = document.querySelector('.btn-maincolor3');
  var contenu = document.querySelectorAll('.form-control');
  var form = new FormData();
  bouton.addEventListener('click', function () {
    form.append('titre', contenu[0].value);
    form.append('message', contenu[1].value);
    form.append('categorie', bouton.dataset.categorie);
    fetch('/creerSujet', {
      method: 'POST',
      body: form
    }).then(function () {
      document.location.reload(true);
    });
  });
}

if (document.title === 'reponse du forum') {
  var _bouton = document.querySelector('.btn');

  var _contenu = document.querySelector('.form-control');

  var _form = new FormData();

  _bouton.addEventListener('click', function () {
    _form.append('reponse', _contenu.value);

    _form.append('sujet', _bouton.dataset.sujet);

    fetch('/posterReponse', {
      method: 'POST',
      body: _form
    }).then(function () {
      document.location.reload(true);
    });
  });
}

/***/ }),

/***/ "./assets/js/proposition.js":
/*!**********************************!*\
  !*** ./assets/js/proposition.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Liste OTDs') {
  document.addEventListener('DOMContentLoaded', function () {
    var prop = document.querySelectorAll('.price');
    var prix = document.querySelectorAll('.horaire');
    var coutMin = document.querySelectorAll('.coutMin');

    var _loop = function _loop(i) {
      var contenu = JSON.stringify({
        liste: prop[i].dataset.liste,
        type: prop[i].dataset.type,
        salarie: prop[i].dataset.salarie
      });
      var contenuKm = JSON.stringify({
        salarie: prop[i].dataset.salarie,
        intervention: prop[i].dataset.inter
      });
      fetch('/propositionTaux', {
        method: 'POST',
        body: contenu
      }).then(function (reponse) {
        return reponse.json();
      }).then(function (reponse) {
        var span = document.createElement('span');
        span.classList.add('taux');
        span.setAttribute('class', 'h6');
        span.innerHTML = reponse['taux'] + " €/heure";
        prix[i].appendChild(span);
        var span2 = document.createElement('span');
        span2.setAttribute('class', 'h6');
        span.classList.add('taux');
        span2.innerHTML = "À partir de " + reponse['prixMin'] + ' €';
        coutMin[i].appendChild(span2);
      });
    };

    for (var i = 0; i < prop.length; i++) {
      _loop(i);
    }
  });
}

/***/ }),

/***/ "./assets/js/rappelInter.js":
/*!**********************************!*\
  !*** ./assets/js/rappelInter.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Rappel intervention') {
  var bouton = document.querySelectorAll('.sms');

  var _loop = function _loop(i) {
    bouton[i].addEventListener('click', function () {
      var id = bouton[i].getAttribute('data-intervention');
      fetch('/admin/intervention/inter', {
        method: 'POST',
        body: id
      }).then(function () {
        document.location.reload(true);
      });
    });
  };

  for (var i = 0; i < bouton.length; i++) {
    _loop(i);
  }
}

/***/ }),

/***/ "./assets/js/rapport.js":
/*!******************************!*\
  !*** ./assets/js/rapport.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

if (document.title === 'Rapport') {
  (function () {
    var designInput = function designInput(bouton, input) {
      if (bouton) {
        bouton.addEventListener('click', function () {
          input.click();
          input.addEventListener('change', function () {
            bouton.innerHTML = input.value.replace(/^.*\\/, "");
          });
        });
      }
    };

    var realPhoto = document.querySelector('#rapport_photos');
    var btnPhoto = document.querySelector('.photo');
    var info = document.querySelector('.info');
    btnPhoto.addEventListener('click', function () {
      realPhoto.click();
      realPhoto.addEventListener('change', function () {
        info.innerHTML = realPhoto.files.length + ' photos ajoutées';
      });
    });
    var ajouter = document.getElementById('boutonAjouter');
    var idRapport = ajouter.dataset.rapport;
    var video = document.getElementById('fichierVideo');
    var transfert = document.getElementById('transfertVideo');
    var form = new FormData();
    var verif = document.querySelector('#verif');

    if (verif.value === 0 && document.querySelector('#rapport_paiement_0') && document.querySelector('#rapport_paiement_1')) {
      document.querySelector('#rapport_paiement_0').setAttribute('required', 'required');
      document.querySelector('#rapport_paiement_1').setAttribute('required', 'required');
    }

    ajouter.addEventListener('click', function () {
      video.click();
      video.addEventListener('change', function () {
        form.append('video1', video.files[0]);
        form.append('video2', video.files[1]);
        ajouter.innerHTML = video.files.length + ' video(s) ajoutée(s)';
        xhr = new XMLHttpRequest();
        xhr.open("POST", "/upload/" + idRapport, true);

        xhr.upload.onprogress = function (e) {
          if (e.lengthComputable) {
            var ratio = Math.floor(e.loaded / e.total * 100 * 100) / 100 + '%';
            transfert.innerHTML = ratio;
          }
        };

        xhr.upload.onloadstart = function (e) {};

        xhr.upload.onloadend = function (e) {};

        xhr.send(form);
      });
    });
    var file = document.getElementById('file');
    var cerfa = document.getElementById('cerfa');
    var dTele = document.getElementById('dTele');
    var realFile = document.getElementById('rapport_rap_fichier');
    var realCerfa = document.getElementById('rapport_cerfa_inter');
    var realdTele = document.querySelector('#rapport_donnees_telemetrique');
    designInput(file, realFile); //designInput(cerfa, realCerfa);

    designInput(dTele, realdTele);
    var oui = document.querySelector('#rapport_paiement_0');
    var non = document.querySelector('#rapport_paiement_1');
    var date = document.getElementById('paiement');

    if (oui) {
      oui.addEventListener('click', function () {
        date.style.display = 'block';
      });
    }

    if (non) {
      non.addEventListener('click', function () {
        date.style.display = 'none';
        date.value = null;
      });
    }

    var ajouterText = document.querySelector('.btn-ajoutText');
    var ajoutResume = document.querySelector('.btnResume'); //let supprimer = document.createElement('button')

    ajouterText.addEventListener('click', function () {
      var textarea = document.createElement('textArea');
      textarea.classList.add('text-resume');
      textarea.setAttribute('rows', 5);
      textarea.setAttribute('cols', 10);
      document.querySelector('.zone-text').appendChild(textarea);
    });
    var test = [];
    ajoutResume.addEventListener('click', function () {
      var resume = document.querySelectorAll('.text-resume');

      for (var i = 0; i < resume.length; i++) {
        test.push(resume[i].value);
      }

      document.getElementById('rapport_rap_resume').value = test;
    });
    var degat = document.getElementsByName('rapport[degatInter]');

    var _loop = function _loop(i) {
      degat[i].addEventListener('change', function () {
        if (degat[i].value === 'oui') {
          document.querySelector('.materiel').style.display = 'block';
          document.querySelector('.corporel').style.display = 'block';
        } else {
          document.querySelector('.materiel').style.display = 'none';
          document.querySelector('.corporel').style.display = 'none';
        }
      });
    };

    for (var i = 0; i < degat.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/rapportConsultant.js":
/*!****************************************!*\
  !*** ./assets/js/rapportConsultant.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Rapport consultant') {
  var bouton = document.querySelector('.btn');
  var zonReponse = document.querySelector('.resultat');
  bouton.addEventListener('click', function () {
    var numero = document.querySelector('.form-control').value;
    fetch('/trouverRapport', {
      method: 'POST',
      body: numero
    }).then(function (reponse) {
      return reponse.json();
    }).then(function (reponse) {
      while (zonReponse.firstChild) {
        zonReponse.removeChild(zonReponse.lastChild);
      }

      if (reponse.trouve == 'ok') {
        var img = document.createElement('img');
        var span = document.createElement('span');
        var button = document.createElement('button');
        button.classList.add('btn');
        button.classList.add('btn-maincolor3');
        button.classList.add('second');
        var br = document.createElement('br');
        button.innerHTML = 'Ajouter';
        img.src = '/css/css_site/img/zip.png';
        span.innerText = reponse.archive;
        zonReponse.appendChild(img);
        zonReponse.appendChild(span);
        zonReponse.appendChild(br);
        zonReponse.appendChild(button);
        var boutonEnvoie = document.querySelector('.second');
        boutonEnvoie.addEventListener('click', function () {
          fetch('/lierRapport', {
            method: 'POST',
            body: reponse.idRapport
          }).then(function () {
            document.location.reload();
          });
        });
      } else {
        var p = document.createElement('p');
        p.classList.add('h6');
        p.innerHTML = "Le rapport demandé n'existe pas";
        zonReponse.appendChild(p);
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/rechercheBatiment.js":
/*!****************************************!*\
  !*** ./assets/js/rechercheBatiment.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Recherche d\'un bâtiment') {
  var search = document.querySelector('#bat');
  var br = document.createElement('br');
  var tbody = document.querySelector('tbody');
  search.addEventListener('keyup', function () {
    if (search.value.length > 0) {
      fetch('/institution/rechercheBatiment', {
        method: 'POST',
        body: search.value
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        while (tbody.firstChild) {
          tbody.removeChild(tbody.lastChild);
        }

        for (var i = 0; i < response.length; i++) {
          var rep = response[i];
          var tr = document.createElement('tr');
          var tdId = document.createElement('td');
          var tdNumInterne = document.createElement('td');
          var tdNom = document.createElement('td');
          var tdAdresse = document.createElement('td');
          tdId.innerHTML = rep.batiment.id;
          tdNumInterne.innerHTML = rep.batiment.numeroInterne;
          tdNom.innerHTML = rep.batiment.nom;
          tdAdresse.innerHTML = rep.adresse.numVoie + ' ' + rep.adresse.nomVoie + ' ' + '<br>' + rep.adresse.cp + ' ' + rep.adresse.ville;
          tr.appendChild(tdId);
          tr.appendChild(tdNumInterne);
          tr.appendChild(tdNom);
          tr.appendChild(tdAdresse);
          tbody.appendChild(tr);
        }
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/remise.js":
/*!*****************************!*\
  !*** ./assets/js/remise.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Remises") {
  (function () {
    var alerte = function alerte() {
      document.location.reload();
    };

    var journee = document.getElementsByName('journee');
    var demiJournee = document.getElementsByName('demijournee');
    var markePlace = document.getElementsByName('marketPlace');
    var valider = document.querySelector('.validerRemiseTemps');
    var choixJournee;
    var choixDemi;
    var choixMarket;
    var choixTypes = document.getElementsByName('typeRemise');
    var zoneRemise = document.querySelector('.zoneRemise');
    var validerRemise = document.querySelector('.validerRemise');
    var validerMarket = document.querySelector('.validerMarket');
    validerMarket.addEventListener('click', function () {
      for (var i = 0; i < markePlace.length; i++) {
        if (markePlace[i].checked) {
          choixMarket = markePlace[i].value;
        } else {
          alert("Veuillez choisir une réponse.");
        }

        break;
      }

      fetch("/entreprise/validerMarket", {
        method: 'post',
        body: choixMarket
      }).then(function () {
        alert("Votre choix a été enregistré .");
      });
    });
    valider.addEventListener('click', function () {
      if ((document.querySelector('#ouiJournee').checked === true || document.querySelector("#nonJournee").checked === true) && (document.querySelector('#ouiDemiJournee').checked === true || document.querySelector("#nonDemiJournee").checked === true)) {
        for (var i = 0; i < journee.length; i++) {
          if (journee[i].checked) {
            choixJournee = journee[i].value;
          }

          if (demiJournee[i].checked) {
            choixDemi = demiJournee[i].value;
          }
        }

        fetch("/entreprise/validerChoix", {
          method: 'POST',
          body: JSON.stringify({
            journee: choixJournee,
            demiJournee: choixDemi
          })
        }).then(function () {
          alert("Vos choix ont été enregistrés");
        });
      } else {
        alert("Veuillez répondre à toutes les questions");
      }
    });

    var _iterator = _createForOfIteratorHelper(choixTypes),
        _step;

    try {
      var _loop = function _loop() {
        var choixType = _step.value;
        choixType.addEventListener('change', function () {
          fetch("/entreprise/recupereType/" + choixType.value, {
            method: 'get'
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            var _iterator2 = _createForOfIteratorHelper(response),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var responseElement = _step2.value;
                var div = document.createElement('div');
                div.classList.add('col-sm-4');
                div.classList.add('col-12');
                var input = document.createElement('input');
                input.type = 'checkbox';
                input.classList.add("form-check-input");
                input.value = responseElement.id;
                var label = document.createElement('label');
                label.innerText = responseElement.type;
                label.classList.add("form-check-label");
                div.appendChild(input);
                div.appendChild(label);
                zoneRemise.appendChild(div);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            validerRemise.addEventListener('click', function () {
              var debut = document.querySelector('#dateDebut');
              var fin = document.querySelector('#dateFin');
              var missions = document.querySelectorAll('.form-check-input');
              var montant = document.querySelector(".montantRemise");
              var listeMission = [];

              if (missions) {
                for (var i = 0; i < missions.length; i++) {
                  if (missions[i].checked) {
                    listeMission.push(missions[i].value);
                  }
                }
              }

              fetch("/entreprise/validerRemise/" + choixType.value, {
                method: 'post',
                body: JSON.stringify({
                  debut: debut.value,
                  fin: fin.value,
                  mission: listeMission,
                  montant: montant.value
                })
              }).then(function (reponse) {
                return reponse.json();
              }).then(function (reponse) {
                alert(reponse);
                var myTimeout;
                myTimeout = setTimeout(alerte, 1000);
              });
            });
          });
        });
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  })();
}

/***/ }),

/***/ "./assets/js/remplirMap.js":
/*!*********************************!*\
  !*** ./assets/js/remplirMap.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Compléter mes Maps') {
  var heures = document.querySelector('.heures');
  var minutes = document.querySelector('.minutes');
  var observations = document.querySelector('.observation');
  var button = document.querySelector('.btn-maincolor');
  button.addEventListener('click', function () {
    var contenu = JSON.stringify({
      heure: heures.value,
      minute: minutes.value,
      observation: observations.value,
      idInter: observations.dataset.inter
    });
    fetch('/validerMap', {
      method: 'POST',
      body: contenu
    }).then(function () {
      document.location.reload();
    });
  });
}

/***/ }),

/***/ "./assets/js/reposneAo.js":
/*!********************************!*\
  !*** ./assets/js/reposneAo.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);





if (document.title == 'Reponse appel') {
  (function () {
    var addFormToCollection = function addFormToCollection($collectionHolderClass) {
      // Get the ul that holds the collection of tags
      var $collectionHolder = $('.' + $collectionHolderClass); // Get the data-prototype explained earlier

      var prototype = $collectionHolder.data('prototype'); // get the new index

      var index = $collectionHolder.data('index');
      var newForm = prototype; // You need this only if you didn't set 'label' => false in your tags field in TaskType
      // Replace '__name__label__' in the prototype's HTML to
      // instead be a number based on how many items we have
      // newForm = newForm.replace(/__name__label__/g, index);
      // Replace '__name__' in the prototype's HTML to
      // instead be a number based on how many items we have

      newForm = newForm.replace(/__name__/g, index); // increase the index with one for the next item

      $collectionHolder.data('index', index + 1); // Display the form in the page in an li, before the "Add a tag" link li

      var $newFormLi = $("<div class='col-sm-6 formContact'></div>").append(newForm); // Add the new form at the end of the list

      $collectionHolder.append($newFormLi);
    };

    var addTagFormDeleteLink = function addTagFormDeleteLink($tagFormLi) {
      var $removeFormButton = $('<button type="button" class="btn btn-danger mt-5">Éffacer</button>');
      $tagFormLi.append($removeFormButton);
      $removeFormButton.on('click', function (e) {
        // remove the li for the tag form
        $tagFormLi.remove();
      });
    };

    console.log('ok');
    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).ready(function () {
      // Get the ul that holds the collection of tags
      var $tagsCollectionHolder = $('div.contacts'); // count the current form inputs we have (e.g. 2), use that as the new
      // index when inserting a new item (e.g. 2)
      // add a delete link to all of the existing tag form li elements

      $tagsCollectionHolder.find('div.col-sm-6').each(function () {
        addTagFormDeleteLink($(this));
      });
      $tagsCollectionHolder.data('index', $tagsCollectionHolder.find('input').length);
      var i = 0;
      $('body').on('click', '.add_item_link', function (e) {
        var $collectionHolderClass = $(e.currentTarget).data('collectionHolderClass');
        addFormToCollection($collectionHolderClass);
        $tagsCollectionHolder.find('div#reponse_ao_contacts_' + i).each(function () {
          console.log(i);
          addTagFormDeleteLink($(this));
        });
        i++;
      });
    });
    var radioPrecision = document.getElementsByName('reponse_ao[precision]');
    var precision = document.querySelector('.zonePrecision');

    var _loop = function _loop(i) {
      radioPrecision[i].addEventListener('change', function () {
        if (radioPrecision[i].value == 'oui') {
          precision.style.display = 'block';
          document.querySelector('#reponse_ao_precisionCom').setAttribute('required', 'required');
        } else {
          precision.style.display = 'none';
          document.querySelector('#reponse_ao_precisionCom').removeAttribute('required');
        }
      });
    };

    for (var i = 0; i < radioPrecision.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/selectTypeInter.js":
/*!**************************************!*\
  !*** ./assets/js/selectTypeInter.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == "Je recherche un drone") {
  var listeInter = document.querySelector("#listeInter");
  var typeInter = document.querySelector('#typeInter');
  var envoyer = document.querySelector('.btn-outline-maincolor');
  var adresse = document.querySelector('#adresse');
  adresse.addEventListener('keyup', function () {
    if (adresse.value.length >= 5) {
      fetch("https://api-adresse.data.gouv.fr/search/?q=" + adresse.value + "&autocomplete=1&limit=20", {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        var datalist = document.getElementById('listAdresse');

        while (datalist.lastChild) {
          datalist.removeChild(datalist.firstChild);
        }

        for (var i = 0; i < response.features.length; i++) {
          var option = document.createElement('option');
          option.value = response.features[i].properties.label;
          option.style.color = 'black';
          datalist.appendChild(option);
        }
      });
    }
  });
  listeInter.addEventListener('change', function () {
    fetch('/selectTypeInter', {
      method: 'POST',
      body: listeInter.value
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      while (typeInter.firstChild) {
        typeInter.removeChild(typeInter.lastChild);
      }

      for (var i = 0; i < response.length; i++) {
        var option = document.createElement('option');
        option.value = response[i].id;
        option.innerHTML = response[i].nom;
        typeInter.appendChild(option);
      }
    });
  });
  envoyer.addEventListener('click', function () {
    var contenu = JSON.stringify({
      adress: adresse.value,
      idListeInter: listeInter.value,
      idTypeInter: typeInter.value
    });
    fetch("/matchOtd", {
      method: 'POST',
      body: contenu
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      if (response > 0) {
        document.querySelector('.btn-masque').click();
        document.querySelector(".message").innerHTML = "Diag-drone a détecté " + response + " Opérateurs télepilotes de drone pour votre demande d'intervention.";
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/selectionPackOdi.js":
/*!***************************************!*\
  !*** ./assets/js/selectionPackOdi.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Choix des packs ODI") {
  (function () {
    var retirerPack = function retirerPack(btn, input) {
      var _loop = function _loop(i) {
        input[i].addEventListener('change', function () {
          fetch("/entreprise/retirerPack", {
            method: 'POST',
            body: input[i].value
          }).then(function (response) {
            return response.json();
          }).then(function (response) {});
        });
      };

      for (var i = 0; i < btn.length; i++) {
        _loop(i);
      }
    };

    var packs = document.querySelectorAll(".packOdi");
    var route;

    var _loop2 = function _loop2(i) {
      packs[i].addEventListener('change', function () {
        if (packs[i].checked) {
          route = "/entreprise/souscrirePack";
        } else {
          route = "/entreprise/retirerPack/";
        }

        fetch(route, {
          method: 'POST',
          body: packs[i].value
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          packs[i].previousElementSibling.innerText = "Retirer ce pack";
        });
      });
    };

    for (var i = 0; i < packs.length; i++) {
      _loop2(i);
    }

    document.addEventListener('DOMContentLoaded', function () {
      fetch("/entreprise/listePackSouscrit", {
        method: 'GET'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        var _iterator = _createForOfIteratorHelper(response),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var id = _step.value;

            for (var _i = 0; _i < packs.length; _i++) {
              if (packs[_i].value == id) {
                packs[_i].checked = true;
                packs[_i].previousElementSibling.innerText = "Retirer ce pack";
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    });
  })();
}

if (document.title === "Choix des packs ODI") {
  (function () {
    var missions = document.querySelectorAll('.packPersoOdi');
    var nom = document.querySelector('#nomPack');
    var biens = document.querySelectorAll('.typeBien');
    var valider = document.querySelector('.btn-primary');
    var supprimerPack = document.querySelectorAll('.supprimerPackOdi');
    valider.addEventListener('click', function () {
      var liste = [];
      var bienExlu = [];

      var _iterator2 = _createForOfIteratorHelper(biens),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var bien = _step2.value;

          if (bien.checked === false) {
            bienExlu.push(bien.value);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = _createForOfIteratorHelper(missions),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var mission = _step3.value;

          if (mission.checked === true) {
            liste.push(mission.value);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      if (nom.value !== "" && liste.length > 1) {
        fetch("/entreprise/validerpack", {
          method: 'POST',
          body: JSON.stringify({
            id: liste,
            nom: nom.value,
            bienExlu: bienExlu
          })
        }).then(function () {
          document.querySelector('dialog').showModal();
          document.querySelector('.validerPackPerso').addEventListener('click', function () {
            document.querySelector('dialog').close();

            var _iterator4 = _createForOfIteratorHelper(missions),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var mission = _step4.value;
                mission.checked = false;
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            var _iterator5 = _createForOfIteratorHelper(biens),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var bien = _step5.value;
                bien.checked = false;
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }

            nom.value = "";
          });
        });
      } else {
        if (nom.value === "") {
          alert("Le nom de votre pack est obligatoire");
        }

        if (liste.length <= 1) {
          alert("Un pack doit être composé d'au moins 2 missions");
        }
      }
    });

    var _loop3 = function _loop3(i) {
      supprimerPack[i].addEventListener('click', function (e) {
        e.preventDefault();
        var confirmer = confirm('Souhaitez vous réelement supprimer ce pack ?');

        if (confirmer) {
          document.location.href = supprimerPack[i].href;
        }
      });
    };

    for (var i = 0; i < supprimerPack.length; i++) {
      _loop3(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/signature.js":
/*!********************************!*\
  !*** ./assets/js/signature.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Signature Admin') {
  var test = document.getElementById('signature');
  test.addEventListener('change', function () {
    var selectedFile = signature.files[0];
    var reader = new FileReader(); //reader.onload = function (event) { console.log(reader.result); };

    reader.readAsDataURL(selectedFile);

    reader.onload = function () {
      fetch('/signatureAdmin', {
        method: 'POST',
        body: reader.result
      }); //base64encoded string
    };
  });
  /*enregister.addEventListener("click", function (e) {
      var adresse =
          fetch('/signatureAdmin', {
              method: 'POST',
              body: adresse
          })
              .then(() => {
                  document.location.reload()
              })
  }, false);*/
}

/***/ }),

/***/ "./assets/js/sousDossier.js":
/*!**********************************!*\
  !*** ./assets/js/sousDossier.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);





if (document.title === 'Ajouter des pièces') {
  var creerELement = function creerELement(nomElement, classElement1, classElement2, classElement3) {
    var element = document.createElement(nomElement);
    element.classList.add(classElement1);
    element.classList.add(classElement2);
    element.classList.add(classElement3);
    return element;
  };

  var envoieNote = function envoieNote(id) {
    var titre = document.querySelector('#titreNote').value;
    var text = document.querySelector('#texteNote').value;

    if (titre.value !== "" && text.value !== "") {
      fetch("/ajoutNote/" + id, {
        method: 'POST',
        body: JSON.stringify({
          titreNote: titre,
          texteNote: text
        })
      }).then(function () {
        document.location.reload();
      });
    }
  };

  var zoneContact = document.querySelector('.zoneContact');
  var btnContact = document.querySelector('.btn-outline-maincolor');
  var realFile = document.querySelector('#fichier');
  var fakeFile = document.querySelector('.btn-fichier');
  var envoie = document.querySelector('.btn-primary');
  fakeFile.addEventListener('click', function () {
    realFile.click();
    realFile.addEventListener('change', function () {
      fakeFile.innerHTML = realFile.files[0]['name'];
    });
  });
  btnContact.addEventListener('click', function () {
    var divContact = creerELement('div', 'col-6', 'contact');
    var divRow = creerELement('div', 'row');
    var divNom = creerELement('div', 'col-12');
    var labelNom = creerELement('label');
    labelNom.innerText = 'Nom';
    var inputNom = creerELement('input', 'nomContact', 'form-control');
    divNom.appendChild(labelNom);
    divNom.appendChild(inputNom);
    var divPrenom = creerELement('div', 'col-12');
    var labelPrenom = creerELement('label');
    labelPrenom.innerText = 'Prénom';
    var inputPrenom = creerELement('input', 'prenomContact', 'form-control');
    divPrenom.appendChild(labelPrenom);
    divPrenom.appendChild(inputPrenom);
    var divTel = creerELement('div', 'col-12');
    var labelTel = creerELement('label');
    labelTel.innerText = 'téléphone';
    var inputTel = creerELement('input', 'telContact', 'form-control');
    divTel.appendChild(labelTel);
    divTel.appendChild(inputTel);
    var divEmail = creerELement('div', 'col-12');
    var labelEmail = creerELement('label');
    labelEmail.innerText = 'Email';
    var inputEmail = creerELement('input', 'emailContact', 'form-control');
    divEmail.appendChild(labelEmail);
    divEmail.appendChild(inputEmail);
    var divSupprimer = creerELement('div', 'col-12', 'text-center', 'mt-3');
    var boutonSupprimer = creerELement('button', 'btn', 'btn-danger');
    boutonSupprimer.innerText = 'Supprimer';
    divSupprimer.appendChild(boutonSupprimer);
    divRow.appendChild(divNom);
    divRow.appendChild(divPrenom);
    divRow.appendChild(divTel);
    divRow.appendChild(divEmail);
    divRow.appendChild(divSupprimer);
    divContact.appendChild(divRow);
    zoneContact.appendChild(divContact);
    var contact = document.querySelectorAll('.contact');
    var supprimer = document.querySelectorAll('.btn-danger');

    var _loop = function _loop(i) {
      supprimer[i].addEventListener('click', function () {
        zoneContact.removeChild(contact[i]);
      });
    };

    for (var i = 0; i < supprimer.length; i++) {
      _loop(i);
    }
  });
  envoie.addEventListener('click', function () {
    var libelle = document.querySelector('#libéllé').value;
    var dateValidite = document.querySelector('#validite').value;
    var delai = document.querySelector('#alerte').value;
    fetch('/envoieDocInstitution-' + envoie.dataset.id, {
      method: 'POST',
      body: JSON.stringify({
        lib: libelle,
        validite: dateValidite,
        alerte: delai
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      var form = new FormData();
      console.log(realFile.files[0]);
      form.append('file', realFile.files[0]);
      axios__WEBPACK_IMPORTED_MODULE_3___default.a.post('/envoieFichierDoc/' + response, form, {
        onUploadProgress: function onUploadProgress(progressEvent) {
          document.querySelector('#transfert').style.display = 'block';
          document.querySelector('.progress-bar').style.width = Math.round(progressEvent.loaded / progressEvent.total) * 100 + '%';

          if (progressEvent.loaded === progressEvent.total) {
            document.querySelector('#transfert').style.display = 'none';
          }
        }
      }).then(function (reponse) {
        if (document.querySelector('.contact')) {
          var nomC = document.querySelectorAll('.nomContact');
          var prenomC = document.querySelectorAll('.prenomContact');
          var telContact = document.querySelectorAll('.telContact');
          var mailContact = document.querySelectorAll('.emailContact');

          for (var i = 0; i < nomC.length; i++) {
            fetch('/ajoutContact/' + reponse.data, {
              method: 'POST',
              body: JSON.stringify({
                nom: nomC[i].value,
                prenom: prenomC[i].value,
                telephone: telContact[i].value,
                email: mailContact[i].value
              })
            });
          }
        } else if (document.querySelector('#titreNote').value !== "" && document.querySelector('#texteNote').value !== "") {
          envoieNote(reponse.data);
        } else {
          document.location.reload();
        }
      });
    });
  });
}

/***/ }),

/***/ "./assets/js/statsAdmin.js":
/*!*********************************!*\
  !*** ./assets/js/statsAdmin.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title === 'Statistique') {}

/***/ }),

/***/ "./assets/js/suppresionDossier.js":
/*!****************************************!*\
  !*** ./assets/js/suppresionDossier.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === 'Ajout type de dossier') {
  (function () {
    var dossier = document.querySelectorAll('.dossier');
    var supprimer = document.querySelectorAll('.delete');
    var zone = document.querySelector('.zoneSupprimer');

    var _loop = function _loop(i) {
      supprimer[i].addEventListener('click', function () {
        var alerte = confirm("Souhaitez-vous supprimer définitivement ce dossier ainsi que tout son contenu ?");

        if (alerte) {
          fetch("/suppressionDossier", {
            method: 'POST',
            body: dossier[i].dataset.id
          }).then(function () {
            zone.removeChild(dossier[i]);
          });
        }
      });
    };

    for (var i = 0; i < dossier.length; i++) {
      _loop(i);
    }
  })();
}

if (document.title === "Sous dossier") {
  (function () {
    var deleteDg = document.querySelector('.deleteDg');
    var sousDos = document.querySelectorAll('.sousDos');

    if (deleteDg) {
      deleteDg.addEventListener('click', function () {
        var alert = confirm("Voulez supprimer définitivement le dossier général ainsi que tout ses composants ?");

        if (alert) {
          fetch("/deleteDossierGen", {
            method: 'POST',
            body: deleteDg.dataset.id
          }).then(function () {
            document.location.reload();
          });
        }
      });
    }

    var deleteDossier = document.querySelectorAll('.deleteDossier');

    if (deleteDossier) {
      var _loop2 = function _loop2(i) {
        deleteDossier[i].addEventListener('click', function () {
          var alert = confirm('Voulez vous supprimer ce dossier ainsi que tout ces composants ?');

          if (alert) {
            fetch("/deleteSousDossier", {
              method: 'POST',
              body: deleteDossier[i].dataset.id
            }).then(function () {
              document.querySelector('.zoneSupprimer').removeChild(sousDos[i]);
            });
          }
        });
      };

      for (var i = 0; i < deleteDossier.length; i++) {
        _loop2(i);
      }
    }
  })();
}

/***/ }),

/***/ "./assets/js/supprimerPackAdmin.js":
/*!*****************************************!*\
  !*** ./assets/js/supprimerPackAdmin.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Modifier pack") {
  (function () {
    var supprimers = document.querySelectorAll(".deleteMission");
    var listeMission = document.querySelector('.list-group-horizontal');

    var _iterator = _createForOfIteratorHelper(supprimers),
        _step;

    try {
      var _loop = function _loop() {
        var supprimer = _step.value;
        supprimer.addEventListener('click', function () {
          var confirmer = confirm("On supprime la mission ? Cette action est définitive!");

          if (confirmer) {
            document.location.href = supprimer.href;
          }
        });
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var missions = document.querySelectorAll('input[type=checkbox]');

    var _iterator2 = _createForOfIteratorHelper(missions),
        _step2;

    try {
      var _loop2 = function _loop2() {
        var mission = _step2.value;
        mission.addEventListener('change', function () {
          if (mission.checked) {
            fetch("/administrateur/addMissionAdmin/" + mission.dataset.pack, {
              method: 'post',
              body: mission.value
            }).then(function () {
              mission.parentNode.parentNode.parentNode.removeChild(mission.parentNode.parentNode);
              var li = document.createElement('li');
              li.classList.add('list-group-item');
              li.innerText = mission.dataset.nom;
              li.appendChild(document.createElement('br'));
              var a = document.createElement("a");
              a.classList.add("deleteMission");
              a.innerText = "X";
              a.href = "/administrateur/supprimerMission/" + mission.dataset.pack + "/" + mission.value;
              li.appendChild(a);
              listeMission.appendChild(li);
            });
          }
        });
      };

      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        _loop2();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  })();
}

/***/ }),

/***/ "./assets/js/tarif.js":
/*!****************************!*\
  !*** ./assets/js/tarif.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title == 'Mes tarifs') {
  var tarif = function tarif(id, min, max) {
    document.getElementById(id).addEventListener('click', function () {
      if (!document.getElementById(id).checked) {
        for (var i = min; i <= max; i++) {
          input[i].setAttribute('readonly', 'readonly');
        }
      }

      if (document.getElementById(id).checked) {
        for (var _i = min; _i < max; _i++) {
          input[_i].removeAttribute('readonly');
        }
      }
    });
  };

  var input = document.getElementsByClassName('form-control form-control-sm');
  tarif('drone_drone', 171, 174);
}

/***/ }),

/***/ "./assets/js/tarifOdi.js":
/*!*******************************!*\
  !*** ./assets/js/tarifOdi.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.set.js */ "./node_modules/core-js/modules/es.set.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Tarif Odi") {
  (function () {
    var alerte = function alerte() {
      alert("Les tarifs moyens ont été intégrés.");
    };

    var prixs = document.querySelectorAll('.prixOdi');
    var valider = document.querySelector(".validerTarif");
    var prixPacks = document.querySelectorAll('.prixPackOdi');
    var moyen = 0;
    var service = 0;
    var listePrix = [];
    var listeBien = [];
    var listeMission = [];
    var listePack = [];
    var listeBienPack = [];
    var listePrixPack = [];
    var serviceCollecte = document.getElementsByName('serviceCollecte');
    var serviceMoyen = document.getElementsByName('serviceMoyen');
    var prelevements = document.querySelectorAll('.prelevement');
    var fichierTarif = document.querySelector('input[type=file]');
    var cgv = document.querySelector('input[type=hidden]');
    var prixExistant = false;
    var prixPackExistant = false;
    document.querySelector('.buttonFichierPrixOdi').addEventListener('click', function () {
      document.querySelector('#fichierPrix').click();
      document.querySelector('#fichierPrix').addEventListener('change', function () {
        document.querySelector('.buttonFichierPrixOdi').innerHTML = document.querySelector('#fichierPrix').files.length + " fichier(s) ajouté(s)";

        if (document.querySelector('#fichierPrix').files.length !== 0) {
          document.querySelector("#buttonFichierTarifOdiService").style.display = 'block';
        }
      });
    });
    document.querySelector('.FichierTarifOdiService').addEventListener('click', function () {
      document.querySelector('#nonService').checked = true;
    });
    document.querySelector('.TarifMoyenOdiService').addEventListener('click', function () {
      document.querySelector('#nonMoyen').checked = true;
    });

    var _loop = function _loop(i) {
      serviceCollecte[i].addEventListener('change', function () {
        if (serviceCollecte[i].value === "Oui") {
          document.querySelector('#nonMoyen').checked = true;
          document.querySelector("#saisieTaridOdi").style.display = 'none';
          document.querySelector('.btnTarif').click();
        } else {
          document.querySelector("#saisieTaridOdi").style.display = 'block';
        }
      });
    };

    for (var i = 0; i < serviceCollecte.length; i++) {
      _loop(i);
    }

    var _loop2 = function _loop2(_i) {
      serviceMoyen[_i].addEventListener('change', function () {
        if (serviceMoyen[_i].value === "Oui") {
          document.querySelector('#nonService').checked = true;
          document.querySelector('.btnTarifMoyen').click();
          document.querySelector("#saisieTaridOdi").style.display = 'block';
        } else {
          document.querySelector("#saisieTaridOdi").style.display = 'block';

          var _iterator2 = _createForOfIteratorHelper(prixs),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var prix = _step2.value;

              if (!prixExistant) {
                prix.value = "";
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          var _iterator3 = _createForOfIteratorHelper(prixPacks),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var prixPack = _step3.value;

              if (!prixPackExistant) {
                prixPack.value = "";
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      });
    };

    for (var _i = 0; _i < serviceMoyen.length; _i++) {
      _loop2(_i);
    }

    document.addEventListener('DOMContentLoaded', function () {
      for (var _i2 = 0; _i2 < prixs.length; _i2++) {
        listeBien.push(prixs[_i2].dataset.type);
        listeMission.push(prixs[_i2].dataset.mission);
      }

      for (var _i3 = 0; _i3 < prixPacks.length; _i3++) {
        listePack.push(prixPacks[_i3].dataset.pack);
        listeBienPack.push(prixPacks[_i3].dataset.taille);
      }

      fetch("/entreprise/retrouverTarifMission", {
        method: 'POST',
        body: JSON.stringify({
          bien: listeBien,
          mission: listeMission
        })
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        for (var _i4 = 0; _i4 < response.length; _i4++) {
          prixs[_i4].value = response[_i4];
        }

        fetch("/entreprise/retrouverPrixPack", {
          method: "POST",
          body: JSON.stringify({
            bien: listeBienPack,
            pack: listePack
          })
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          for (var _i5 = 0; _i5 < response.length; _i5++) {
            prixPacks[_i5].value = response[_i5];
          }

          for (var _i6 = 0; _i6 < response.length; _i6++) {
            if (response[_i6] != 0) {
              prixPackExistant = true;
            }
          }

          var listePrelev = [];
          var bien = [];

          for (var _i7 = 0; _i7 < prelevements.length; _i7++) {
            listePrelev.push(prelevements[_i7].dataset.prelev);
            bien.push(prelevements[_i7].dataset.type);
          }

          fetch("/entreprise/retrouverPrixPrelevement", {
            method: 'post',
            body: JSON.stringify({
              liste: listePrelev,
              listeBien: bien
            })
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            for (var _i8 = 0; _i8 < response.length; _i8++) {
              prelevements[_i8].value = response[_i8];
            }

            for (var _i9 = 0; _i9 < response.length; _i9++) {
              if (response[_i9] != 0) {
                prixExistant = true;
                break;
              }
            }
          });
        });
      });
    });
    valider.addEventListener('click', function () {
      listePrix = [];
      listeBien = [];
      listeMission = [];
      listePack = [];
      listeBienPack = [];
      listePrixPack = [];
      var listePrixPrelevement = [];
      var listePrelevement = [];
      var confirmer = confirm("Souhaitez vous validez ces tarifs?");

      if (document.querySelector("#ouiMoyen").checked === true) {
        moyen = 1;
      }

      if (confirmer) {
        for (var _i10 = 0; _i10 < prixs.length; _i10++) {
          listePrix.push(prixs[_i10].value);
          listeBien.push(prixs[_i10].dataset.type);
          listeMission.push(prixs[_i10].dataset.mission);
        }

        var _iterator = _createForOfIteratorHelper(prelevements),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var prelevement = _step.value;
            listePrixPrelevement.push(prelevement.value);
            listePrelevement.push(prelevement.dataset.prelev);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        console.log(listePrixPrelevement, listePrelevement);
        fetch("/entreprise/validerTarifOdi", {
          method: "POST",
          body: JSON.stringify({
            prixInter: listePrix,
            bien: listeBien,
            mission: listeMission,
            moyen: moyen,
            prixPrelev: listePrixPrelevement,
            prelev: listePrelevement
          })
        }).then(function () {
          for (var _i11 = 0; _i11 < prixPacks.length; _i11++) {
            listePack.push(prixPacks[_i11].dataset.pack);
            listeBienPack.push(prixPacks[_i11].dataset.taille);
            listePrixPack.push(prixPacks[_i11].value);
          }

          fetch("/entreprise/validerPrixPack", {
            method: 'POST',
            body: JSON.stringify({
              pack: listePack,
              bien: listeBienPack,
              prix: listePrixPack,
              moyen: moyen
            })
          }).then(function () {
            alert("Vos prix ont bien été enregistrés");

            if (cgv.value === 'true') {//document.location.href="/entreprise/changementValidé"
            } else {//document.location.href = "/entreprise/remise"
              }
          });
        });
      }
    });
    var validerFichier = document.querySelector("#buttonFichierTarifOdiService");
    var validerMoyen = document.querySelector('#buttonTarifMoyenOdiService');
    validerFichier.addEventListener('click', function () {
      var confirmer = confirm("Souhaitez vous envoyer ces fichiers ?");

      if (confirmer) {
        var form = new FormData();

        for (var _i12 = 0; _i12 < fichierTarif.files.length; _i12++) {
          form.append('fichier' + _i12, fichierTarif.files[_i12]);
        }

        fetch('/entreprise/validerFilePrix', {
          method: 'post',
          body: form
        }).then(function (response) {
          alert('Vos fichier ont bien été envoyés. Vous allez être redirigé pour continuer la procédure d\'inscription');
          document.location.href = "/entreprise/remise";
        });
      }
    });
    validerMoyen.addEventListener('click', function () {
      var listeMission = [];
      var listePackMoyen = [];
      var listeBien = [];
      var listePrelevement = [];

      for (var _i13 = 0; _i13 < prixs.length; _i13++) {
        listeMission.push(prixs[_i13].dataset.missionodi);
      }

      for (var _i14 = 0; _i14 < prixPacks.length; _i14++) {
        listePackMoyen.push(prixPacks[_i14].dataset.packodi);
      }

      for (var _i15 = 0; _i15 < prixs.length; _i15++) {
        listeBien.push(prixs[_i15].dataset.type);
      }

      for (var _i16 = 0; _i16 < prelevements.length; _i16++) {
        listePrelevement.push(prelevements[_i16].dataset.prelev);
      }

      var listeFinale = Array.from(new Set(listeMission));
      var listPackFinale = Array.from(new Set(listePackMoyen));
      var listBienFinale = Array.from(new Set(listeBien));
      fetch("/entreprise/prixMoyen", {
        method: 'POST',
        body: JSON.stringify({
          pack: listPackFinale,
          mission: listeFinale,
          bien: listBienFinale,
          prelev: Array.from(new Set(listePrelevement))
        })
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.querySelector('.fermerModal').click();

        for (var _i17 = 0; _i17 < response.moyenMission.length; _i17++) {
          prixs[_i17].value = response.moyenMission[_i17];
          prixs[_i17].style.color = 'red';
        }

        for (var _i18 = 0; _i18 < response.moyenPack.length; _i18++) {
          prixPacks[_i18].value = response.moyenPack[_i18];
          prixPacks[_i18].style.color = 'red';
        }
        /*for (let i = 0; i < response.prixPrelev.length; i++) {
            prelevements[i].value = response.prixPrlev[i]
        }*/


        var myTimeout;
        myTimeout = setTimeout(alerte, 1000);
      });
    });
  })();
}

/***/ }),

/***/ "./assets/js/telechargerRapport.js":
/*!*****************************************!*\
  !*** ./assets/js/telechargerRapport.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Recherche unique d'un rapport") {
  var code = document.querySelector('#codeRapport');
  var email = document.querySelector('#mail');
  var valider = document.querySelector('.btn-maincolor');
  var zone = document.querySelector('.zoneReponse');
  valider.addEventListener('click', function () {
    if (email.value !== "" && code.value !== "") {
      var contenu = JSON.stringify({
        mail: email.value,
        codeRapport: code.value
      });
      fetch('/media', {
        body: contenu,
        method: 'POST'
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        console.log(response);
        var reponse = response[0];

        if (reponse !== 'non') {
          /**
           *
           * Integration de l'archive du rapport
           */
          var figArchive = document.createElement('figure');
          var figCaptionArchive = document.createElement('figcaption');
          var imgrachive = document.createElement('img');
          var aArchive = document.createElement("a");
          var zoneArchive = document.querySelector('.archive');
          imgrachive.src = "/css/css_site/img/zip.png";
          aArchive.href = "/uploads/rapport/" + reponse.archive;
          aArchive.setAttribute('target', '_blank');
          figCaptionArchive.innerText = reponse.archive;
          figArchive.appendChild(imgrachive);
          figArchive.appendChild(figCaptionArchive);
          aArchive.appendChild(figArchive);
          zoneArchive.appendChild(aArchive);
          /**
           * Intégration du rapport en pdf
           */

          var figPdf = document.createElement('figure');
          var figCaptionPdf = document.createElement('figcaption');
          var imgrPdf = document.createElement('img');
          var aPdf = document.createElement("a");
          var zonePdf = document.querySelector('.rapport');
          imgrPdf.src = "/css/css_site/images/pdfmoyen.png";
          aPdf.href = "/uploads/rapport/" + reponse.rapport;
          aPdf.setAttribute('target', '_blank');
          figCaptionPdf.innerText = reponse.archive;
          figPdf.appendChild(imgrPdf);
          figPdf.appendChild(figCaptionPdf);
          aPdf.appendChild(figPdf);
          zonePdf.appendChild(aPdf);
          /**
           * Integration des photos dans un carousel
           */

          var photoBtnModal = document.querySelector('.photo');
          var btnModal = document.createElement('button');
          btnModal.classList.add('btn');
          btnModal.classList.add('btn-maincolor2');
          btnModal.dataset.toggle = "modal";
          btnModal.dataset.target = "#photoModal";
          btnModal.innerText = "Voir les photos";
          photoBtnModal.appendChild(btnModal);
          var zonePhoto = document.querySelector('.photoRapport');

          for (var i = 0; i < reponse.photos.length; i++) {
            var div = document.createElement('div');
            div.classList.add('carousel-item');
            var img = document.createElement('img');
            img.classList.add('d-block');
            img.classList.add('w-100');
            img.src = "/uploads/photoInter/" + reponse.photos[i];

            if (i === 0) {
              div.classList.add('active');
            }

            div.appendChild(img);
            zonePhoto.appendChild(div);
          }

          var videoModale = document.querySelector('.videoM');
          var btnvideo = document.createElement('button');
          btnvideo.classList.add('btn');
          btnvideo.classList.add('btn-maincolor');
          btnvideo.dataset.toggle = "modal";
          btnvideo.dataset.target = "#videoModal";
          btnvideo.innerText = "Voir les videos";
          videoModale.appendChild(btnvideo);

          if (reponse.videos[0]) {
            document.querySelector('#videoRapport1').src = "/uploads/videoRapport/" + reponse.videos[0];
          }

          if (reponse.videos[1]) {
            document.querySelector('#videoRapport2').src = "/uploads/videoRapport/" + reponse.videos[1];
          }
        } else {
          alert("Le rapport n'a pas pu être trouvé");
        }
      });
    } else {
      alert('Veuillez remplir tout les champs');
    }
  });
}

/***/ }),

/***/ "./assets/js/temspMIssion.js":
/*!***********************************!*\
  !*** ./assets/js/temspMIssion.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title === "Durée mission") {
  var temps = document.querySelectorAll('.tempsMission');
  var valider = document.querySelector('.btn-maincolor');
  var id = document.querySelector("input[type=hidden]");
  var routeValiderMission;
  var routeRetrouverMission;

  if (id) {
    routeValiderMission = "/entreprise/validerTemps/" + id.value;
    routeRetrouverMission = "/entreprise/retrouverTempsMission/" + id.value;
  } else {
    routeValiderMission = "/entreprise/validerTemps";
    routeRetrouverMission = "/entreprise/retrouverTempsMission";
  }

  valider.addEventListener('click', function () {
    var confirmer = confirm("Souhaitez vous enregistrer ces durées de mission ?");

    if (confirmer) {
      var listeMission = [];
      var listeBien = [];
      var tempsMission = [];

      var _iterator = _createForOfIteratorHelper(temps),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var temp = _step.value;
          listeMission.push(temp.dataset.mission);
          listeBien.push(temp.dataset.bien);
          tempsMission.push(temp.value);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      fetch(routeValiderMission, {
        method: 'post',
        body: JSON.stringify({
          mission: listeMission,
          bien: listeBien,
          temps: tempsMission
        })
      }).then(function () {
        alert("Les durées de missions on bien été enregistrées");
      });
    }
  });
  document.addEventListener("DOMContentLoaded", function () {
    var listeMission = [];
    var listeBien = [];

    var _iterator2 = _createForOfIteratorHelper(temps),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var temp = _step2.value;
        listeMission.push(temp.dataset.mission);
        listeBien.push(temp.dataset.bien);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    fetch(routeRetrouverMission, {
      method: 'post',
      body: JSON.stringify({
        bien: listeBien,
        mission: listeMission
      })
    }).then(function (response) {
      return response.json();
    }).then(function (response) {
      console.log(response);

      for (var i = 0; i < response.length; i++) {
        temps[i].value = response[i];
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/validerAbonnement.js":
/*!****************************************!*\
  !*** ./assets/js/validerAbonnement.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (document.title == "Valider abonnement") {
  /*let button = document.querySelector('button')
    button.addEventListener('click', () => {
      fetch('/admin/valideAbonnement', {
          method: 'POST',
          body: button.dataset.entreprise
      })
          .then(() => {
              document.location.reload(true);
          })
  })*/
}

/***/ }),

/***/ "./assets/js/validerProp.js":
/*!**********************************!*\
  !*** ./assets/js/validerProp.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title == 'Intervention sans proposition') {
  (function () {
    var bouton = document.querySelectorAll('.btn-primary');
    var inputProp = document.querySelectorAll('.inputProp');

    var _loop = function _loop(i) {
      bouton[i].addEventListener('click', function () {
        var contenu = JSON.stringify({
          prix: inputProp[i].value,
          salarie: inputProp[i].dataset.salarie,
          intervention: inputProp[i].dataset.inter,
          distance: inputProp[i].dataset.distance
        });
        fetch('/validerProp', {
          method: 'POST',
          body: contenu
        }).then(function () {
          document.location.reload();
        });
      });
    };

    for (var i = 0; i < bouton.length; i++) {
      _loop(i);
    }
  })();
}

/***/ }),

/***/ "./assets/js/voirAssurance.js":
/*!************************************!*\
  !*** ./assets/js/voirAssurance.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

if (document.title === "Vos assurances") {
  var changeButton = function changeButton(idRealButton, idFakeButton) {
    document.getElementById(idFakeButton).addEventListener('click', function () {
      document.getElementById(idRealButton).click();
      document.getElementById(idRealButton).addEventListener('change', function () {
        document.getElementById(idFakeButton).innerHTML = document.getElementById(idRealButton).files[0]['name'];
      });
    });
  };

  var envoieAssu = function envoieAssu(infoAssurance) {
    var content;
    var event;

    if (infoAssurance.dataset.type === "attestation") {
      event = "change";
    } else {
      event = "keyup";
    }

    infoAssurance.addEventListener(event, function () {
      if (infoAssurance.dataset.type === "attestation") {
        content = new FormData();
        content.append('attestation', infoAssurance.files[0]);
      } else {
        content = infoAssurance.value;
      }

      fetch("/changeAssurancePrincipale/" + infoAssurance.dataset.type, {
        method: 'POST',
        body: content
      });
    });
  };

  var envoieAssuComplement = function envoieAssuComplement(infoAssurance) {
    var content;
    var event;

    if (infoAssurance.dataset.type === "attestation") {
      event = "change";
    } else {
      event = "keyup";
    }

    infoAssurance.addEventListener(event, function () {
      if (infoAssurance.dataset.type === "attestation") {
        content = new FormData();
        content.append('attestation', infoAssurance.files[0]);
      } else {
        content = infoAssurance.value;
      }

      fetch("/chnageAssuranceComplementaire/" + infoAssurance.dataset.type, {
        method: 'POST',
        body: content
      });
    });
  };

  var compagnie = document.querySelector('#compagnie');
  var contrat = document.querySelector('#contrat');
  var attestation = document.querySelector('#attestation');
  var compagnieComplement = document.querySelector('#compagnieComplement');
  var contratComplement = document.querySelector('#contratComplement');
  var attestationComplement = document.querySelector('#attestationComplement');
  changeButton("attestation", "assu");
  changeButton("rc_pro2_fichier", "complement");
  changeButton("attestationComplement", "assuComplement");
  envoieAssu(attestation);
  envoieAssu(compagnie);
  envoieAssu(contrat);
  var form = document.querySelector('form');
  var validerForm = document.querySelector('.validerForm');
  validerForm.addEventListener('click', function () {
    console.log(document.querySelector("#rc_pro2_fichier").files[0]);

    if (document.querySelector("#rc_pro2_fichier").files[0] !== undefined && document.querySelector("#rc_pro2_compagnie").value !== "" && document.querySelector("#rc_pro2_numero").value !== "") {
      form.submit();
    } else {
      alert("Un ou plusieurs éléments sont manquant");
    }
  });
  envoieAssuComplement(compagnieComplement);
  envoieAssuComplement(contratComplement);
  envoieAssuComplement(attestationComplement);
  document.querySelector('.btn-danger').addEventListener('click', function () {
    var confirmer = confirm("Souhaites vous supprimer définitivement votre C Professionnelle complémentaire type aérienne-aviation ?");

    if (confirmer) {
      fetch("/supprimerRcComplement/" + document.querySelector('.btn-danger').dataset.type, {
        method: 'GET'
      }).then(function () {
        document.location.reload();
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/zipCode.js":
/*!******************************!*\
  !*** ./assets/js/zipCode.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (document.title == 'Inscription consultant') {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('consultant_adresse_ville').setAttribute('readonly', 'readonly');
  });
  document.getElementById('consultant_adresse_ville').focus(function () {
    document.getElementById('consultant_adresse_ville').autocomplete("search", "");
  }); // OnKeyDown Function

  document.getElementById("consultant_adresse_codePostal").addEventListener('keyup', function () {
    var zip_in = document.getElementById("consultant_adresse_codePostal").value;
    var city = document.getElementById("city");

    if (zip_in.length == 5) {
      // Make HTTP Request
      fetch('https://api.zippopotam.us/fr/' + zip_in, {
        method: 'GET',
        headers: new Headers()
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.getElementById('consultant_adresse_ville').removeAttribute('readonly');
        suggestions = [];

        for (ville in response['places']) {
          suggestions.push(response['places'][ville]['place name']);
        }

        var _iterator = _createForOfIteratorHelper(suggestions),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var iterator = _step.value;
            var option = document.createElement('option');
            option.value = iterator;
            city.appendChild(option);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  });
}

if (document.title === 'Inscription') {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('demandeur_adresse_ville').setAttribute('readonly', 'readonly');
    document.getElementById('demandeur_adresse_ville').focus(function () {
      document.getElementById('demandeur_adresse_ville').autocomplete("search", "");
    }); // OnKeyDown Function

    document.getElementById("demandeur_adresse_codePostal").addEventListener('keyup', function () {
      var zip_in = document.getElementById("demandeur_adresse_codePostal").value;
      var city = document.getElementById("city");

      if (zip_in.length == 5) {
        // Make HTTP Request
        fetch('https://api.zippopotam.us/fr/' + zip_in, {
          method: 'GET',
          headers: new Headers()
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.getElementById('demandeur_adresse_ville').removeAttribute('readonly');
          suggestions = [];

          for (ville in response['places']) {
            suggestions.push(response['places'][ville]['place name']);
          }

          var _iterator2 = _createForOfIteratorHelper(suggestions),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var iterator = _step2.value;
              var option = document.createElement('option');
              option.value = iterator;
              city.appendChild(option);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        });
      }
    });
  });
}

if (document.title == 'Inscription entreprise') {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('entreprise_adresse_ville').setAttribute('readonly', 'readonly');
    document.getElementById('entreprise_adresse_ville').focus(function () {
      document.getElementById('entreprise_adresse_ville').autocomplete("search", "");
    });
    document.getElementById("entreprise_adresse_codePostal").addEventListener('keyup', function () {
      var zip_in = document.getElementById("entreprise_adresse_codePostal").value;
      var city = document.getElementById("city");

      if (zip_in.length == 5) {
        // Make HTTP Request
        fetch('https://api.zippopotam.us/fr/' + zip_in, {
          method: 'GET',
          headers: new Headers()
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.getElementById('entreprise_adresse_ville').removeAttribute('readonly');
          suggestions = [];

          for (ville in response['places']) {
            suggestions.push(response['places'][ville]['place name']);
          }

          var _iterator3 = _createForOfIteratorHelper(suggestions),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var iterator = _step3.value;
              var option = document.createElement('option');
              option.value = iterator;
              city.appendChild(option);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        });
      }
    });
  });
}

if (document.title == 'Inscription salarie') {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('ajoutersalarie_adresse_ville').setAttribute('readonly', 'readonly');
  });
  document.getElementById('ajoutersalarie_adresse_ville').focus(function () {
    document.getElementById('ajoutersalarie_adresse_ville').autocomplete("search", "");
  }); // OnKeyDown Function

  document.getElementById("ajoutersalarie_adresse_codePostal").addEventListener('keyup', function () {
    var zip_in = document.getElementById("ajoutersalarie_adresse_codePostal").value;
    var city = document.getElementById("city");

    if (zip_in.length == 5) {
      // Make HTTP Request
      fetch('https://api.zippopotam.us/fr/' + zip_in, {
        method: 'GET',
        headers: new Headers()
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.getElementById('ajoutersalarie_adresse_ville').removeAttribute('readonly');
        suggestions = [];

        for (ville in response['places']) {
          suggestions.push(response['places'][ville]['place name']);
        }

        var _iterator4 = _createForOfIteratorHelper(suggestions),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var iterator = _step4.value;
            var option = document.createElement('option');
            option.value = iterator;
            city.appendChild(option);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      });
    }
  });
}

;

if (document.title === "Demande d'intervention (phase 2)" || document.title === "Adresse du diagnostic") {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('adresse_inter_ville').setAttribute('readonly', 'readonly');
  });
  document.getElementById('adresse_inter_ville').focus(function () {
    document.getElementById('adresse_inter_ville').autocomplete("search", "");
  }); // OnKeyDown Function

  document.getElementById("adresse_inter_codePostal").addEventListener('keyup', function () {
    var zip_in = document.getElementById("adresse_inter_codePostal").value;
    var city = document.getElementById("city");

    if (zip_in.length == 5) {
      // Make HTTP Request
      fetch('https://geo.api.gouv.fr/communes?codePostal=' + zip_in, {
        method: 'GET',
        headers: new Headers()
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.getElementById('adresse_inter_ville').removeAttribute('readonly');
        document.getElementById('adresse_inter_ville').value = null;
        suggestions = [];

        for (ville in response) {
          suggestions.push(response[ville]['nom']);
        }

        var _iterator5 = _createForOfIteratorHelper(suggestions),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var iterator = _step5.value;
            var option = document.createElement('option');
            option.value = iterator;
            city.appendChild(option);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        var inter = document.querySelector('legend').dataset.inter;
        var requete = JSON.stringify({
          idInter: inter,
          departement: response[0]['codeDepartement']
        });
        fetch('/choixDepartement', {
          method: 'POST',
          body: requete
        });
      });
    }
  });
}

;

if (document.title == "Modifer l'adresse") {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('adresse_ville').setAttribute('readonly', 'readonly');
  });
  document.getElementById('adresse_ville').focus(function () {
    document.getElementById('adresse_ville').autocomplete("search", "");
  }); // OnKeyDown Function

  document.getElementById("adresse_code_postal").addEventListener('keyup', function () {
    var zip_in = document.getElementById("adresse_code_postal").value;
    var city = document.getElementById("city");

    if (zip_in.length == 5) {
      // Make HTTP Request
      fetch('https://api.zippopotam.us/fr/' + zip_in, {
        method: 'GET',
        headers: new Headers()
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        document.getElementById('adresse_ville').removeAttribute('readonly');
        document.getElementById('adresse_ville').value = null;
        suggestions = [];

        for (ville in response['places']) {
          suggestions.push(response['places'][ville]['place name']);
        }

        var _iterator6 = _createForOfIteratorHelper(suggestions),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var iterator = _step6.value;
            var option = document.createElement('option');
            option.value = iterator;
            city.appendChild(option);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      });
    }
  });
}

;

if (document.title == 'Inscription institutionnel') {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('institution_adresse_ville').setAttribute('readonly', 'readonly');
    document.getElementById('institution_adresse_ville').focus(function () {
      document.getElementById('institution_adresse_ville').autocomplete("search", "");
    });
    document.getElementById("institution_adresse_code_postal").addEventListener('keyup', function () {
      var zip_in = document.getElementById("institution_adresse_code_postal").value;
      var city = document.getElementById("city");

      if (zip_in.length == 5) {
        while (city.firstChild) {
          city.removeChild(city.lastChild);
        } // Make HTTP Request


        fetch('https://api.zippopotam.us/fr/' + zip_in, {
          method: 'GET',
          headers: new Headers()
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.getElementById('institution_adresse_ville').removeAttribute('readonly');
          suggestions = [];

          for (ville in response['places']) {
            suggestions.push(response['places'][ville]['place name']);
          }

          var _iterator7 = _createForOfIteratorHelper(suggestions),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var iterator = _step7.value;
              var option = document.createElement('option');
              option.value = iterator;
              city.appendChild(option);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        });
      }
    });
  });
}

if (document.title == "Création d'un dossier") {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('dossier_adresse_ville').setAttribute('readonly', 'readonly');
    document.getElementById('dossier_adresse_ville').focus(function () {
      document.getElementById('dossier_adresse_ville').autocomplete("search", "");
    });
    document.getElementById("dossier_adresse_codePostal").addEventListener('keyup', function () {
      var zip_in = document.getElementById("dossier_adresse_codePostal").value;
      var city = document.getElementById("city");

      if (zip_in.length == 5) {
        while (city.firstChild) {
          city.removeChild(city.lastChild);
        } // Make HTTP Request


        fetch('https://api.zippopotam.us/fr/' + zip_in, {
          method: 'GET',
          headers: new Headers()
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.getElementById('dossier_adresse_ville').removeAttribute('readonly');
          suggestions = [];

          for (ville in response['places']) {
            suggestions.push(response['places'][ville]['place name']);
          }

          var _iterator8 = _createForOfIteratorHelper(suggestions),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var iterator = _step8.value;
              var option = document.createElement('option');
              option.value = iterator;
              city.appendChild(option);
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        });
      }
    });
  });
}

if (document.title === 'Inscription Pro-Btp') {
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('entreprise_tp_adresse_ville').setAttribute('readonly', 'readonly');
    document.getElementById('entreprise_tp_adresse_ville').focus(function () {
      document.getElementById('entreprise_tp_adresse_ville').autocomplete("search", "");
    });
    document.getElementById("entreprise_tp_adresse_codePostal").addEventListener('keyup', function () {
      var zip_in = document.getElementById("entreprise_tp_adresse_codePostal").value;
      var city = document.getElementById("city");

      if (zip_in.length == 5) {
        // Make HTTP Request
        fetch('https://api.zippopotam.us/fr/' + zip_in, {
          method: 'GET',
          headers: new Headers()
        }).then(function (response) {
          return response.json();
        }).then(function (response) {
          document.getElementById('entreprise_tp_adresse_ville').removeAttribute('readonly');
          suggestions = [];

          for (ville in response['places']) {
            suggestions.push(response['places'][ville]['place name']);
          }

          var _iterator9 = _createForOfIteratorHelper(suggestions),
              _step9;

          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var iterator = _step9.value;
              var option = document.createElement('option');
              option.value = iterator;
              city.appendChild(option);
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
        });
      }
    });
  });
}

/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ 30:
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 31:
/*!************************!*\
  !*** semver (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

},[["./assets/js/app.js","runtime","vendors~app"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,